import streamlit as st
import time
import pandas as pd
import datetime
import json
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
from selenium.webdriver.support.ui import Select
import logging
import traceback
from io import StringIO
import sys
import platform
import datetime
import plotly.express as px
from db_connection import get_execution_history  # Certifique-se de importar esta fun√ß√£o
try:
    from db_connection import is_railway
except ImportError:
    def is_railway():
        return "RAILWAY_ENVIRONMENT" in os.environ
    
THIS_COUNTRY = "mexico" # Mude para "chile", "colombia", 

# Importa as fun√ß√µes de conex√£o com banco de dados com tratamento de erro
try:
    from db_connection import (
        init_database, 
        save_execution_results, 
        is_railway
    )
except ImportError:
    # Fallback sem banco de dados
    def init_database(): return None
    def save_execution_results(results): return None
    def is_railway(): return "RAILWAY_ENVIRONMENT" in os.environ

# Configura√ß√µes padr√£o - Credenciais removidas do frontend conforme solicitado
DEFAULT_CREDENTIALS = {
    "email": "viniciuschegouoperacional@gmail.com",
    "password": "Viniciuschegou@1"
}

# T√≠tulo e descri√ß√£o
st.markdown("<h1 style='text-align: center;'>üá≤üáΩ</h1>", unsafe_allow_html=True)
st.markdown("""
<style>
    .stButton>button {
        border: none !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
    }
    .stButton>button:hover {
        background-color: #f0f0f0 !important;
    }
    .metric-container {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        margin: 5px;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Inicializa o banco de dados
init_database()

# Verificar e instalar depend√™ncias
def check_dependencies():
    try:
        # No Railway, n√£o verificamos o Chrome
        if is_railway():
            st.sidebar.success("üöÇ Executando no Railway com PostgreSQL")
            return True
            
        # Verificar o sistema operacional
        system = platform.system()
        st.sidebar.info(f"Sistema Operacional: {system}")
        
        # Verificar se o Chrome est√° instalado
        if system == "Windows":
            chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
            chrome_path_alt = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
            if os.path.exists(chrome_path) or os.path.exists(chrome_path_alt):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Darwin":  # macOS
            if os.path.exists("/Applications/Google Chrome.app"):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Linux":
            chrome_exists = os.system("which google-chrome > /dev/null 2>&1") == 0
            if chrome_exists:
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        
        # Verificar m√≥dulos Python
        required_modules = ["selenium", "webdriver_manager", "pandas"]
        if is_railway():
            required_modules.append("psycopg2")
            
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            st.sidebar.error(f"‚ùå M√≥dulos faltando: {', '.join(missing_modules)}")
            st.sidebar.info("Execute: pip install " + " ".join(missing_modules))
        else:
            st.sidebar.success("‚úÖ Todos os m√≥dulos Python necess√°rios est√£o instalados")
        
        # Informa√ß√£o sobre ambiente
        if is_railway():
            st.sidebar.success("üöÇ Executando no Railway com PostgreSQL")
        else:
            st.sidebar.info("üíª Executando localmente com SQLite")
        
        return len(missing_modules) == 0
    except Exception as e:
        st.sidebar.error(f"Erro ao verificar depend√™ncias: {str(e)}")
        return False

# Inicializa o estado da sess√£o para armazenar logs
if 'log_output' not in st.session_state:
    st.session_state.log_output = StringIO()
if 'is_running' not in st.session_state:
    st.session_state.is_running = False
if 'progress' not in st.session_state:
    st.session_state.progress = 0
if 'total_items' not in st.session_state:
    st.session_state.total_items = 0
if 'processed_items' not in st.session_state:
    st.session_state.processed_items = 0
if 'success_count' not in st.session_state:
    st.session_state.success_count = 0
if 'failed_count' not in st.session_state:
    st.session_state.failed_count = 0
if 'report' not in st.session_state:
    st.session_state.report = None
if 'log_messages' not in st.session_state:
    st.session_state.log_messages = []
if 'error_messages' not in st.session_state:
    st.session_state.error_messages = []
if 'has_chromedriver' not in st.session_state:
    st.session_state.has_chromedriver = False
if 'automation_step' not in st.session_state:
    st.session_state.automation_step = 'idle'  # Estados: idle, setup, login, navigate, configure, process, complete
if 'driver' not in st.session_state:
    st.session_state.driver = None
if 'current_row_index' not in st.session_state:
    st.session_state.current_row_index = 0
if 'rows' not in st.session_state:
    st.session_state.rows = []
if 'failed_items' not in st.session_state:
    st.session_state.failed_items = []
if 'closed_tabs' not in st.session_state:
    st.session_state.closed_tabs = 0
if 'found_pagination' not in st.session_state:
    st.session_state.found_pagination = False
if 'start_time' not in st.session_state:
    st.session_state.start_time = None

# Sidebar com informa√ß√µes
st.sidebar.title("Configura√ß√£o")

# No Railway sempre usamos headless, em local podemos escolher
if is_railway():
    use_headless = True
else:
    use_headless = st.sidebar.checkbox("Modo Headless", value=True, 
                                help="Se marcado, o navegador n√£o ser√° exibido na tela. Desmarque para depura√ß√£o.")

# Verificar depend√™ncias
dependencies_ok = check_dependencies()

# Tentar instalar o ChromeDriver apenas se n√£o estivermos no Railway
if dependencies_ok and not st.session_state.has_chromedriver and not is_railway():
    with st.sidebar:
        with st.spinner("Instalando ChromeDriver..."):
            try:
                # Tenta instalar o ChromeDriver
                driver_path = ChromeDriverManager().install()
                st.session_state.has_chromedriver = True
                st.sidebar.success(f"‚úÖ ChromeDriver instalado em: {driver_path}")
            except Exception as e:
                st.sidebar.error(f"‚ùå Erro ao instalar ChromeDriver: {str(e)}")
                st.sidebar.info("Por favor, instale manualmente o ChromeDriver compat√≠vel com sua vers√£o do Chrome")
elif is_railway():
    # No Railway, assumimos que o ChromeDriver est√° dispon√≠vel atrav√©s do Dockerfile
    st.session_state.has_chromedriver = True

# Configura√ß√£o de logging para o Streamlit
class StreamlitHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        st.session_state.log_output.write(log_entry + '\n')
        
        # Adiciona √† lista de mensagens para exibi√ß√£o em tempo real
        log_type = "info"
        if record.levelno >= logging.ERROR:
            log_type = "error"
            # Adiciona erros √† lista espec√≠fica de erros
            st.session_state.error_messages.append({
                "type": "error",
                "message": log_entry
            })
        elif record.levelno >= logging.WARNING:
            log_type = "warning"
            
        st.session_state.log_messages.append({
            "type": log_type,
            "message": log_entry
        })

logger = logging.getLogger("dropi_automation")
logger.setLevel(logging.INFO)
# Limpa handlers existentes para evitar duplica√ß√£o
if logger.handlers:
    logger.handlers = []
handler = StreamlitHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

tab1, tab2 = st.tabs(["Execu√ß√£o Manual", "Relat√≥rio"])

# --- Conte√∫do da Aba 1: Execu√ß√£o Manual ---
with tab1:
    st.subheader("Execu√ß√£o Manual")

    # Bot√£o para iniciar automa√ß√£o dentro de um formul√°rio
    with st.form("automation_form"):
        submit_button = st.form_submit_button("Iniciar Automa√ß√£o", use_container_width=True)

        if not dependencies_ok or not st.session_state.has_chromedriver:
            st.warning("‚ö†Ô∏è Verifica√ß√£o de depend√™ncias falhou. Veja o painel lateral.")

        if submit_button:
            # Verifica se j√° n√£o est√° rodando para evitar m√∫ltiplos cliques
            if not st.session_state.is_running:
                st.session_state.is_running = True
                st.session_state.log_output = StringIO()  # Limpa o log anterior
                st.session_state.log_messages = []  # Limpa as mensagens de log
                st.session_state.error_messages = []  # Limpa as mensagens de erro
                st.session_state.progress = 0
                st.session_state.total_items = 0
                st.session_state.processed_items = 0
                st.session_state.success_count = 0
                st.session_state.failed_count = 0
                st.session_state.report = None
                st.session_state.automation_step = 'setup'
                st.session_state.current_row_index = 0
                st.session_state.rows = []
                st.session_state.failed_items = []
                st.session_state.closed_tabs = 0
                st.session_state.found_pagination = False
                # Pega as credenciais padr√£o (ajuste se necess√°rio)
                st.session_state.email = DEFAULT_CREDENTIALS["email"]
                st.session_state.password = DEFAULT_CREDENTIALS["password"]
                st.session_state.use_headless = use_headless # Usa a configura√ß√£o da sidebar
                st.session_state.start_time = time.time()
                st.success("Iniciando automa√ß√£o... Aguarde.")
                st.rerun() # Recarrega para iniciar o processo
            else:
                st.warning("Automa√ß√£o j√° est√° em execu√ß√£o.")

    # Exibe o status atual - AGORA DENTRO DA TAB 1
    st.subheader("Status da Execu√ß√£o Atual")
    if st.session_state.is_running:
        st.info("‚úÖ Automa√ß√£o em execu√ß√£o...")

        # Bot√£o para parar a automa√ß√£o
        if st.button("Parar Automa√ß√£o"):
            st.session_state.is_running = False

            # Fecha o navegador se estiver aberto
            if st.session_state.driver:
                try:
                    st.session_state.driver.quit()
                except Exception as e:
                    logger.warning(f"Erro ao tentar fechar o driver: {e}")
                st.session_state.driver = None

            st.warning("Automa√ß√£o interrompida pelo usu√°rio.")
            # Gera um relat√≥rio parcial se algo foi processado
            if st.session_state.processed_items > 0:
                 generate_report() # Gera relat√≥rio mesmo se interrompido
            st.rerun()
    else:
        # Mostra status apenas se uma automa√ß√£o foi iniciada ou conclu√≠da nesta sess√£o
        if st.session_state.start_time is not None:
            if st.session_state.report:
                st.success("‚úÖ Automa√ß√£o conclu√≠da!")
            elif st.session_state.processed_items > 0 or st.session_state.failed_count > 0:
                 st.warning("‚ö†Ô∏è Automa√ß√£o interrompida ou finalizada com erros.")
            # N√£o mostra "Aguardando in√≠cio" aqui, pois isso √© impl√≠cito se n√£o estiver rodando
        else:
            st.info("Clique em 'Iniciar Automa√ß√£o' para come√ßar.")


    # Exibe estat√≠sticas da execu√ß√£o atual - AGORA DENTRO DA TAB 1
    # S√≥ mostra se a automa√ß√£o j√° rodou ou est√° rodando
    if st.session_state.start_time is not None:
        st.subheader("Estat√≠sticas da Execu√ß√£o Atual")
        cols = st.columns(3)
        with cols[0]:
            st.metric("Novelties Processadas", st.session_state.processed_items)
        with cols[1]:
            st.metric("Sucesso", st.session_state.success_count)
        with cols[2]:
            st.metric("Falhas", st.session_state.failed_count)

        # Barra de progresso - AGORA DENTRO DA TAB 1
        if st.session_state.total_items > 0:
            st.progress(st.session_state.progress)
            st.caption(f"Progresso: {st.session_state.processed_items}/{st.session_state.total_items} items")
        elif st.session_state.is_running and st.session_state.automation_step not in ['idle', 'setup', 'login', 'navigate']:
             # Mostra barra indeterminada se estiver rodando mas ainda n√£o contou itens
             st.progress(0)
             st.caption("Calculando itens...")


        # Exibe erros da execu√ß√£o atual - AGORA DENTRO DA TAB 1
        if st.session_state.error_messages:
            st.subheader("Erros Detectados na Execu√ß√£o Atual")
            # Mostra apenas os 10 √∫ltimos erros para n√£o poluir muito
            for error in st.session_state.error_messages[-10:]:
                st.error(error["message"])

        st.markdown("<hr style='margin: 20px 0; border-top: 1px solid #ddd;'>", unsafe_allow_html=True)

        # Log completo da execu√ß√£o atual - AGORA DENTRO DA TAB 1
        if 'show_log' not in st.session_state:
            st.session_state.show_log = False

        show_log = st.checkbox("Mostrar Log Completo da Execu√ß√£o Atual", value=st.session_state.show_log)
        st.session_state.show_log = show_log

        if st.session_state.show_log:
            log_container = st.container(height=400) # Define altura fixa para o container do log
            log_container.text_area(
                "Log Completo",
                value=st.session_state.log_output.getvalue(),
                height=380, # Altura interna um pouco menor
                key="log_area" # Chave para evitar problemas de atualiza√ß√£o
            )

        # Relat√≥rio da √öLTIMA execu√ß√£o manual - AGORA DENTRO DA TAB 1
        # Exibe apenas se a automa√ß√£o N√ÉO estiver rodando e um relat√≥rio foi gerado
        if st.session_state.report and not st.session_state.is_running:
            st.subheader("Relat√≥rio da √öltima Execu√ß√£o")
            report = st.session_state.report

            exec_time_sec = report.get("execution_time", 0)
            exec_time_min = exec_time_sec / 60

            st.write(f"Data/Hora: {report.get('execution_date', 'N/A')}")
            st.write(f"Dura√ß√£o: {exec_time_min:.2f} minutos ({exec_time_sec:.2f} segundos)")
            st.write(f"Total Processado com Sucesso: {report.get('total_processados', 0)}")
            st.write(f"Total Falhas: {report.get('total_falhas', 0)}")
            st.write(f"Guias Extras Fechadas: {report.get('guias_fechadas', 0)}")
            st.write(f"Op√ß√£o de 1000 itens encontrada: {'Sim' if report.get('encontrou_paginacao') else 'N√£o'}")

            if report.get("total_falhas", 0) > 0:
                st.subheader("Detalhes das Falhas da √öltima Execu√ß√£o")
                failures_df = pd.DataFrame(report.get("itens_com_falha", []))
                # Renomeia colunas para clareza
                failures_df.rename(columns={'id': 'ID/Linha da Novelty', 'error': 'Erro'}, inplace=True)
                st.dataframe(failures_df, use_container_width=True)

# --- Conte√∫do da Aba 2: Relat√≥rio Hist√≥rico ---
with tab2:
    st.subheader("Relat√≥rio Hist√≥rico de Execu√ß√µes")

    # Filtros de data
    col1, col2 = st.columns(2)
    with col1:
        # Define data inicial padr√£o como 30 dias atr√°s
        default_start_date = datetime.date.today() - datetime.timedelta(days=30)
        start_date = st.date_input("Data Inicial", value=default_start_date, key="report_start_date")
    with col2:
        # Data final padr√£o √© hoje
        default_end_date = datetime.date.today()
        end_date = st.date_input("Data Final", value=default_end_date, key="report_end_date")

    # Converte as datas para o formato string YYYY-MM-DD para a query
    # Garante que a data final inclua o dia todo
    start_date_str = start_date.strftime("%Y-%m-%d")
    # Adiciona hora final para incluir todo o dia final na query
    end_date_str = end_date.strftime("%Y-%m-%d") + " 23:59:59"

    # Bot√£o para atualizar o relat√≥rio
    if st.button("Atualizar Relat√≥rio Hist√≥rico", key="update_report_history"):
        try:
            # Busca os dados do banco FILTRANDO POR PA√çS
            st.session_state.filtered_data = get_execution_history(start_date_str, end_date_str, THIS_COUNTRY)
            st.rerun() # Recarrega para mostrar os dados atualizados
        except Exception as e:
            st.error(f"Erro ao buscar hist√≥rico do banco de dados: {e}")
            st.session_state.filtered_data = pd.DataFrame() # Define como vazio em caso de erro

    # Inicializa a vari√°vel filtered_data se n√£o existir
    if 'filtered_data' not in st.session_state:
        try:
            # Tenta carregar na primeira vez FILTRANDO POR PA√çS
            st.session_state.filtered_data = get_execution_history(start_date_str, end_date_str, THIS_COUNTRY)
        except Exception as e:
            # Log espec√≠fico para falha na carga inicial
            logger.error(f"Erro ao buscar hist√≥rico inicial para {THIS_COUNTRY}: {e}", exc_info=True)
            st.error(f"Erro ao buscar hist√≥rico inicial do banco de dados: {e}")
            st.session_state.filtered_data = pd.DataFrame()

    # Exibe os dados em formato de tabela
    if st.session_state.filtered_data is None or st.session_state.filtered_data.empty:
        st.info("N√£o h√° dados de execu√ß√£o para o per√≠odo selecionado.")
    else:
        # Faz uma c√≥pia para evitar modificar o estado original
        display_df = st.session_state.filtered_data.copy()

        # --- MODIFICA√á√ÉO: Converte tempo para minutos ---
        # Garante que a coluna de tempo seja num√©rica, tratando poss√≠veis erros
        display_df['execution_time'] = pd.to_numeric(display_df['execution_time'], errors='coerce')
        # Remove linhas onde o tempo n√£o p√¥de ser convertido
        display_df.dropna(subset=['execution_time'], inplace=True)
        # Calcula os minutos
        display_df['Tempo (minutos)'] = (display_df['execution_time'] / 60) #.round(2) Deixando sem arredondar para m√©trica m√©dia
        display_df['Tempo Formatado (min)'] = display_df['Tempo (minutos)'].apply(lambda x: f"{x:.2f}")

        # Converte e formata a data
        try:
            display_df['execution_date'] = pd.to_datetime(display_df['execution_date'])
            display_df['Data/Hora'] = display_df['execution_date'].dt.strftime('%d/%m/%Y %H:%M')
        except Exception as e:
            logger.warning(f"Erro ao formatar data do hist√≥rico: {e}")
            display_df['Data/Hora'] = display_df['execution_date'].astype(str) # Fallback para string

        # Renomeia colunas para portugu√™s
        display_df.rename(columns={
            'successful': 'Sucessos',
            'failed': 'Falhas',
            # Mantendo a coluna original para c√°lculo, mas n√£o exibindo
            # 'execution_time': 'Tempo Original (s)'
        }, inplace=True)

        # Define as colunas a serem exibidas
        # Exibe o tempo FORMATADO em minutos
        display_columns = ['Data/Hora', 'Sucessos', 'Falhas', 'Tempo Formatado (min)']

        st.dataframe(
            display_df[display_columns],
            use_container_width=True,
            # Oculta o √≠ndice do dataframe
            hide_index=True,
        )

        # Estat√≠sticas agregadas para o per√≠odo
        st.subheader("Totais para o Per√≠odo Selecionado")
        # total_novelties = display_df['total_processed'].sum() # Coluna 'total_processed' n√£o parece existir na query, usar Sucessos + Falhas
        total_success = display_df['Sucessos'].sum()
        total_failed = display_df['Falhas'].sum()
        total_processed_calc = total_success + total_failed
        # Calcula a m√©dia dos minutos
        avg_time_min = display_df['Tempo (minutos)'].mean() if not display_df['Tempo (minutos)'].empty else 0

        stats_cols = st.columns(4)
        with stats_cols[0]:
            st.metric("Total Processado", f"{total_processed_calc}")
        with stats_cols[1]:
            st.metric("Total Sucessos", f"{total_success}")
        with stats_cols[2]:
            st.metric("Total Falhas", f"{total_failed}")
        with stats_cols[3]:
            st.metric("Tempo M√©dio (min)", f"{avg_time_min:.2f}")


# Rodap√© (fora das abas)
st.markdown("---")
st.caption("Automa√ß√£o Dropi Novelties ¬© 2025")

# Fun√ß√µes de automa√ß√£o (adaptadas para serem executadas passo a passo)
def setup_driver():
    """Configura o driver do Selenium."""
    logger.info("Iniciando configura√ß√£o do driver Chrome...")
    
    chrome_options = Options()
    
    # No Railway sempre use headless
    if is_railway() or st.session_state.use_headless:
        logger.info("Modo headless ativado")
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
    else:
        logger.info("Modo headless desativado - navegador ser√° vis√≠vel")
    
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-extensions")
    
    try:
        if is_railway():
            # No Railway, usa o Chrome j√° instalado pelo Dockerfile
            logger.info("Inicializando o driver Chrome no Railway...")
            service = Service()
            driver = webdriver.Chrome(service=service, options=chrome_options)
        else:
            # Localmente, usa o webdriver_manager
            logger.info("Inicializando o driver Chrome localmente...")
            driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=chrome_options
            )
            
        logger.info("Driver do Chrome iniciado com sucesso")
        st.session_state.driver = driver
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar o driver Chrome: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def login():
    """Fun√ß√£o de login super robusta."""
    try:
        driver = st.session_state.driver
        
        # Abre o site em uma nova janela maximizada
        driver.maximize_window()
        
        # Configura√ß√µes especiais para o Railway
        if is_railway():
            driver.set_window_size(1920, 1080)
            driver.set_page_load_timeout(60)
            driver.set_script_timeout(60)
        
        # Navega para a p√°gina de login
        logger.info("Navegando para a p√°gina de login...")
        driver.get("https://app.dropi.mx/")
        time.sleep(8)  # Espera fixa aumentada para o Railway
        
        # Tira screenshot para an√°lise
        save_screenshot(driver, "login_page.png")
        logger.info("Screenshot da p√°gina salvo como login_page.png")
        
        # Inspeciona a p√°gina e loga a estrutura HTML para an√°lise
        logger.info("Analisando estrutura da p√°gina de login...")
        html = driver.page_source
        logger.info(f"T√≠tulo da p√°gina: {driver.title}")
        logger.info(f"URL atual: {driver.current_url}")
        
        # Tenta encontrar os campos usando diferentes m√©todos
        
        # M√âTODO 1: Tenta encontrar os campos por XPath direto
        try:
            logger.info("Tentando encontrar campos por XPath...")
            
            # Lista todos os inputs para depura√ß√£o
            inputs = driver.find_elements(By.TAG_NAME, 'input')
            logger.info(f"Total de campos input encontrados: {len(inputs)}")
            for i, inp in enumerate(inputs):
                input_type = inp.get_attribute('type')
                input_id = inp.get_attribute('id')
                input_name = inp.get_attribute('name')
                logger.info(f"Input #{i}: tipo={input_type}, id={input_id}, name={input_name}")
            
            # Tenta localizar o campo de email/usu√°rio com espera expl√≠cita
            email_field = None
            
            try:
                # Espera expl√≠cita para o campo de email
                email_field = WebDriverWait(driver, 15).until(
                    EC.element_to_be_clickable((By.XPATH, "//input[@type='email']"))
                )
                logger.info("Campo de email encontrado por type='email' com espera expl√≠cita")
            except TimeoutException:
                logger.info("Timeout esperando pelo campo de email type='email'")
                
                try:
                    # Tenta com type='text'
                    email_field = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@type='text']"))
                    )
                    logger.info("Campo de email encontrado por type='text' com espera expl√≠cita")
                except:
                    # Se ainda falhar, tenta pegar o primeiro input
                    if len(inputs) > 0:
                        WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.TAG_NAME, 'input'))
                        )
                        email_field = inputs[0]
                        logger.info("Usando primeiro campo input encontrado para email")
            
            # Se encontrou o campo de email, preenche
            if email_field:
                # Rola para o elemento para garantir visibilidade
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", email_field)
                time.sleep(1)
                
                # Preenche usando JavaScript primeiro (mais confi√°vel no Railway)
                driver.execute_script("arguments[0].value = arguments[1];", email_field, st.session_state.email)
                driver.execute_script("arguments[0].dispatchEvent(new Event('input', { bubbles: true }));", email_field)
                driver.execute_script("arguments[0].dispatchEvent(new Event('change', { bubbles: true }));", email_field)
                
                # Tenta tamb√©m com m√©todo padr√£o
                try:
                    email_field.clear()
                    email_field.send_keys(st.session_state.email)
                except:
                    logger.info("Preenchimento direto falhou, mas JS deve ter funcionado")
                
                logger.info(f"Email preenchido: {st.session_state.email}")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o campo de email")
            
            # Procura o campo de senha com espera expl√≠cita
            password_field = None
            
            try:
                password_field = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//input[@type='password']"))
                )
                logger.info("Campo de senha encontrado por type='password' com espera expl√≠cita")
            except:
                # Tenta usando o segundo input
                if len(inputs) > 1:
                    WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.TAG_NAME, 'input'))
                    )
                    password_field = inputs[1]
                    logger.info("Usando segundo campo input encontrado para senha")
            
            # Se encontrou o campo de senha, preenche
            if password_field:
                # Rola para o elemento
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", password_field)
                time.sleep(1)
                
                # Preenche usando JavaScript primeiro
                driver.execute_script("arguments[0].value = arguments[1];", password_field, st.session_state.password)
                driver.execute_script("arguments[0].dispatchEvent(new Event('input', { bubbles: true }));", password_field)
                driver.execute_script("arguments[0].dispatchEvent(new Event('change', { bubbles: true }));", password_field)
                
                # Tenta tamb√©m com m√©todo padr√£o
                try:
                    password_field.clear()
                    password_field.send_keys(st.session_state.password)
                except:
                    logger.info("Preenchimento direto da senha falhou, mas JS deve ter funcionado")
                
                logger.info("Senha preenchida")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o campo de senha")
            
            # Lista todos os bot√µes para depura√ß√£o
            buttons = driver.find_elements(By.TAG_NAME, 'button')
            logger.info(f"Total de bot√µes encontrados: {len(buttons)}")
            for i, btn in enumerate(buttons):
                btn_text = btn.text
                btn_type = btn.get_attribute('type')
                logger.info(f"Bot√£o #{i}: texto='{btn_text}', tipo={btn_type}")
            
            # Procura o bot√£o de login com espera expl√≠cita
            login_button = None
            
            try:
                login_button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[@type='submit']"))
                )
                logger.info("Bot√£o de login encontrado por type='submit' com espera expl√≠cita")
            except:
                # Tenta por texto
                for btn in buttons:
                    if "iniciar" in btn.text.lower() or "login" in btn.text.lower() or "entrar" in btn.text.lower():
                        login_button = btn
                        logger.info(f"Bot√£o de login encontrado pelo texto: '{btn.text}'")
                        break
            
            # Se n√£o encontrou por texto espec√≠fico, usa o primeiro bot√£o
            if not login_button and len(buttons) > 0:
                # Espera o bot√£o ser clic√°vel
                WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.TAG_NAME, 'button'))
                )
                login_button = buttons[0]
                logger.info("Usando primeiro bot√£o encontrado para login")
            
            # Se encontrou o bot√£o, clica
            if login_button:
                # Rola para o bot√£o
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", login_button)
                time.sleep(1)
                
                # Clica usando JavaScript (mais confi√°vel no Railway)
                driver.execute_script("arguments[0].click();", login_button)
                logger.info("Clicado no bot√£o de login via JavaScript")
                
                # Tenta tamb√©m com m√©todo padr√£o
                try:
                    login_button.click()
                    logger.info("Clicado no bot√£o de login via m√©todo padr√£o (backup)")
                except:
                    logger.info("Clique direto falhou, mas JS deve ter funcionado")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o bot√£o de login")
            
            # Aguarda a navega√ß√£o
            time.sleep(10)  # Aumentado para o Railway
            
            # Tira screenshot ap√≥s o login
            save_screenshot(driver, "after_login.png")
            logger.info("Screenshot ap√≥s login salvo como after_login.png")
            
            # Verifica se o login foi bem-sucedido
            current_url = driver.current_url
            logger.info(f"URL ap√≥s tentativa de login: {current_url}")
            
            # Tenta encontrar elementos que aparecem ap√≥s login bem-sucedido
            menu_items = driver.find_elements(By.TAG_NAME, 'a')
            for item in menu_items:
                logger.info(f"Item de menu encontrado: '{item.text}'")
                if "dashboard" in item.text.lower() or "orders" in item.text.lower():
                    logger.info(f"Item de menu confirmando login: '{item.text}'")
                    return True
            
            # Se n√£o encontrou elementos claros de login, verifica se estamos na URL de dashboard
            if "dashboard" in current_url or "orders" in current_url:
                logger.info("Login confirmado pela URL")
                return True
            
            # Se chegou aqui, o login pode ter falhado
            logger.warning("N√£o foi poss√≠vel confirmar se o login foi bem-sucedido. Tentando continuar mesmo assim.")
            return True
            
        except Exception as e:
            logger.error(f"Erro no m√©todo 1: {str(e)}")
            # Continua para o pr√≥ximo m√©todo
        
        # M√âTODO 2: Tenta navegar diretamente para a p√°gina de Orders
        logger.info("Tentando m√©todo alternativo: navega√ß√£o direta...")
        try:
            driver.get("https://app.dropi.mx/orders")
            time.sleep(8)  # Aumentado para o Railway
            save_screenshot(driver, "direct_orders.png")
            
            # Verifica se fomos redirecionados para login ou se estamos na p√°gina de orders
            current_url = driver.current_url
            logger.info(f"URL ap√≥s navega√ß√£o direta: {current_url}")
            
            if "orders" in current_url and "login" not in current_url:
                logger.info("Navega√ß√£o direta bem-sucedida!")
                return True
            else:
                logger.warning("Navega√ß√£o direta falhou, redirecionado para login")
        except:
            logger.error("Erro ao tentar navega√ß√£o direta")
        
        logger.error("Todos os m√©todos de login falharam")
        return False
        
    except Exception as e:
        logger.error(f"Erro geral no login: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def navigate_to_novelties():
    """Navega at√© a p√°gina de novelties."""
    try:
        driver = st.session_state.driver
        
        # Verifica se j√° estamos na dashboard
        logger.info("Verificando a p√°gina atual...")
        current_url = driver.current_url
        logger.info(f"URL atual: {current_url}")
        
        # Clica em My Orders - usando JavaScript para maior confiabilidade
        logger.info("Tentando clicar em 'My Orders'...")
        try:
            # Primeiro tenta com JavaScript
            driver.execute_script("Array.from(document.querySelectorAll('a')).find(el => el.textContent.includes('My Orders')).click();")
            logger.info("Clicado em 'My Orders' via JavaScript")
        except:
            # Se falhar, tenta com Selenium normal
            try:
                my_orders_link = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'My Orders')]"))
                )
                my_orders_link.click()
                logger.info("Clicado em 'My Orders' via Selenium")
            except:
                logger.warning("N√£o foi poss√≠vel clicar em 'My Orders', tentando abrir URL diretamente")
                # Se ainda falhar, tenta navegar diretamente para a URL
                driver.get("https://app.dropi.mx/orders")
                time.sleep(3)
        
        # Espera um pouco
        time.sleep(5)
        
        # Clica em Novelties - usando abordagem similar
        logger.info("Tentando clicar em 'Novelties'...")
        try:
            # Primeiro tenta com JavaScript
            driver.execute_script("Array.from(document.querySelectorAll('a')).find(el => el.textContent.includes('Novelties')).click();")
            logger.info("Clicado em 'Novelties' via JavaScript")
        except:
            # Se falhar, tenta com Selenium normal
            try:
                novelties_link = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Novelties')]"))
                )
                novelties_link.click()
                logger.info("Clicado em 'Novelties' via Selenium")
            except:
                logger.warning("N√£o foi poss√≠vel clicar em 'Novelties', tentando abrir URL diretamente")
                # Se ainda falhar, tenta navegar diretamente para a URL
                driver.get("https://app.dropi.mx/novelties")
                time.sleep(3)
        
        # Espera mais um pouco
        time.sleep(5)
        
        # Tira screenshot para verificar
        try:
            save_screenshot(driver, "novelties_page.png")
            logger.info("Screenshot da p√°gina de novelties salvo")
        except:
            pass
        
        # Espera at√© que a tabela de novelties seja carregada
        logger.info("Verificando se a tabela de novelties foi carregada...")
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//table"))
            )
            logger.info("Tabela de novelties encontrada!")
        except:
            logger.warning("N√£o foi poss√≠vel encontrar a tabela, mas continuando...")
        
        return True
    except Exception as e:
        logger.error(f"Erro ao navegar at√© Novelties: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def configure_entries_display():
    """Configura para exibir 1000 entradas usando o elemento select identificado."""
    try:
        driver = st.session_state.driver
        # Rola at√© o final da p√°gina
        logger.info("Rolando at√© o final da p√°gina para verificar op√ß√µes de exibi√ß√£o...")
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)  # Aguarda para verificar se a op√ß√£o est√° presente
        
        # Tira screenshot
        try:
            save_screenshot(driver, "page_bottom_before.png")
            logger.info("Screenshot do final da p√°gina salvo (antes)")
        except:
            pass
        
        # Procura especificamente pelo select com os atributos informados
        logger.info("Procurando elemento select espec√≠fico conforme HTML fornecido...")
        
        entries_found = False
        try:
            # M√©todo 1: Procura pelo elemento select espec√≠fico
            select_elements = driver.find_elements(By.XPATH, "//select[@name='select' and @id='select' and contains(@class, 'custom-select')]")
            
            if not select_elements:
                # M√©todo 2: Procura por qualquer select na p√°gina
                select_elements = driver.find_elements(By.XPATH, "//select[contains(@class, 'custom-select') or contains(@class, 'form-control')]")
            
            if not select_elements:
                # M√©todo 3: Procura por qualquer select
                select_elements = driver.find_elements(By.TAG_NAME, "select")
            
            if select_elements:
                logger.info(f"Elemento select encontrado: {len(select_elements)} elementos")
                
                # Usa o primeiro select encontrado
                select_element = select_elements[0]
                
                # Tira screenshot antes de interagir com o select
                save_screenshot(driver, "before_select_interaction.png")
                
                # Cria um objeto Select para manipular o elemento
                select = Select(select_element)
                
                # Verifica se h√° uma op√ß√£o com valor "1000"
                options_text = [o.text for o in select.options]
                logger.info(f"Op√ß√µes dispon√≠veis no select: {options_text}")
                
                try:
                    # Primeiro tenta selecionar pelo texto vis√≠vel "1000"
                    select.select_by_visible_text("1000")
                    logger.info("Selecionado '1000' pelo texto vis√≠vel")
                    entries_found = True
                except Exception as e:
                    logger.info(f"Erro ao selecionar por texto vis√≠vel: {str(e)}")
                    
                    try:
                        # Tenta selecionar pelo √≠ndice da op√ß√£o que cont√©m "1000"
                        for i, option in enumerate(select.options):
                            if "1000" in option.text or "1000" in option.get_attribute("value"):
                                select.select_by_index(i)
                                logger.info(f"Selecionado '1000' pelo √≠ndice {i}")
                                entries_found = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao selecionar por √≠ndice: {str(e)}")
                        
                        try:
                            # √öltimo recurso: tenta selecionar qualquer valor que contenha "1000"
                            for value in ["4: 1000", "1000", "4"]:  # Tenta v√°rios formatos poss√≠veis
                                try:
                                    select.select_by_value(value)
                                    logger.info(f"Selecionado '1000' pelo valor '{value}'")
                                    entries_found = True
                                    break
                                except:
                                    continue
                        except Exception as e:
                            logger.info(f"Erro ao selecionar por valor: {str(e)}")
                
                # Tenta tamb√©m usando JavaScript
                if not entries_found:
                    try:
                        logger.info("Tentando selecionar '1000' via JavaScript...")
                        # Encontra o valor que cont√©m 1000
                        for option in select.options:
                            if "1000" in option.text:
                                value = option.get_attribute("value")
                                # Define o valor diretamente via JavaScript
                                driver.execute_script(f"arguments[0].value = '{value}';", select_element)
                                # Dispara evento de change para atualizar a UI
                                driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", select_element)
                                logger.info(f"Selecionado '1000' via JavaScript com valor '{value}'")
                                entries_found = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao selecionar via JavaScript: {str(e)}")
                
                # Tira screenshot ap√≥s tentar selecionar
                save_screenshot(driver, "after_select_interaction.png")
                
                if entries_found:
                    logger.info("Configurado para exibir 1000 entradas")
                    st.session_state.found_pagination = True
                    
                    # Aguarda o carregamento da tabela com mais entradas
                    logger.info("Aguardando carregamento da tabela com mais entradas...")
                    time.sleep(5)
                    
                    # ADICIONADO: Espera expl√≠cita para o carregamento da tabela
                    logger.info("Esperando explicitamente pelo carregamento das linhas da tabela...")
                    try:
                        # Espera at√© que haja pelo menos uma linha na tabela ou at√© 30 segundos
                        WebDriverWait(driver, 30).until(
                            lambda d: len(d.find_elements(By.XPATH, "//table/tbody/tr")) > 0
                        )
                        logger.info("Linhas da tabela carregadas com sucesso!")
                    except TimeoutException:
                        logger.warning("Timeout esperando pelas linhas da tabela. Verificando se h√° mensagem de 'Sem resultados'...")
                        # Verifica se existe uma mensagem de "Sem resultados" ou similar
                        try:
                            no_results = driver.find_element(By.XPATH, "//*[contains(text(), 'No hay resultados') or contains(text(), 'No data') or contains(text(), 'Sem resultados')]")
                            if no_results:
                                logger.info(f"Mensagem encontrada: '{no_results.text}' - A tabela realmente parece estar vazia.")
                        except:
                            # Vamos tentar um outro seletor para as linhas
                            logger.info("Tentando seletor alternativo para as linhas da tabela...")
            else:
                logger.warning("N√£o foi poss√≠vel encontrar o elemento select")
        except Exception as e:
            logger.error(f"Erro ao configurar quantidade de entradas: {str(e)}")
            logger.error(traceback.format_exc())
        
        # Volta para o topo da p√°gina
        logger.info("Retornando ao topo da p√°gina...")
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(1)
        
        # Agora obt√©m todas as linhas da tabela
        logger.info("Contando linhas da tabela...")
        try:
            # MODIFICADO: Tenta diferentes XPaths para encontrar as linhas
            rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
            
            # Se n√£o encontrou linhas, tenta um seletor mais gen√©rico
            if not rows:
                logger.info("Nenhuma linha encontrada com o seletor padr√£o, tentando seletor alternativo...")
                rows = driver.find_elements(By.XPATH, "//table//tr[position() > 1]")  # Ignora a primeira linha (cabe√ßalho)
            
            # Se ainda n√£o encontrou, tenta outro seletor mais gen√©rico
            if not rows:
                logger.info("Tentando outro seletor alternativo...")
                rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
            
            # Se continua sem encontrar, tenta um √∫ltimo recurso
            if not rows:
                logger.info("√öltimo recurso: capturando todas as linhas...")
                rows = driver.find_elements(By.TAG_NAME, "tr")
                # Filtra as linhas para remover poss√≠veis cabe√ßalhos
                if len(rows) > 1:
                    rows = rows[1:]  # Remove a primeira linha, que provavelmente √© o cabe√ßalho
            
            # Tira screenshot da tabela para an√°lise
            save_screenshot(driver, "table_after_loading.png")
            logger.info("Screenshot da tabela ap√≥s carregamento salvo")
            
            st.session_state.rows = rows
            st.session_state.total_items = len(rows)
            logger.info(f"Total de {len(rows)} novelties encontradas para processar")
            
            # Se n√£o encontrou nenhuma linha, tenta verificar se h√° mensagem indicando aus√™ncia de dados
            if len(rows) == 0:
                try:
                    page_text = driver.find_element(By.TAG_NAME, "body").text
                    logger.info(f"Texto da p√°gina: {page_text[:500]}...")  # Primeiros 500 caracteres
                    
                    # Verifica se h√° textos comuns que indicam aus√™ncia de dados
                    no_data_texts = ["No hay resultados", "No data available", "No records found", "Sem resultados"]
                    for text in no_data_texts:
                        if text in page_text:
                            logger.info(f"Mensagem encontrada: '{text}' - A tabela realmente parece estar vazia.")
                except:
                    pass
        except Exception as e:
            logger.error(f"Erro ao contar linhas da tabela: {str(e)}")
            logger.error(traceback.format_exc())
            logger.warning("N√£o foi poss√≠vel contar as linhas da tabela. Usando valor padr√£o.")
            st.session_state.rows = []
            st.session_state.total_items = 0
        
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar exibi√ß√£o de entradas: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def process_current_novelty():
    """
    Processa a novelty atual na lista (st.session_state.rows).
    Retorna True se o processamento deve parar (conclu√≠do ou erro cr√≠tico).
    Retorna False se deve continuar para a pr√≥xima novelty.
    """
    driver = st.session_state.get('driver') # Pega o driver do estado da sess√£o
    if not driver:
        logger.error("Driver n√£o encontrado no estado da sess√£o ao iniciar process_current_novelty. Interrompendo.")
        st.session_state.is_running = False
        generate_report() # Tenta gerar relat√≥rio antes de parar
        return True # Indica que parou

    rows = st.session_state.get('rows', [])
    total_items = len(rows)
    current_row_index = st.session_state.get('current_row_index', 0)

    # Verifica se h√° rows para processar
    if not rows:
        logger.info("Nenhuma novidade encontrada na tabela para processar.")
        generate_report() # Gera relat√≥rio mesmo sem itens
        # Garante fechamento do driver se n√£o h√° itens
        if driver:
             try: driver.quit()
             except: pass
             st.session_state.driver = None
        return True # Indica que terminou

    # Verifica se todas as rows j√° foram processadas
    if current_row_index >= total_items:
        logger.info("Todas as novelties foram processadas.")
        generate_report() # Gera relat√≥rio final
        # Garante fechamento do driver ao concluir
        if driver:
             try: driver.quit()
             except: pass
             st.session_state.driver = None
        return True # Indica que terminou

    # Pega a row atual
    row = rows[current_row_index]
    row_id = f"Linha {current_row_index + 1}" # ID Padr√£o

    try:
        # Tenta obter um ID mais espec√≠fico da primeira c√©lula, se poss√≠vel
        try:
            # Espera um pouco para a c√©lula existir se a tabela carregou dinamicamente
            WebDriverWait(row, 2).until(EC.presence_of_element_located((By.TAG_NAME, "td")))
            first_cell = row.find_elements(By.TAG_NAME, "td")[0]
            row_id_text = first_cell.text.strip()
            if row_id_text: # Usa o texto da c√©lula se n√£o estiver vazio
                 row_id = row_id_text
            logger.info(f"Processando novelty ID: {row_id} ({current_row_index + 1}/{total_items})")
        except Exception as e_id:
            logger.warning(f"N√£o foi poss√≠vel obter ID espec√≠fico para linha {current_row_index + 1}: {e_id}. Usando ID gen√©rico.")
            logger.info(f"Processando {row_id}/{total_items}")

        # Atualiza o progresso ANTES de tentar processar
        st.session_state.processed_items = current_row_index + 1
        if total_items > 0:
             st.session_state.progress = (current_row_index + 1) / total_items
        else:
             st.session_state.progress = 1.0 # Completo se n√£o houver linhas

        # --- ETAPA: Esperar Modais Anteriores Fecharem ---
        try:
            logger.info(f"Aguardando desaparecimento de modais antes de processar {row_id}...")
            # Espera at√© 10 segundos pela invisibilidade de QUALQUER modal do ng-bootstrap
            WebDriverWait(driver, 10).until(
                EC.invisibility_of_element_located((By.TAG_NAME, "ngb-modal-window"))
            )
            logger.info("Nenhuma modal ativa detectada.")
        except TimeoutException:
            logger.warning(f"Modal ainda estava vis√≠vel ap√≥s 10s antes de processar {row_id}, tentando fechar ativamente...")
            # Tenta fechar ativamente qualquer modal residual
            try:
                modals = driver.find_elements(By.XPATH, "//ngb-modal-window[contains(@class, 'show')]")
                logger.info(f"Encontradas {len(modals)} modais vis√≠veis residuais.")
                for modal in modals:
                    # Tenta clicar no bot√£o de fechar (X) dentro da modal
                    try:
                        close_buttons = modal.find_elements(By.XPATH, ".//button[contains(@class, 'close') or contains(@aria-label, 'Close')]")
                        if close_buttons and close_buttons[0].is_displayed():
                            logger.info("Clicando no bot√£o fechar (X) da modal residual...")
                            driver.execute_script("arguments[0].click();", close_buttons[0])
                            time.sleep(1.5) # Pausa maior ap√≥s fechar
                            # Verifica se a modal realmente fechou
                            try:
                                WebDriverWait(driver, 3).until(EC.invisibility_of_element(modal))
                                logger.info("Modal residual fechada com sucesso.")
                            except TimeoutException:
                                logger.error("Modal residual n√£o fechou ap√≥s clique no X.")
                            break # Processa apenas a primeira modal encontrada
                    except NoSuchElementException:
                         logger.warning("Bot√£o fechar (X) n√£o encontrado na modal residual.")
                    except Exception as close_err_loop:
                         logger.error(f"Erro ao tentar fechar modal residual no loop: {close_err_loop}")
            except Exception as close_err:
                 logger.error(f"Erro geral ao tentar fechar modais residuais: {close_err}")
        except Exception as wait_err:
            logger.error(f"Erro inesperado ao aguardar modais fecharem: {wait_err}")


        # Encontra o bot√£o Save verde na linha atual
        logger.info(f"Procurando bot√£o 'Save' para a novelty {row_id}...")
        # Usa espera expl√≠cita para garantir que o bot√£o exista na linha antes de interagir
        save_button = WebDriverWait(row, 5).until(
             EC.presence_of_element_located((By.XPATH, ".//button[contains(@class, 'btn-success')]"))
        )

        # --- MODIFICA√á√ÉO: Scroll e clique com JavaScript ---
        logger.info(f"Tentando clicar no bot√£o 'Save' para {row_id} via JavaScript...")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", save_button) # Centraliza o bot√£o
        time.sleep(0.7) # Pequena pausa ap√≥s scroll
        # Tenta clicar repetidamente por um curto per√≠odo se falhar
        click_attempts = 0
        while click_attempts < 3:
            try:
                driver.execute_script("arguments[0].click();", save_button)
                logger.info(f"Bot√£o 'Save' para {row_id} clicado (tentativa {click_attempts+1}).")
                break # Sucesso, sai do loop
            except Exception as click_e:
                click_attempts += 1
                logger.warning(f"Tentativa {click_attempts} de clicar no bot√£o Save falhou: {click_e}. Retentando em 0.5s...")
                if click_attempts >= 3:
                     logger.error("Falha ao clicar no bot√£o Save ap√≥s m√∫ltiplas tentativas.")
                     raise click_e # Relan√ßa a exce√ß√£o se todas as tentativas falharem
                time.sleep(0.5)


        # Espera pelo popup (aumentar um pouco a espera pode ajudar)
        time.sleep(4) # Mantido 4 segundos

        # Tenta clicar no bot√£o "Yes" ou "Sim"
        yes_clicked = False
        logger.info("Procurando bot√£o 'Yes'/'Sim' no popup...")
        possible_yes_texts = ["Yes", "Sim"] # Prioriza estes
        for text in possible_yes_texts:
            try:
                # Espera expl√≠cita pelo bot√£o ser clic√°vel (XPATH mais espec√≠fico para modais)
                xpath_yes = f"//ngb-modal-window[contains(@class, 'show')]//button[normalize-space()='{text}']"
                yes_button = WebDriverWait(driver, 7).until( EC.element_to_be_clickable((By.XPATH, xpath_yes)) )
                logger.info(f"Bot√£o com texto '{text}' encontrado, tentando clicar...")
                driver.execute_script("arguments[0].scrollIntoView(true);", yes_button)
                driver.execute_script("arguments[0].click();", yes_button) # JS Click
                logger.info(f"Clicado no bot√£o '{text}'")
                yes_clicked = True
                break # Sai do loop se clicou com sucesso
            except TimeoutException:
                logger.debug(f"Bot√£o '{text}' n√£o encontrado ou n√£o clic√°vel em 7 segundos.")
            except ElementClickInterceptedException as e:
                 logger.warning(f"Clique no bot√£o '{text}' interceptado: {e}. Tentando pr√≥ximo.")
            except Exception as e:
                logger.error(f"Erro inesperado ao tentar clicar no bot√£o '{text}': {e}")

        # Se n√£o clicou via texto, tenta outras estrat√©gias (modal-footer, classe)
        if not yes_clicked:
            logger.warning("N√£o foi poss√≠vel clicar em 'Yes'/'Sim' pelo texto. Tentando estrat√©gias alternativas...")
            try:
                 # Tenta pelo primeiro bot√£o dentro do rodap√© da modal vis√≠vel
                 xpath_footer_btn = "//ngb-modal-window[contains(@class, 'show')]//div[contains(@class, 'modal-footer')]//button"
                 footer_buttons = WebDriverWait(driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, xpath_footer_btn)))
                 if footer_buttons:
                     logger.info("Tentando clicar no primeiro bot√£o do modal-footer...")
                     first_button = footer_buttons[0]
                     if first_button.is_displayed() and first_button.is_enabled():
                         driver.execute_script("arguments[0].click();", first_button)
                         logger.info(f"Clicado no primeiro bot√£o do modal-footer (texto: '{first_button.text}')")
                         yes_clicked = True
                     else:
                          logger.warning("Primeiro bot√£o do footer n√£o est√° clic√°vel.")
                 else:
                     logger.debug("Nenhum bot√£o encontrado no modal-footer.")
            except TimeoutException:
                logger.debug("Nenhum bot√£o encontrado no modal-footer em 3 segundos.")
            except Exception as e_footer:
                logger.error(f"Erro ao tentar clicar bot√£o do modal-footer: {e_footer}")

        if not yes_clicked:
             logger.error("Falha cr√≠tica: N√£o foi poss√≠vel clicar no bot√£o 'Yes'/'Sim' ou equivalente.")
             # Decide se deve continuar ou parar - por ora, vamos tentar continuar, mas logando como erro grave.


        # Espera ap√≥s clicar no bot√£o Yes (ou tentar clicar)
        time.sleep(4) # Mantido 4 segundos

        # Tenta encontrar o formul√°rio, extrair endere√ßo, preencher e salvar
        logger.info("Procurando formul√°rio e preenchendo dados...")
        address = extract_address_from_page(driver) # Tenta extrair endere√ßo
        form_modal = None
        form_found = False

        # Salvar screenshot para diagn√≥stico
        try:
            save_screenshot(driver, "form_search_debug.png")
            logger.info("Screenshot salvo para diagn√≥stico do formul√°rio")
        except Exception as ss_e:
            logger.warning(f"N√£o foi poss√≠vel salvar screenshot: {ss_e}")

        # V√°rias estrat√©gias para encontrar o formul√°rio
        try:
            # Estrat√©gia 1: Vers√£o original ampliada
            logger.info("Tentando encontrar formul√°rio (estrat√©gia 1)...")
            xpath_form_1 = "//ngb-modal-window[contains(@class, 'show')]//form | //body//form[.//label[contains(text(), 'Soluci√≥n') or contains(text(), 'solucion') or contains(text(), 'Solucion')]]"
            try:
                form_modal = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, xpath_form_1)))
                logger.info("Formul√°rio encontrado com estrat√©gia 1.")
                form_found = True
            except:
                logger.info("Formul√°rio n√£o encontrado com estrat√©gia 1.")
                
            # Estrat√©gia 2: Qualquer formul√°rio em modal
            if not form_found:
                logger.info("Tentando encontrar formul√°rio (estrat√©gia 2)...")
                xpath_form_2 = "//ngb-modal-window[contains(@class, 'show')]//form"
                try:
                    form_modal = WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH, xpath_form_2)))
                    logger.info("Formul√°rio encontrado com estrat√©gia 2.")
                    form_found = True
                except:
                    logger.info("Formul√°rio n√£o encontrado com estrat√©gia 2.")
            
            # Estrat√©gia 3: Qualquer modal aberto, mesmo sem form
            if not form_found:
                logger.info("Tentando encontrar formul√°rio (estrat√©gia 3)...")
                xpath_form_3 = "//ngb-modal-window[contains(@class, 'show')]"
                try:
                    form_modal = WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH, xpath_form_3)))
                    logger.info("Modal encontrado com estrat√©gia 3 (sem form espec√≠fico).")
                    form_found = True
                except:
                    logger.info("Modal n√£o encontrado com estrat√©gia 3.")
            
            # Estrat√©gia 4: Procura por campos de entrada diretamente
            if not form_found:
                logger.info("Tentando encontrar formul√°rio (estrat√©gia 4)...")
                try:
                    input_elements = driver.find_elements(By.XPATH, "//input[@type='text'] | //textarea")
                    if input_elements:
                        # Cria um "formul√°rio virtual" usando o pr√≥prio driver
                        form_modal = driver
                        logger.info("Usando driver como formul√°rio virtual na estrat√©gia 4")
                        form_found = True
                except Exception as e4:
                    logger.info(f"Estrat√©gia 4 falhou: {e4}")
                    
        except Exception as e_form:
             logger.error(f"Erro ao procurar formul√°rio: {e_form}")

        # Diagnosticar estrutura da p√°gina
        try:
            logger.info("Analisando estrutura da p√°gina para diagn√≥stico...")
            modals = driver.find_elements(By.XPATH, "//ngb-modal-window[contains(@class, 'show')]")
            logger.info(f"Modais ativos encontrados: {len(modals)}")
            
            forms = driver.find_elements(By.TAG_NAME, "form")
            logger.info(f"Total de formul√°rios na p√°gina: {len(forms)}")
            
            inputs = driver.find_elements(By.XPATH, "//input | //textarea")
            logger.info(f"Campos de entrada na p√°gina: {len(inputs)}")
        except Exception as e_debug:
            logger.warning(f"Erro ao analisar estrutura: {e_debug}")

        if form_found and form_modal:
            solution_filled = fill_solution_field(driver, form_modal, address)
            if solution_filled:
                save_clicked = click_save_button(driver) # Tenta clicar em Salvar/Guardar
                if save_clicked:
                    logger.info("Bot√£o Salvar/Guardar do formul√°rio clicado.")
                    time.sleep(5) # Mantido 5 segundos
                else:
                    logger.warning("N√£o foi poss√≠vel clicar no bot√£o Salvar/Guardar do formul√°rio.")
            else:
                logger.warning("Campo Soluci√≥n n√£o foi preenchido. Tentando salvar mesmo assim...")
                save_clicked = click_save_button(driver)
                if save_clicked: time.sleep(5)
        else:
            logger.error("N√£o foi poss√≠vel encontrar o formul√°rio para preencher. Pulando preenchimento.")
            # Mesmo sem formul√°rio, pode haver um popup de confirma√ß√£o, ent√£o continuamos


        # Espera e clica no popup "OK" final
        logger.info("Procurando popup de confirma√ß√£o final com bot√£o OK/Aceptar...")
        ok_clicked = False
        try:
            # Espera expl√≠cita pelo bot√£o OK ser clic√°vel em QUALQUER modal vis√≠vel
            xpath_ok = "//ngb-modal-window[contains(@class, 'show')]//button[normalize-space()='OK' or normalize-space()='Ok' or normalize-space()='Aceptar']"
            ok_button = WebDriverWait(driver, 10).until( EC.element_to_be_clickable((By.XPATH, xpath_ok)) )
            logger.info(f"Bot√£o '{ok_button.text}' encontrado, clicando...")
            driver.execute_script("arguments[0].click();", ok_button) # JS Click
            ok_clicked = True
            logger.info("Bot√£o OK/Aceptar clicado com sucesso.")
            time.sleep(2.5) # Aumenta um pouco a pausa ap√≥s clicar OK
            # Espera a modal do OK fechar
            WebDriverWait(driver, 5).until(EC.invisibility_of_element(ok_button))
            logger.info("Modal de confirma√ß√£o OK fechada.")
        except TimeoutException:
            logger.warning("N√£o foi poss√≠vel encontrar/clicar no bot√£o OK/Aceptar OU modal n√£o fechou em tempo.")
            # Tenta fechar qualquer modal residual como fallback
            try:
                modals = driver.find_elements(By.XPATH, "//ngb-modal-window[contains(@class, 'show')]")
                if modals:
                    close_buttons = modals[0].find_elements(By.XPATH, ".//button[contains(@class, 'close') or contains(@aria-label, 'Close')]")
                    if close_buttons and close_buttons[0].is_displayed():
                        driver.execute_script("arguments[0].click();", close_buttons[0])
                        logger.info("Modal residual fechada via bot√£o X ap√≥s falha no OK.")
                        time.sleep(1)
            except Exception as close_err:
                logger.error(f"Erro ao tentar fechar modal residual ap√≥s falha no OK: {close_err}")
        except Exception as e:
             logger.error(f"Erro inesperado ao procurar/clicar bot√£o OK: {e}")


        # Verifica se h√° novas guias abertas
        check_and_close_tabs()

        # Incrementa contador de sucesso
        st.session_state.success_count += 1
        logger.info(f"Novelty {row_id} processada com SUCESSO!")

    except Exception as e:
        # --- BLOCO DE CAPTURA DE ERRO PRINCIPAL ---
        error_msg = f"Erro CR√çTICO ao processar novelty {row_id}: {str(e)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc()) # Loga o traceback completo para depura√ß√£o

        # Adiciona √† lista de erros para exibi√ß√£o na UI
        st.session_state.error_messages.append({
            "type": "error",
            "message": error_msg # Mensagem para a UI
        })
        # Adiciona aos itens com falha para o relat√≥rio
        st.session_state.failed_items.append({"id": row_id, "error": str(e)})
        st.session_state.failed_count = len(st.session_state.failed_items)

        # Tenta tirar um screenshot da tela no momento do erro
        screenshot_filename = f"error_{row_id.replace(' ', '_').replace('/', '-')}_{datetime.datetime.now().strftime('%H%M%S')}.png"
        save_screenshot(driver, screenshot_filename)
        logger.info(f"Screenshot do erro salvo na pasta screenshots")

        # Chama a fun√ß√£o de tratamento de erro (fluxo alternativo, fechar modais)
        handle_error(row, row_id) # Passa a linha e o ID

        # --- FIM DO BLOCO DE CAPTURA DE ERRO ---

    # Incrementa o √≠ndice para a pr√≥xima novelty, INDEPENDENTE de sucesso ou falha no try/except principal
    st.session_state.current_row_index += 1
    next_index = st.session_state.current_row_index

    # Pequena pausa antes de ir para o pr√≥ximo item ou finalizar
    time.sleep(1.5)

    # Verifica se foi a √∫ltima novelty processada (usando o pr√≥ximo √≠ndice)
    if next_index >= total_items:
        logger.info(f"Fim do processamento. √öltimo √≠ndice processado: {current_row_index-1}. Total de itens: {total_items}.")
        # Gera relat√≥rio e fecha driver ANTES de retornar True
        generate_report()
        if driver:
             logger.info("Fechando o driver no final do processamento.")
             try:
                 driver.quit()
             except Exception as quit_e:
                 logger.error(f"Erro ao fechar driver no final: {quit_e}")
             st.session_state.driver = None
        return True # Indica que terminou
    else:
        # Ainda h√° itens, retorna False para indicar que deve continuar
        logger.debug(f"Indo para a pr√≥xima novelty (√≠ndice {next_index}).")
        return False # Continua o loop na pr√≥xima itera√ß√£o do Streamlit
    
def extract_address_from_page(driver):
    """Extrai o endere√ßo da p√°gina, independente do formul√°rio estar presente ou n√£o."""
    try:
        logger.info("Procurando endere√ßo do cliente na p√°gina...")
        
        # Tira screenshot para an√°lise
        try:
            save_screenshot(driver, "page_for_address.png")
            logger.info("Screenshot para busca de endere√ßo salvo")
        except:
            pass
        
        address = ""
        
        # M√©todo 1: Procura pelo cabe√ßalho t√≠pico "ORDERS TO:"
        try:
            # Procura primeiro o nome do cliente, que normalmente est√° em destaque
            header_info = driver.find_elements(By.XPATH, "//*[contains(text(), 'ORDERS TO:')]")
            
            if header_info:
                # Pega o elemento que vem depois do "ORDERS TO:" que cont√©m o endere√ßo completo
                for element in header_info:
                    try:
                        # Tenta pegar o texto do elemento pai
                        parent = element.find_element(By.XPATH, "./..")
                        parent_text = parent.text
                        logger.info(f"Texto no elemento pai de ORDERS TO: {parent_text}")
                        
                        # Se encontrou o texto, procura pelo endere√ßo (geralmente ap√≥s o nome)
                        lines = parent_text.split('\n')
                        if len(lines) > 1:
                            for i, line in enumerate(lines):
                                if "ORDERS TO:" in line and i + 1 < len(lines):
                                    address = lines[i + 2]  # Pega duas linhas abaixo (nome, depois endere√ßo)
                                    logger.info(f"Endere√ßo encontrado ap√≥s ORDERS TO:: {address}")
                                    return address
                    except:
                        pass
            
                # M√©todo alternativo: tenta pegar o pr√≥ximo irm√£o
                for element in header_info:
                    try:
                        next_sibling = element.find_element(By.XPATH, "./following-sibling::*[1]")
                        sibling_text = next_sibling.text
                        logger.info(f"Texto no elemento seguinte a ORDERS TO:: {sibling_text}")
                        
                        # Separa as linhas
                        lines = sibling_text.split('\n')
                        if len(lines) > 1:
                            address = lines[1]  # A segunda linha geralmente √© o endere√ßo
                            logger.info(f"Endere√ßo capturado do irm√£o: {address}")
                            return address
                        else:
                            address = sibling_text
                            logger.info(f"Usando texto completo do irm√£o como endere√ßo: {address}")
                            return address
                    except:
                        pass
        except Exception as e:
            logger.info(f"Erro ao buscar ORDERS TO:: {str(e)}")
        
        # M√©todo 2: Procura por elementos de texto que cont√™m endere√ßo
        if not address:
            try:
                for address_keyword in ["Avenida", "Calle", "Rua", "Carretera", "Street", "Av.", "Av ", "Calz"]:
                    address_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{address_keyword}')]")
                    for element in address_elements:
                        try:
                            element_text = element.text
                            if len(element_text) > 10:  # Filtra textos muito curtos
                                address = element_text
                                logger.info(f"Endere√ßo encontrado com keyword '{address_keyword}': {address}")
                                return address
                        except:
                            pass
            except Exception as e:
                logger.info(f"Erro ao buscar por palavras-chave de endere√ßo: {str(e)}")
        
        # M√©todo 3: Procura por campos espec√≠ficos no formul√°rio que j√° estejam preenchidos
        if not address:
            try:
                # Tenta encontrar campos "Direcci√≥n" j√° preenchidos
                direccion_elements = driver.find_elements(By.XPATH, "//label[contains(text(), 'Direcci√≥n') or contains(text(), 'direcci√≥n')]")
                for label in direccion_elements:
                    try:
                        # Tenta encontrar o input associado
                        input_id = label.get_attribute("for")
                        if input_id:
                            input_field = driver.find_element(By.ID, input_id)
                            address_value = input_field.get_attribute("value")
                            if address_value and len(address_value) > 10:
                                address = address_value
                                logger.info(f"Endere√ßo encontrado em campo 'Direcci√≥n': {address}")
                                return address
                    except:
                        pass
            except Exception as e:
                logger.info(f"Erro ao buscar campos de dire√ß√£o preenchidos: {str(e)}")
        
        # Se n√£o encontrou endere√ßo, usa um valor padr√£o
        if not address:
            address = "Endere√ßo de Entrega"
            logger.warning("N√£o foi poss√≠vel encontrar endere√ßo, usando valor padr√£o")
        
        return address
    except Exception as e:
        logger.error(f"Erro ao extrair endere√ßo: {str(e)}")
        return "Endere√ßo de Entrega"

def fill_solution_field(driver, form_modal, address):
    """Preenche especificamente o campo Soluci√≥n E o campo Specify Address com o endere√ßo usando t√©cnicas avan√ßadas."""
    try:
        logger.info("Iniciando identifica√ß√£o super-espec√≠fica do campo Soluci√≥n...")
        
        # Salva screenshot inicial
        save_screenshot(driver, "before_solution_search.png")
        
        # Lista para armazenar candidatos ao campo
        solution_fields = []
        
        # === ESTRAT√âGIA 1: Busca ULTRA-ESPEC√çFICA por EXATAMENTE o campo Soluci√≥n ===
        try:
            logger.info("ESTRAT√âGIA 1: Busca por padr√µes exatos de Soluci√≥n")
            
            # Tenta localizar por ID exato primeiro (melhor caso)
            id_candidates = ["solucion", "solution", "txtSolucion", "txtSolution", 
                             "inputSolucion", "inputSolution"]
            
            for id_value in id_candidates:
                try:
                    field = driver.find_element(By.ID, id_value)
                    if field.is_displayed():
                        solution_fields.append(field)
                        logger.info(f"Campo encontrado por ID exato: {id_value}")
                        break
                except:
                    continue
            
            # Se n√£o encontrou por ID, tenta localizar campos com name="solucion"
            if not solution_fields:
                for name_value in id_candidates:  # Mesmo padr√£o para name
                    try:
                        field = driver.find_element(By.NAME, name_value)
                        if field.is_displayed():
                            solution_fields.append(field)
                            logger.info(f"Campo encontrado por name exato: {name_value}")
                            break
                    except:
                        continue
        except Exception as e1:
            logger.warning(f"Erro na estrat√©gia 1: {e1}")
        
        # === ESTRAT√âGIA 2: Busca pela LABEL mais pr√≥xima ===
        if not solution_fields:
            try:
                logger.info("ESTRAT√âGIA 2: Buscando pela label 'Soluci√≥n' ou similar")
                
                # Tenta encontrar qualquer label que contenha "Soluci√≥n" ou variante
                solution_labels = driver.find_elements(By.XPATH, 
                    "//label[contains(translate(text(), 'SOLUCI√ìN', 'solucion'), 'solucion')]")
                
                for label in solution_labels:
                    if label.is_displayed():
                        logger.info(f"Label encontrada: '{label.text}'")
                        
                        # Verifica se a label tem atributo 'for' que aponta para um input
                        for_attr = label.get_attribute("for")
                        if for_attr:
                            try:
                                field = driver.find_element(By.ID, for_attr)
                                if field.is_displayed():
                                    solution_fields.append(field)
                                    logger.info(f"Campo encontrado pelo atributo for='{for_attr}'")
                                    break
                            except:
                                pass
                        
                        # Se n√£o tem 'for', tenta encontrar input/textarea pr√≥ximo
                        if not solution_fields:
                            try:
                                # Usa JavaScript para encontrar o campo mais pr√≥ximo
                                field = driver.execute_script("""
                                    var label = arguments[0];
                                    // Tenta encontrar o pr√≥ximo elemento ap√≥s a label
                                    var next = label.nextElementSibling;
                                    if (next && (next.tagName === 'INPUT' || next.tagName === 'TEXTAREA')) {
                                        return next;
                                    }
                                    // Tenta encontrar dentro do pai
                                    var parent = label.parentElement;
                                    var inputs = parent.querySelectorAll('input, textarea');
                                    for (var i = 0; i < inputs.length; i++) {
                                        if (inputs[i] !== label) {
                                            return inputs[i];
                                        }
                                    }
                                    return null;
                                """, label)
                                
                                if field and field.is_displayed():
                                    solution_fields.append(field)
                                    logger.info(f"Campo encontrado pr√≥ximo √† label via JavaScript")
                                    break
                            except Exception as e_js:
                                logger.warning(f"Erro ao buscar campo via JavaScript: {e_js}")
            except Exception as e2:
                logger.warning(f"Erro na estrat√©gia 2: {e2}")
        
        # === ESTRAT√âGIA 3: EXAMINAR TODOS OS TEXTAREAS ===
        if not solution_fields:
            try:
                logger.info("ESTRAT√âGIA 3: Examinando todas as textareas")
                
                textareas = driver.find_elements(By.TAG_NAME, "textarea")
                logger.info(f"Encontradas {len(textareas)} textareas")
                
                # Primeira passagem: procura por textareas vazias e vis√≠veis
                for textarea in textareas:
                    if textarea.is_displayed():
                        value = textarea.get_attribute("value") or ""
                        placeholder = textarea.get_attribute("placeholder") or ""
                        
                        logger.info(f"Textarea: placeholder='{placeholder}', valor='{value[:20] + '...' if len(value) > 20 else value}'")
                        
                        # Prioriza textareas vazias ou com placeholder de solu√ß√£o
                        if not value or "solu" in placeholder.lower():
                            solution_fields.append(textarea)
                            logger.info("Textarea vazia encontrada")
                            break
                
                # Se n√£o encontrou nenhuma textarea vazia, pega a primeira vis√≠vel
                if not solution_fields and textareas:
                    for textarea in textareas:
                        if textarea.is_displayed():
                            solution_fields.append(textarea)
                            logger.info("Usando primeira textarea vis√≠vel")
                            break
            except Exception as e3:
                logger.warning(f"Erro na estrat√©gia 3: {e3}")
        
        # === ESTRAT√âGIA 4: BUSCA PELO DOM COMPLETO ===
        if not solution_fields:
            try:
                logger.info("ESTRAT√âGIA 4: Busca por qualquer elemento edit√°vel na modal")
                
                # Busca diretamente usando JavaScript para encontrar campos edit√°veis na modal atual
                fields = driver.execute_script("""
                    // Tenta encontrar o modal ativo
                    var modal = document.querySelector('.modal.show, ngb-modal-window.show');
                    if (!modal) return [];
                    
                    // Procura todos os campos edit√°veis no modal
                    return Array.from(modal.querySelectorAll('input[type="text"], textarea'))
                      .filter(el => el.offsetParent !== null);  // Apenas elementos vis√≠veis
                """)
                
                if fields and len(fields) > 0:
                    logger.info(f"Encontrados {len(fields)} campos via JavaScript")
                    solution_fields.append(fields[0])
            except Exception as e4:
                logger.warning(f"Erro na estrat√©gia 4: {e4}")
        
        # Diagn√≥stico final ap√≥s todas as tentativas
        if not solution_fields:
            logger.error("ALERTA! Nenhum campo de solu√ß√£o encontrado ap√≥s m√∫ltiplas estrat√©gias")
            save_screenshot(driver, "no_solution_field.png")
            
            # Salva a estrutura HTML atual para an√°lise
            try:
                import os
                html_dir = "debug_html"
                if not os.path.exists(html_dir):
                    os.makedirs(html_dir)
                
                with open(f"{html_dir}/page_structure_{datetime.datetime.now().strftime('%H%M%S')}.html", "w", encoding="utf-8") as f:
                    f.write(driver.page_source)
                logger.info(f"HTML salvo em {html_dir} para an√°lise")
            except Exception as e_save:
                logger.error(f"Erro ao salvar HTML: {e_save}")
            
            return False
        
        # Preenche o campo SOLUCI√ìN encontrado
        solution_field = solution_fields[0]  # Pega o primeiro campo encontrado
        
        # Destaca o campo encontrado para verifica√ß√£o visual
        try:
            driver.execute_script("""
                arguments[0].style.border = '3px solid red';
                arguments[0].style.backgroundColor = 'yellow';
            """, solution_field)
            save_screenshot(driver, "solution_field_found.png")
        except:
            pass
        
        # Agora tenta preencher o campo SOLUCI√ìN de M√öLTIPLAS maneiras
        solution_filled = False
        
        # M√©todo 1: Limpar e preencher direto com JavaScript
        try:
            logger.info("Tentando preencher SOLUCI√ìN via JavaScript...")
            
            # Escapa caracteres especiais para o JavaScript
            safe_address = address.replace("'", "\\'").replace("\\", "\\\\")
            
            driver.execute_script("""
                var field = arguments[0];
                var text = arguments[1];
                
                // Limpa o campo
                field.value = '';
                
                // Define o novo valor
                field.value = text;
                
                // Dispara eventos para garantir que a aplica√ß√£o reconhe√ßa a mudan√ßa
                field.dispatchEvent(new Event('input', { bubbles: true }));
                field.dispatchEvent(new Event('change', { bubbles: true }));
                
                // D√° foco ao campo para garantir que est√° ativo
                field.focus();
            """, solution_field, safe_address)
            
            time.sleep(0.5)
            value = solution_field.get_attribute("value")
            logger.info(f"Valor ap√≥s preenchimento JS (Soluci√≥n): '{value}'")
            
            if value and value.strip():
                solution_filled = True
                logger.info("Campo SOLUCI√ìN preenchido com sucesso via JavaScript")
        except Exception as e_js:
            logger.warning(f"Erro ao preencher SOLUCI√ìN via JavaScript: {e_js}")
        
        # M√©todo 2: Selenium padr√£o (se o JS falhou)
        if not solution_filled:
            try:
                logger.info("Tentando preencher SOLUCI√ìN via Selenium padr√£o...")
                
                # Rola para o campo
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", solution_field)
                time.sleep(0.5)
                
                # Clica para garantir foco
                solution_field.click()
                time.sleep(0.5)
                
                # Limpa e preenche
                solution_field.clear()
                time.sleep(0.3)
                solution_field.send_keys(address)
                time.sleep(0.5)
                
                value = solution_field.get_attribute("value")
                logger.info(f"Valor ap√≥s preenchimento Selenium (Soluci√≥n): '{value}'")
                
                if value and value.strip():
                    solution_filled = True
                    logger.info("Campo SOLUCI√ìN preenchido com sucesso via Selenium")
            except Exception as e_sel:
                logger.warning(f"Erro ao preencher SOLUCI√ìN via Selenium: {e_sel}")
        
        # =================== NOVO: PREENCHER CAMPO "SPECIFY ADDRESS" ===================
        logger.info("=== INICIANDO PREENCHIMENTO DO CAMPO 'SPECIFY ADDRESS' ===")
        
        specify_address_filled = False
        specify_address_field = None
        
        # Busca pelo campo "Specify Address"
        try:
            # M√©todo 1: Busca pela label "Specify Address"
            logger.info("Procurando campo 'Specify Address' pela label...")
            specify_labels = driver.find_elements(By.XPATH, 
                "//label[contains(text(), 'Specify Address') or contains(text(), 'specify address') or contains(text(), 'Specify address')]")
            
            for label in specify_labels:
                if label.is_displayed():
                    logger.info(f"Label 'Specify Address' encontrada: '{label.text}'")
                    
                    # Verifica se a label tem atributo 'for'
                    for_attr = label.get_attribute("for")
                    if for_attr:
                        try:
                            field = driver.find_element(By.ID, for_attr)
                            if field.is_displayed():
                                specify_address_field = field
                                logger.info(f"Campo 'Specify Address' encontrado pelo atributo for='{for_attr}'")
                                break
                        except:
                            pass
                    
                    # Se n√£o tem 'for', procura o pr√≥ximo campo
                    if not specify_address_field:
                        try:
                            field = driver.execute_script("""
                                var label = arguments[0];
                                // Tenta encontrar o pr√≥ximo elemento input/textarea
                                var next = label.nextElementSibling;
                                if (next && (next.tagName === 'INPUT' || next.tagName === 'TEXTAREA')) {
                                    return next;
                                }
                                // Procura dentro do pai
                                var parent = label.parentElement;
                                var inputs = parent.querySelectorAll('input, textarea');
                                for (var i = 0; i < inputs.length; i++) {
                                    if (inputs[i] !== label) {
                                        return inputs[i];
                                    }
                                }
                                return null;
                            """, label)
                            
                            if field and field.is_displayed():
                                specify_address_field = field
                                logger.info("Campo 'Specify Address' encontrado pr√≥ximo √† label via JavaScript")
                                break
                        except Exception as e_js2:
                            logger.warning(f"Erro ao buscar campo 'Specify Address' via JavaScript: {e_js2}")
                    
                    if specify_address_field:
                        break
            
            # M√©todo 2: Se n√£o encontrou pela label, procura por campos vazios abaixo da "Direcci√≥n"
            if not specify_address_field:
                logger.info("M√©todo alternativo: Procurando por campos vazios ap√≥s 'Direcci√≥n'...")
                
                # Primeiro encontra o campo "Direcci√≥n"
                direccion_labels = driver.find_elements(By.XPATH, 
                    "//label[contains(text(), 'Direcci√≥n') or contains(text(), 'direcci√≥n')]")
                
                for direccion_label in direccion_labels:
                    if direccion_label.is_displayed():
                        logger.info("Label 'Direcci√≥n' encontrada, procurando campos seguintes...")
                        
                        # Procura todos os inputs/textareas que v√™m depois desta label
                        following_inputs = driver.execute_script("""
                            var direccionLabel = arguments[0];
                            var allInputs = document.querySelectorAll('input, textarea');
                            var direccionIndex = Array.from(allInputs).findIndex(el => {
                                var rect = el.getBoundingClientRect();
                                var labelRect = direccionLabel.getBoundingClientRect();
                                return rect.top > labelRect.top;
                            });
                            
                            if (direccionIndex >= 0) {
                                // Retorna os pr√≥ximos 3 campos ap√≥s Direcci√≥n
                                return Array.from(allInputs).slice(direccionIndex, direccionIndex + 3)
                                    .filter(el => el.offsetParent !== null);
                            }
                            return [];
                        """, direccion_label)
                        
                        # Procura por um campo vazio entre os que v√™m depois
                        for field in following_inputs:
                            try:
                                field_value = field.get_attribute("value") or ""
                                if not field_value.strip():  # Campo vazio
                                    specify_address_field = field
                                    logger.info("Campo vazio encontrado ap√≥s 'Direcci√≥n' - assumindo como 'Specify Address'")
                                    break
                            except:
                                continue
                        
                        if specify_address_field:
                            break
            
            # M√©todo 3: √öltima tentativa - pega o √∫ltimo campo vazio do formul√°rio
            if not specify_address_field:
                logger.info("√öltima tentativa: Procurando √∫ltimo campo vazio do formul√°rio...")
                
                empty_fields = driver.execute_script("""
                    var modal = document.querySelector('.modal.show, ngb-modal-window.show');
                    if (!modal) return [];
                    
                    var allFields = modal.querySelectorAll('input[type="text"], textarea');
                    var emptyFields = [];
                    
                    for (var i = 0; i < allFields.length; i++) {
                        var field = allFields[i];
                        if (field.offsetParent !== null && (!field.value || field.value.trim() === '')) {
                            emptyFields.push(field);
                        }
                    }
                    
                    return emptyFields;
                """)
                
                if empty_fields and len(empty_fields) > 0:
                    # Pega o √∫ltimo campo vazio (mais prov√°vel de ser o Specify Address)
                    specify_address_field = empty_fields[-1]
                    logger.info("Usando √∫ltimo campo vazio como 'Specify Address'")
        
        except Exception as e_specify:
            logger.error(f"Erro ao procurar campo 'Specify Address': {e_specify}")
        
        # Preenche o campo "Specify Address" se encontrado
        if specify_address_field:
            try:
                # Destaca o campo para verifica√ß√£o visual
                driver.execute_script("""
                    arguments[0].style.border = '3px solid blue';
                    arguments[0].style.backgroundColor = 'lightblue';
                """, specify_address_field)
                save_screenshot(driver, "specify_address_field_found.png")
                
                logger.info("Tentando preencher 'Specify Address' via JavaScript...")
                
                # Escapa caracteres especiais
                safe_address = address.replace("'", "\\'").replace("\\", "\\\\")
                
                driver.execute_script("""
                    var field = arguments[0];
                    var text = arguments[1];
                    
                    // Limpa o campo
                    field.value = '';
                    
                    // Define o novo valor
                    field.value = text;
                    
                    // Dispara eventos
                    field.dispatchEvent(new Event('input', { bubbles: true }));
                    field.dispatchEvent(new Event('change', { bubbles: true }));
                    
                    // D√° foco
                    field.focus();
                """, specify_address_field, safe_address)
                
                time.sleep(0.5)
                value = specify_address_field.get_attribute("value")
                logger.info(f"Valor ap√≥s preenchimento (Specify Address): '{value}'")
                
                if value and value.strip():
                    specify_address_filled = True
                    logger.info("Campo 'SPECIFY ADDRESS' preenchido com sucesso!")
                else:
                    # Tenta m√©todo Selenium como fallback
                    logger.info("Tentando preencher 'Specify Address' via Selenium...")
                    specify_address_field.clear()
                    specify_address_field.send_keys(address)
                    
                    value = specify_address_field.get_attribute("value")
                    if value and value.strip():
                        specify_address_filled = True
                        logger.info("Campo 'SPECIFY ADDRESS' preenchido via Selenium!")
                
            except Exception as e_fill_specify:
                logger.error(f"Erro ao preencher campo 'Specify Address': {e_fill_specify}")
        else:
            logger.warning("Campo 'Specify Address' n√£o foi encontrado - pode n√£o estar presente nesta novelty")
        
        # =================== FIM DO PREENCHIMENTO SPECIFY ADDRESS ===================
        
        # Verifica o resultado final de ambos os campos
        time.sleep(0.5)
        solution_value = solution_field.get_attribute("value")
        logger.info(f"RESULTADO FINAL | Campo SOLUCI√ìN cont√©m: '{solution_value}'")
        
        if specify_address_field:
            specify_value = specify_address_field.get_attribute("value")
            logger.info(f"RESULTADO FINAL | Campo SPECIFY ADDRESS cont√©m: '{specify_value}'")
        
        save_screenshot(driver, "after_fill_both_fields.png")
        
        # Retorna True se pelo menos o campo Soluci√≥n foi preenchido
        return solution_filled
            
    except Exception as e:
        logger.error(f"Erro cr√≠tico ao preencher campos: {str(e)}")
        logger.error(traceback.format_exc())
        save_screenshot(driver, "critical_error_fill.png")
        return False

def click_save_button(driver):
    """Tenta clicar no bot√£o de salvar usando v√°rias estrat√©gias."""
    try:
        logger.info("Tentando clicar no bot√£o de salvar...")
        save_clicked = False
        
        # M√©todo 1: Procura por texto exato
        for save_text in ["Guardar", "Salvar", "Save", "GUARDAR", "SALVAR", "SAVE"]:
            try:
                save_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{save_text}')]")
                for button in save_buttons:
                    if button.is_displayed():
                        logger.info(f"Bot√£o de salvar encontrado com texto '{save_text}', tentando clicar...")
                        driver.execute_script("arguments[0].scrollIntoView(true);", button)
                        time.sleep(0.5)
                        driver.execute_script("arguments[0].click();", button)
                        logger.info(f"Clicado no bot√£o '{save_text}'")
                        save_clicked = True
                        break
                if save_clicked:
                    break
            except Exception as e:
                logger.info(f"Erro ao clicar no bot√£o '{save_text}': {str(e)}")
                continue
        
        # M√©todo 2: Procura por bot√£o de tipo submit
        if not save_clicked:
            try:
                submit_buttons = driver.find_elements(By.XPATH, "//button[@type='submit']")
                for button in submit_buttons:
                    if button.is_displayed():
                        logger.info("Bot√£o de submit encontrado, tentando clicar...")
                        driver.execute_script("arguments[0].scrollIntoView(true);", button)
                        time.sleep(0.5)
                        driver.execute_script("arguments[0].click();", button)
                        logger.info("Clicado no bot√£o de submit")
                        save_clicked = True
                        break
            except Exception as e:
                logger.info(f"Erro ao clicar no bot√£o de submit: {str(e)}")
        
        # M√©todo 3: Procura por bot√µes com classe indicativa de sucesso/prim√°rio
        if not save_clicked:
            try:
                buttons = driver.find_elements(By.TAG_NAME, "button")
                for button in buttons:
                    try:
                        if button.is_displayed():
                            button_class = button.get_attribute("class").lower()
                            if "primary" in button_class or "success" in button_class:
                                button_text = button.text.strip()
                                # Ignore os bot√µes que claramente n√£o s√£o para salvar
                                if button_text.lower() not in ["no", "n√£o", "cancel", "cancelar", "close", "fechar"]:
                                    logger.info(f"Bot√£o com classe {button_class} encontrado: '{button_text}', tentando clicar...")
                                    driver.execute_script("arguments[0].scrollIntoView(true);", button)
                                    time.sleep(0.5)
                                    driver.execute_script("arguments[0].click();", button)
                                    logger.info(f"Clicado em bot√£o: '{button_text}'")
                                    save_clicked = True
                                    break
                    except:
                        continue
            except Exception as e:
                logger.info(f"Erro ao procurar bot√µes por classe: {str(e)}")
        
        if not save_clicked:
            logger.warning("N√£o foi poss√≠vel encontrar e clicar no bot√£o de salvar")
        
        return save_clicked
    except Exception as e:
        logger.error(f"Erro ao tentar clicar no bot√£o de salvar: {str(e)}")
        return False

def handle_error(row, row_id):
    """Trata erros conforme o protocolo especificado."""
    try:
        driver = st.session_state.driver
        logger.info(f"Iniciando tratamento de erro para novelty {row_id}...")
        
        # Tenta fechar qualquer modal/popup aberto
        try:
            logger.info("Tentando fechar popups abertos...")
            close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
            for button in close_buttons:
                if button.is_displayed():
                    button.click()
                    time.sleep(0.5)
        except:
            pass
            
        # Clica novamente no bot√£o Save
        try:
            logger.info(f"Tentando fluxo alternativo para novelty {row_id}...")
            logger.info("Clicando novamente no bot√£o 'Save'...")
            save_button = row.find_element(By.XPATH, ".//button[contains(@class, 'btn-success')]")
            save_button.click()
            
            # Espera pelo popup e clica em "N√£o" desta vez
            logger.info("Procurando e clicando no bot√£o 'N√£o' no popup...")
            nao_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'N√£o')]"))
            )
            nao_button.click()
            
            # No segundo popup, clica em "Sim"
            logger.info("Procurando e clicando no bot√£o 'Sim' no segundo popup...")
            sim_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Sim')]"))
            )
            sim_button.click()
            
            # Aguarda o modal fechar
            time.sleep(2)
            
            logger.info(f"Tratamento alternativo aplicado com sucesso para novelty {row_id}")
        except Exception as e:
            logger.error(f"Erro ao aplicar tratamento alternativo para novelty {row_id}: {str(e)}")
            
            # Tenta fechar todos os popups novamente
            try:
                logger.info("Tentando fechar todos os popups ap√≥s falha no tratamento alternativo...")
                close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
                for button in close_buttons:
                    if button.is_displayed():
                        button.click()
                        time.sleep(0.5)
            except:
                pass
        
        # Verifica se h√° novas guias abertas
        check_and_close_tabs()
            
    except Exception as e:
        logger.error(f"Erro ao tratar erro para novelty {row_id}: {str(e)}")

def check_and_close_tabs():
    """Verifica se h√° novas guias abertas e as fecha."""
    try:
        driver = st.session_state.driver
        # Obt√©m todas as guias
        handles = driver.window_handles
        
        # Se houver mais de uma guia, fecha as extras
        if len(handles) > 1:
            current_handle = driver.current_window_handle
            
            for handle in handles:
                if handle != current_handle:
                    driver.switch_to.window(handle)
                    driver.close()
                    st.session_state.closed_tabs += 1
            
            # Volta para a guia principal
            driver.switch_to.window(current_handle)
            logger.info(f"Fechadas {len(handles) - 1} guias extras")
    except Exception as e:
        logger.error(f"Erro ao verificar e fechar guias: {str(e)}")

def save_screenshot(driver, filename, subdir="screenshots"):
    """Salva screenshot em uma pasta dedicada.
    
    Args:
        driver: WebDriver do Selenium
        filename: Nome do arquivo
        subdir: Subdiret√≥rio para salvar (padr√£o: screenshots)
    """
    try:
        # Garante que a pasta existe
        import os
        if not os.path.exists(subdir):
            os.makedirs(subdir)
            logger.info(f"Pasta '{subdir}' criada para screenshots")
        
        # Adiciona timestamp para evitar sobrescrever arquivos
        import datetime
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename_with_timestamp = f"{timestamp}_{filename}"
        
        # Caminho completo para o arquivo
        filepath = os.path.join(subdir, filename_with_timestamp)
        
        # Salva o screenshot
        driver.save_screenshot(filepath)
        logger.info(f"Screenshot salvo: {filepath}")
        return True
    except Exception as e:
        logger.error(f"Erro ao salvar screenshot '{filename}': {str(e)}")
        return False
    
def generate_report():
    """Gera um relat√≥rio da execu√ß√£o e salva no banco de dados."""
    # Calcula o tempo de execu√ß√£o
    execution_time = time.time() - st.session_state.start_time if st.session_state.start_time else 0
    
    # Adiciona data/hora da execu√ß√£o para salvar no banco
    execution_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    error_details = json.dumps(st.session_state.failed_items)
    
    report = {
        "execution_date": execution_date,
        "total_processados": st.session_state.success_count,
        "total_falhas": len(st.session_state.failed_items),
        "itens_com_falha": st.session_state.failed_items,
        "guias_fechadas": st.session_state.closed_tabs,
        "encontrou_paginacao": st.session_state.found_pagination,
        "execution_time": execution_time,
        "error_details": error_details
    }
    
    logger.info("======= RELAT√ìRIO DE EXECU√á√ÉO =======")
    logger.info(f"Total de novelties processadas com sucesso: {report['total_processados']}")
    logger.info(f"Total de novelties com falha: {report['total_falhas']}")
    logger.info(f"Total de guias fechadas durante o processo: {report['guias_fechadas']}")
    logger.info(f"Encontrou op√ß√£o para filtrar 1000 itens: {'Sim' if report['encontrou_paginacao'] else 'N√£o'}")
    logger.info(f"Tempo de execu√ß√£o: {execution_time:.2f} segundos")
    
    if report['total_falhas'] > 0:
        logger.info("Detalhes dos itens com falha:")
        for item in report['itens_com_falha']:
            logger.info(f"  - ID: {item['id']}, Erro: {item['error']}")
            
    logger.info("=====================================")
    
    # Salva o relat√≥rio no banco de dados
    try:
        logger.info(f"Tentando salvar relat√≥rio para {THIS_COUNTRY}...")
        # Passa THIS_COUNTRY como segundo argumento
        save_execution_results(report, THIS_COUNTRY)
        logger.info("Relat√≥rio salvo no banco de dados com sucesso")
    except Exception as e:
        logger.error(f"Erro ao salvar relat√≥rio no banco de dados para {THIS_COUNTRY}: {e}", exc_info=True)

    st.session_state.report = report

# Processamento da automa√ß√£o baseado no estado atual
if st.session_state.is_running:
    current_step = st.session_state.get('automation_step', 'idle') # Pega o passo atual
    logger.info(f"--- Executando passo da automa√ß√£o: {current_step} ---")

    try:
        if current_step == 'setup':
            st.info("Passo 1/5: Configurando o navegador (driver)...")
            if setup_driver():
                logger.info("Driver configurado com sucesso.")
                st.session_state.automation_step = 'login'
                st.rerun() # Vai para o pr√≥ximo passo
            else:
                logger.error("Falha cr√≠tica ao configurar o driver Chrome.")
                st.error("Falha ao configurar o driver Chrome. Verifique os logs e a instala√ß√£o do Chrome/ChromeDriver (se local).")
                st.session_state.is_running = False
                st.rerun() # Para a execu√ß√£o e atualiza a UI

        elif current_step == 'login':
            st.info("Passo 2/5: Realizando login no Dropi...")
            if login():
                logger.info("Login realizado com sucesso.")
                st.session_state.automation_step = 'navigate'
                st.rerun() # Vai para o pr√≥ximo passo
            else:
                logger.error("Falha cr√≠tica no login.")
                st.error("Falha no login. Verifique as credenciais e a estrutura da p√°gina de login.")
                # Tenta fechar o driver em caso de falha no login
                if st.session_state.driver:
                    try:
                        st.session_state.driver.quit()
                    except Exception as e:
                         logger.warning(f"Erro ao fechar driver ap√≥s falha no login: {e}")
                    st.session_state.driver = None
                st.session_state.is_running = False
                st.rerun() # Para a execu√ß√£o e atualiza a UI

        elif current_step == 'navigate':
            st.info("Passo 3/5: Navegando at√© a p√°gina de Novelties...")
            if navigate_to_novelties():
                logger.info("Navega√ß√£o para Novelties conclu√≠da.")
                st.session_state.automation_step = 'configure'
                st.rerun() # Vai para o pr√≥ximo passo
            else:
                logger.error("Falha cr√≠tica ao navegar para Novelties.")
                st.error("Falha ao navegar at√© Novelties. Verifique a estrutura do menu/links.")
                if st.session_state.driver:
                    try:
                        st.session_state.driver.quit()
                    except Exception as e:
                         logger.warning(f"Erro ao fechar driver ap√≥s falha na navega√ß√£o: {e}")
                    st.session_state.driver = None
                st.session_state.is_running = False
                st.rerun() # Para a execu√ß√£o e atualiza a UI

        elif current_step == 'configure':
            st.info("Passo 4/5: Configurando exibi√ß√£o e buscando novelties...")
            if configure_entries_display():
                logger.info(f"Configura√ß√£o conclu√≠da. Encontradas {st.session_state.total_items} novelties.")
                if st.session_state.total_items == 0:
                     logger.warning("Nenhuma novelty encontrada para processar.")
                     st.warning("Nenhuma novelty encontrada na tabela.")
                     st.session_state.automation_step = 'complete' # Pula para completo se n√£o h√° itens
                else:
                     st.session_state.automation_step = 'process' # Inicia processamento
                st.rerun() # Vai para o pr√≥ximo passo (processar ou completar)
            else:
                logger.error("Falha cr√≠tica ao configurar exibi√ß√£o ou buscar novelties.")
                st.error("Falha ao configurar exibi√ß√£o de 1000 itens ou ao buscar linhas da tabela.")
                if st.session_state.driver:
                    try:
                        st.session_state.driver.quit()
                    except Exception as e:
                         logger.warning(f"Erro ao fechar driver ap√≥s falha na configura√ß√£o: {e}")
                    st.session_state.driver = None
                st.session_state.is_running = False
                st.rerun() # Para a execu√ß√£o e atualiza a UI

        elif current_step == 'process':
            st.info(f"Passo 5/5: Processando novelty {st.session_state.current_row_index + 1} de {st.session_state.total_items}...")
            # Processa UMA novelty por vez e retorna True se acabou, False se continua
            all_done = process_current_novelty()

            if all_done:
                # Se process_current_novelty retornou True, significa que terminou (ou houve erro cr√≠tico)
                logger.info("Processamento de todas as novelties conclu√≠do ou interrompido.")
                st.session_state.automation_step = 'complete'
                # O fechamento do driver e a gera√ß√£o do relat√≥rio agora acontecem DENTRO de process_current_novelty ou no passo 'complete'
            # Sempre faz rerun para atualizar a UI ou ir para o pr√≥ximo item/passo 'complete'
            st.rerun()

        elif current_step == 'complete':
            logger.info("--- Automa√ß√£o conclu√≠da ---")
            st.success("Automa√ß√£o finalizada!")
            # Garante que o driver seja fechado se ainda estiver aberto
            if st.session_state.driver:
                logger.info("Fechando o navegador (garantia final)...")
                try:
                    st.session_state.driver.quit()
                    st.session_state.driver = None
                except Exception as e:
                    logger.error(f"Erro ao fechar o driver na etapa 'complete': {e}")
                    st.session_state.driver = None # Garante que seja None
            # Garante que o relat√≥rio seja gerado se ainda n√£o foi
            if not st.session_state.report:
                 generate_report()
            st.session_state.is_running = False # Marca como n√£o rodando
            st.rerun() # Atualiza a UI final

        else:
            # Estado inv√°lido, interrompe
            logger.error(f"Estado de automa√ß√£o inv√°lido: {current_step}")
            st.error(f"Erro interno: Estado de automa√ß√£o desconhecido '{current_step}'.")
            if st.session_state.driver:
                try:
                    st.session_state.driver.quit()
                except Exception as e:
                     logger.warning(f"Erro ao fechar driver em estado inv√°lido: {e}")
                st.session_state.driver = None
            st.session_state.is_running = False
            st.rerun()

    except Exception as global_e:
        # Captura qualquer erro n√£o tratado nos passos
        logger.error(f"Erro global n√£o capturado durante a automa√ß√£o no passo {current_step}: {global_e}")
        logger.error(traceback.format_exc())
        st.error(f"Ocorreu um erro inesperado: {global_e}")
        # Tenta fechar o driver
        if st.session_state.driver:
            try:
                st.session_state.driver.quit()
            except Exception as e:
                 logger.warning(f"Erro ao fechar driver ap√≥s erro global: {e}")
            st.session_state.driver = None
        st.session_state.is_running = False
        # Tenta gerar um relat√≥rio parcial
        generate_report()
        st.rerun() # Para a execu√ß√£o e atualiza a UI