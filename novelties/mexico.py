import streamlit as st
import time
import pandas as pd
import datetime
import json
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
from selenium.webdriver.support.ui import Select
import logging
import traceback
from io import StringIO
import sys
import platform
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger

# Importa as fun√ß√µes de conex√£o com banco de dados com tratamento de erro
try:
    from db_connection import (
        init_database, 
        save_execution_results, 
        load_schedule_config, 
        save_schedule_config, 
        get_execution_history,
        is_railway
    )
except ImportError:
    # Fallback sem banco de dados
    def init_database(): return None
    def save_execution_results(results): return None
    def load_schedule_config(): return {"is_enabled": False, "interval_hours": 6, "start_time": "08:00", "end_time": "20:00", "last_run": None}
    def save_schedule_config(config): return None
    def get_execution_history(start_date, end_date): return pd.DataFrame()
    def is_railway(): return "RAILWAY_ENVIRONMENT" in os.environ

# Configura√ß√µes padr√£o - Credenciais removidas do frontend conforme solicitado
DEFAULT_CREDENTIALS = {
    "email": "viniciuschegouoperacional@gmail.com",
    "password": "Viniciuschegou@1"
}

# T√≠tulo e descri√ß√£o
st.title("Automa√ß√£o de Novelties Dropi")
st.markdown("""
Este aplicativo automatiza o processamento de novelties na plataforma Dropi.
A automa√ß√£o √© executada diretamente e voc√™ pode acompanhar o progresso em tempo real.
""")

# Inicializa o banco de dados
init_database()

# Verificar e instalar depend√™ncias
def check_dependencies():
    try:
        # No Railway, n√£o verificamos o Chrome
        if is_railway():
            st.sidebar.success("üöÇ Executando no Railway com PostgreSQL")
            return True
            
        # Verificar o sistema operacional
        system = platform.system()
        st.sidebar.info(f"Sistema Operacional: {system}")
        
        # Verificar se o Chrome est√° instalado
        if system == "Windows":
            chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
            chrome_path_alt = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
            if os.path.exists(chrome_path) or os.path.exists(chrome_path_alt):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Darwin":  # macOS
            if os.path.exists("/Applications/Google Chrome.app"):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Linux":
            chrome_exists = os.system("which google-chrome > /dev/null 2>&1") == 0
            if chrome_exists:
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        
        # Verificar m√≥dulos Python
        required_modules = ["selenium", "webdriver_manager", "pandas", "apscheduler"]
        if is_railway():
            required_modules.append("psycopg2")
            
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            st.sidebar.error(f"‚ùå M√≥dulos faltando: {', '.join(missing_modules)}")
            st.sidebar.info("Execute: pip install " + " ".join(missing_modules))
        else:
            st.sidebar.success("‚úÖ Todos os m√≥dulos Python necess√°rios est√£o instalados")
        
        # Informa√ß√£o sobre ambiente
        if is_railway():
            st.sidebar.success("üöÇ Executando no Railway com PostgreSQL")
        else:
            st.sidebar.info("üíª Executando localmente com SQLite")
        
        return len(missing_modules) == 0
    except Exception as e:
        st.sidebar.error(f"Erro ao verificar depend√™ncias: {str(e)}")
        return False

# Inicializa o estado da sess√£o para armazenar logs
if 'log_output' not in st.session_state:
    st.session_state.log_output = StringIO()
if 'is_running' not in st.session_state:
    st.session_state.is_running = False
if 'progress' not in st.session_state:
    st.session_state.progress = 0
if 'total_items' not in st.session_state:
    st.session_state.total_items = 0
if 'processed_items' not in st.session_state:
    st.session_state.processed_items = 0
if 'success_count' not in st.session_state:
    st.session_state.success_count = 0
if 'failed_count' not in st.session_state:
    st.session_state.failed_count = 0
if 'report' not in st.session_state:
    st.session_state.report = None
if 'log_messages' not in st.session_state:
    st.session_state.log_messages = []
if 'error_messages' not in st.session_state:
    st.session_state.error_messages = []
if 'has_chromedriver' not in st.session_state:
    st.session_state.has_chromedriver = False
if 'automation_step' not in st.session_state:
    st.session_state.automation_step = 'idle'  # Estados: idle, setup, login, navigate, configure, process, complete
if 'driver' not in st.session_state:
    st.session_state.driver = None
if 'current_row_index' not in st.session_state:
    st.session_state.current_row_index = 0
if 'rows' not in st.session_state:
    st.session_state.rows = []
if 'failed_items' not in st.session_state:
    st.session_state.failed_items = []
if 'closed_tabs' not in st.session_state:
    st.session_state.closed_tabs = 0
if 'found_pagination' not in st.session_state:
    st.session_state.found_pagination = False
if 'start_time' not in st.session_state:
    st.session_state.start_time = None
if 'scheduler' not in st.session_state:
    st.session_state.scheduler = BackgroundScheduler()
    st.session_state.scheduler.start()

# Sidebar com informa√ß√µes
st.sidebar.title("Configura√ß√£o")

# No Railway sempre usamos headless, em local podemos escolher
if is_railway():
    use_headless = True
else:
    use_headless = st.sidebar.checkbox("Modo Headless", value=True, 
                                help="Se marcado, o navegador n√£o ser√° exibido na tela. Desmarque para depura√ß√£o.")

# Verificar depend√™ncias
dependencies_ok = check_dependencies()

# Tentar instalar o ChromeDriver apenas se n√£o estivermos no Railway
if dependencies_ok and not st.session_state.has_chromedriver and not is_railway():
    with st.sidebar:
        with st.spinner("Instalando ChromeDriver..."):
            try:
                # Tenta instalar o ChromeDriver
                driver_path = ChromeDriverManager().install()
                st.session_state.has_chromedriver = True
                st.sidebar.success(f"‚úÖ ChromeDriver instalado em: {driver_path}")
            except Exception as e:
                st.sidebar.error(f"‚ùå Erro ao instalar ChromeDriver: {str(e)}")
                st.sidebar.info("Por favor, instale manualmente o ChromeDriver compat√≠vel com sua vers√£o do Chrome")
elif is_railway():
    # No Railway, assumimos que o ChromeDriver est√° dispon√≠vel atrav√©s do Dockerfile
    st.session_state.has_chromedriver = True

# Configura√ß√£o de logging para o Streamlit
class StreamlitHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        st.session_state.log_output.write(log_entry + '\n')
        
        # Adiciona √† lista de mensagens para exibi√ß√£o em tempo real
        log_type = "info"
        if record.levelno >= logging.ERROR:
            log_type = "error"
            # Adiciona erros √† lista espec√≠fica de erros
            st.session_state.error_messages.append({
                "type": "error",
                "message": log_entry
            })
        elif record.levelno >= logging.WARNING:
            log_type = "warning"
            
        st.session_state.log_messages.append({
            "type": log_type,
            "message": log_entry
        })

logger = logging.getLogger("dropi_automation")
logger.setLevel(logging.INFO)
# Limpa handlers existentes para evitar duplica√ß√£o
if logger.handlers:
    logger.handlers = []
handler = StreamlitHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Carrega configura√ß√µes de agendamento
schedule_config = load_schedule_config()

# Interface do usu√°rio
tab1, tab2, tab3 = st.tabs(["Execu√ß√£o Manual", "Agendamento", "Hist√≥rico"])

with tab1:
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Removido o formul√°rio com credenciais
        if st.button("Iniciar Automa√ß√£o Manual"):
            if st.session_state.is_running:
                st.warning("Automa√ß√£o j√° est√° em execu√ß√£o.")
            elif not dependencies_ok:
                st.error("N√£o √© poss√≠vel iniciar a automa√ß√£o. Verifique as depend√™ncias no painel lateral.")
            elif not st.session_state.has_chromedriver:
                st.error("ChromeDriver n√£o instalado. Verifique o painel lateral.")
            else:
                # Inicia a automa√ß√£o diretamente (sem thread)
                st.session_state.is_running = True
                st.session_state.log_output = StringIO()  # Limpa o log anterior
                st.session_state.log_messages = []  # Limpa as mensagens de log
                st.session_state.error_messages = []  # Limpa as mensagens de erro
                st.session_state.progress = 0
                st.session_state.total_items = 0
                st.session_state.processed_items = 0
                st.session_state.success_count = 0
                st.session_state.failed_count = 0
                st.session_state.report = None
                st.session_state.automation_step = 'setup'
                st.session_state.current_row_index = 0
                st.session_state.rows = []
                st.session_state.failed_items = []
                st.session_state.closed_tabs = 0
                st.session_state.found_pagination = False
                st.session_state.email = DEFAULT_CREDENTIALS["email"]
                st.session_state.password = DEFAULT_CREDENTIALS["password"]
                st.session_state.use_headless = use_headless
                st.session_state.start_time = time.time()
                st.success("Iniciando automa√ß√£o... Aguarde.")
                st.rerun()
    
    with col2:
        st.subheader("Status")
        
        # Exibe o status atual
        if st.session_state.is_running:
            status = st.info("‚úÖ Automa√ß√£o em execu√ß√£o...")
            
            # Bot√£o para parar a automa√ß√£o
            if st.button("Parar Automa√ß√£o"):
                st.session_state.is_running = False
                
                # Fecha o navegador se estiver aberto
                if st.session_state.driver:
                    try:
                        st.session_state.driver.quit()
                    except:
                        pass
                    st.session_state.driver = None
                    
                st.warning("Automa√ß√£o interrompida pelo usu√°rio.")
                st.rerun()
        else:
            if st.session_state.report:
                status = st.success("‚úÖ Automa√ß√£o conclu√≠da!")
            elif st.session_state.processed_items > 0:
                status = st.warning("‚ö†Ô∏è Automa√ß√£o interrompida.")
            else:
                status = st.info("‚è∏Ô∏è Aguardando in√≠cio da automa√ß√£o.")
        
        # Exibe estat√≠sticas
        st.metric("Novelties Processadas", st.session_state.processed_items)
        st.metric("Sucesso", st.session_state.success_count)
        st.metric("Falhas", st.session_state.failed_count)
    
    # Barra de progresso
    if st.session_state.total_items > 0:
        st.progress(st.session_state.progress)
        st.caption(f"Progresso: {st.session_state.processed_items}/{st.session_state.total_items} items")
    
    # Exibe apenas erros, n√£o o log completo
    if st.session_state.error_messages:
        st.subheader("Erros Detectados")
        for error in st.session_state.error_messages[-10:]:  # Mostra apenas os 10 √∫ltimos erros
            st.error(error["message"])
    
    # Se houver um relat√≥rio, exibe-o
    if st.session_state.report and not st.session_state.is_running:
        st.subheader("Relat√≥rio de Execu√ß√£o")
        
        report = st.session_state.report
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Processado", report.get("total_processados", 0))
        with col2:
            st.metric("Total Falhas", report.get("total_falhas", 0))
        with col3:
            st.metric("Guias Fechadas", report.get("guias_fechadas", 0))
        
        # Se houver falhas, exibe os detalhes
        if report.get("total_falhas", 0) > 0:
            st.subheader("Detalhes das Falhas")
            
            # Cria um DataFrame com os itens que falharam
            failures_df = pd.DataFrame(report.get("itens_com_falha", []))
            st.dataframe(failures_df)

with tab2:
    st.subheader("Configura√ß√£o de Automa√ß√£o Autom√°tica")
    
    # Campo para ativar/desativar automa√ß√£o agendada
    is_auto_enabled = st.toggle("Ativar Automa√ß√£o Autom√°tica", value=schedule_config["is_enabled"])
    
    # Configura√ß√£o do intervalo de execu√ß√£o
    col1, col2 = st.columns(2)
    with col1:
        interval_hours = st.number_input("Intervalo de Execu√ß√£o (horas)", 
                                         min_value=1, max_value=24, 
                                         value=schedule_config["interval_hours"])
    
    # Configura√ß√£o de hor√°rio de funcionamento
    col1, col2 = st.columns(2)
    with col1:
        start_time = st.time_input("Hor√°rio de In√≠cio", 
                                  value=datetime.datetime.strptime(schedule_config["start_time"], "%H:%M").time())
    with col2:
        end_time = st.time_input("Hor√°rio de T√©rmino", 
                               value=datetime.datetime.strptime(schedule_config["end_time"], "%H:%M").time())
    
    # Salvar configura√ß√µes
    if st.button("Salvar Configura√ß√µes de Agendamento"):
        new_config = {
            "is_enabled": is_auto_enabled,
            "interval_hours": interval_hours,
            "start_time": start_time.strftime("%H:%M"),
            "end_time": end_time.strftime("%H:%M"),
            "last_run": schedule_config.get("last_run")
        }
        
        save_schedule_config(new_config)
        
        # Atualiza o agendador
        if is_auto_enabled:
            # Remove todos os jobs existentes
            for job in st.session_state.scheduler.get_jobs():
                job.remove()
            
            # Adiciona o novo job
            st.session_state.scheduler.add_job(
                lambda: st.session_state.update({"trigger_automation": True}),
                IntervalTrigger(hours=interval_hours),
                id='automation_job'
            )
            
            st.success(f"‚úÖ Automa√ß√£o agendada a cada {interval_hours} horas entre {start_time} e {end_time}")
        else:
            # Remove todos os jobs
            for job in st.session_state.scheduler.get_jobs():
                job.remove()
            st.info("‚ùå Automa√ß√£o autom√°tica desativada")
        
        st.rerun()
    
    # Exibe a √∫ltima execu√ß√£o
    if schedule_config.get("last_run"):
        st.info(f"√öltima execu√ß√£o autom√°tica: {schedule_config['last_run']}")

with tab3:
    st.subheader("Hist√≥rico de Execu√ß√µes")
    
    # Filtro de data
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("Data Inicial", value=datetime.date.today() - datetime.timedelta(days=7))
    with col2:
        end_date = st.date_input("Data Final", value=datetime.date.today())
    
    # Bot√£o para carregar dados
    if st.button("Carregar Hist√≥rico"):
        # Ajusta datas para incluir o dia inteiro
        start_datetime = datetime.datetime.combine(start_date, datetime.time.min)
        end_datetime = datetime.datetime.combine(end_date, datetime.time.max)
        
        # Usa a fun√ß√£o importada que lida com ambos os bancos de dados
        history_df = get_execution_history(start_datetime, end_datetime)
        
        if len(history_df) > 0:
            # Formata os dados para exibi√ß√£o
            history_df['execution_date'] = pd.to_datetime(history_df['execution_date'])
            history_df['data'] = history_df['execution_date'].dt.date
            history_df['hora'] = history_df['execution_date'].dt.time
            history_df['tempo_execucao'] = history_df['execution_time'].apply(lambda x: f"{x:.2f} segundos")
            
            # Exibe o dataframe formatado
            st.dataframe(
                history_df[['data', 'hora', 'total_processed', 'successful', 'failed', 'tempo_execucao']],
                column_config={
                    'data': 'Data',
                    'hora': 'Hora',
                    'total_processed': 'Total Processado',
                    'successful': 'Sucessos',
                    'failed': 'Falhas',
                    'tempo_execucao': 'Tempo de Execu√ß√£o'
                },
                height=400
            )
            
            # Gr√°fico de resultados por dia
            st.subheader("Resultados por Dia")
            daily_stats = history_df.groupby('data').agg({
                'successful': 'sum',
                'failed': 'sum'
            }).reset_index()
            
            # Converte para formato adequado para gr√°fico
            chart_data = pd.DataFrame({
                'data': daily_stats['data'],
                'Sucessos': daily_stats['successful'],
                'Falhas': daily_stats['failed']
            })
            
            st.bar_chart(chart_data.set_index('data'))
        else:
            st.info("Nenhum dado encontrado para o per√≠odo selecionado.")

# Rodap√©
st.markdown("---")
st.caption("Automa√ß√£o Dropi Novelties ¬© 2025")

# Fun√ß√£o main a ser chamada pelo iniciar.py
def main():
    # T√≠tulo e descri√ß√£o
    st.title("Automa√ß√£o de Novelties Dropi")
    st.markdown("""
    Este aplicativo automatiza o processamento de novelties na plataforma Dropi.
    A automa√ß√£o √© executada diretamente e voc√™ pode acompanhar o progresso em tempo real.
    """)

    # Inicializa o banco de dados
    init_database()

    # Inicializa o estado da sess√£o para armazenar logs
    if 'log_output' not in st.session_state:
        st.session_state.log_output = StringIO()
    if 'is_running' not in st.session_state:
        st.session_state.is_running = False
    if 'progress' not in st.session_state:
        st.session_state.progress = 0
    if 'total_items' not in st.session_state:
        st.session_state.total_items = 0
    if 'processed_items' not in st.session_state:
        st.session_state.processed_items = 0
    if 'success_count' not in st.session_state:
        st.session_state.success_count = 0
    if 'failed_count' not in st.session_state:
        st.session_state.failed_count = 0
    if 'report' not in st.session_state:
        st.session_state.report = None
    if 'log_messages' not in st.session_state:
        st.session_state.log_messages = []
    if 'error_messages' not in st.session_state:
        st.session_state.error_messages = []
    if 'has_chromedriver' not in st.session_state:
        st.session_state.has_chromedriver = is_railway()  # No Railway, assumimos que ChromeDriver est√° dispon√≠vel
    if 'automation_step' not in st.session_state:
        st.session_state.automation_step = 'idle'
    if 'driver' not in st.session_state:
        st.session_state.driver = None
    if 'current_row_index' not in st.session_state:
        st.session_state.current_row_index = 0
    if 'rows' not in st.session_state:
        st.session_state.rows = []
    if 'failed_items' not in st.session_state:
        st.session_state.failed_items = []
    if 'closed_tabs' not in st.session_state:
        st.session_state.closed_tabs = 0
    if 'found_pagination' not in st.session_state:
        st.session_state.found_pagination = False
    if 'start_time' not in st.session_state:
        st.session_state.start_time = None
    if 'scheduler' not in st.session_state:
        st.session_state.scheduler = BackgroundScheduler()
        st.session_state.scheduler.start()

    # Verificar depend√™ncias
    dependencies_ok = check_dependencies()

    # Tentar instalar o ChromeDriver apenas se n√£o estivermos no Railway
    if dependencies_ok and not st.session_state.has_chromedriver and not is_railway():
        with st.sidebar:
            with st.spinner("Instalando ChromeDriver..."):
                try:
                    # Tenta instalar o ChromeDriver
                    driver_path = ChromeDriverManager().install()
                    st.session_state.has_chromedriver = True
                    st.sidebar.success(f"‚úÖ ChromeDriver instalado em: {driver_path}")
                except Exception as e:
                    st.sidebar.error(f"‚ùå Erro ao instalar ChromeDriver: {str(e)}")
                    st.sidebar.info("Por favor, instale manualmente o ChromeDriver compat√≠vel com sua vers√£o do Chrome")
    elif is_railway():
        # No Railway, assumimos que o ChromeDriver est√° dispon√≠vel atrav√©s do Dockerfile
        st.session_state.has_chromedriver = True

    # Sidebar com informa√ß√µes
    st.sidebar.title("Configura√ß√£o")

    # No Railway sempre usamos headless, em local podemos escolher
    if is_railway():
        st.session_state.use_headless = True
    else:
        st.session_state.use_headless = st.sidebar.checkbox("Modo Headless", value=True, 
                                    help="Se marcado, o navegador n√£o ser√° exibido na tela. Desmarque para depura√ß√£o.")

    # Interface do usu√°rio
    tab1, tab2, tab3 = st.tabs(["Execu√ß√£o Manual", "Agendamento", "Hist√≥rico"])

    with tab1:
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Removido o formul√°rio com credenciais
            if st.button("Iniciar Automa√ß√£o Manual"):
                if st.session_state.is_running:
                    st.warning("Automa√ß√£o j√° est√° em execu√ß√£o.")
                elif not dependencies_ok and not is_railway():
                    st.error("N√£o √© poss√≠vel iniciar a automa√ß√£o. Verifique as depend√™ncias no painel lateral.")
                elif not st.session_state.has_chromedriver and not is_railway():
                    st.error("ChromeDriver n√£o instalado. Verifique o painel lateral.")
                else:
                    # Inicia a automa√ß√£o diretamente (sem thread)
                    st.session_state.is_running = True
                    st.session_state.log_output = StringIO()  # Limpa o log anterior
                    st.session_state.log_messages = []  # Limpa as mensagens de log
                    st.session_state.error_messages = []  # Limpa as mensagens de erro
                    st.session_state.progress = 0
                    st.session_state.total_items = 0
                    st.session_state.processed_items = 0
                    st.session_state.success_count = 0
                    st.session_state.failed_count = 0
                    st.session_state.report = None
                    st.session_state.automation_step = 'setup'
                    st.session_state.current_row_index = 0
                    st.session_state.rows = []
                    st.session_state.failed_items = []
                    st.session_state.closed_tabs = 0
                    st.session_state.found_pagination = False
                    st.session_state.email = DEFAULT_CREDENTIALS["email"]
                    st.session_state.password = DEFAULT_CREDENTIALS["password"]
                    st.session_state.start_time = time.time()
                    st.success("Iniciando automa√ß√£o... Aguarde.")
                    st.rerun()
        
        with col2:
            st.subheader("Status")
            
            # Exibe o status atual
            if st.session_state.is_running:
                status = st.info("‚úÖ Automa√ß√£o em execu√ß√£o...")
                
                # Bot√£o para parar a automa√ß√£o
                if st.button("Parar Automa√ß√£o"):
                    st.session_state.is_running = False
                    
                    # Fecha o navegador se estiver aberto
                    if st.session_state.driver:
                        try:
                            st.session_state.driver.quit()
                        except:
                            pass
                        st.session_state.driver = None
                        
                    st.warning("Automa√ß√£o interrompida pelo usu√°rio.")
                    st.rerun()
            else:
                if st.session_state.report:
                    status = st.success("‚úÖ Automa√ß√£o conclu√≠da!")
                elif st.session_state.processed_items > 0:
                    status = st.warning("‚ö†Ô∏è Automa√ß√£o interrompida.")
                else:
                    status = st.info("‚è∏Ô∏è Aguardando in√≠cio da automa√ß√£o.")
            
            # Exibe estat√≠sticas
            st.metric("Novelties Processadas", st.session_state.processed_items)
            st.metric("Sucesso", st.session_state.success_count)
            st.metric("Falhas", st.session_state.failed_count)
        
        # Barra de progresso
        if st.session_state.total_items > 0:
            st.progress(st.session_state.progress)
            st.caption(f"Progresso: {st.session_state.processed_items}/{st.session_state.total_items} items")
        
        # Exibe apenas erros, n√£o o log completo
        if st.session_state.error_messages:
            st.subheader("Erros Detectados")
            for error in st.session_state.error_messages[-10:]:  # Mostra apenas os 10 √∫ltimos erros
                st.error(error["message"])
        
        # Se houver um relat√≥rio, exibe-o
        if st.session_state.report and not st.session_state.is_running:
            st.subheader("Relat√≥rio de Execu√ß√£o")
            
            report = st.session_state.report
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total Processado", report.get("total_processados", 0))
            with col2:
                st.metric("Total Falhas", report.get("total_falhas", 0))
            with col3:
                st.metric("Guias Fechadas", report.get("guias_fechadas", 0))
            
            # Se houver falhas, exibe os detalhes
            if report.get("total_falhas", 0) > 0:
                st.subheader("Detalhes das Falhas")
                
                # Cria um DataFrame com os itens que falharam
                failures_df = pd.DataFrame(report.get("itens_com_falha", []))
                st.dataframe(failures_df)

    with tab2:
        st.subheader("Configura√ß√£o de Automa√ß√£o Autom√°tica")
        
        # Carrega configura√ß√µes de agendamento
        schedule_config = load_schedule_config()
        
        # Campo para ativar/desativar automa√ß√£o agendada
        is_auto_enabled = st.toggle("Ativar Automa√ß√£o Autom√°tica", value=schedule_config["is_enabled"])
        
        # Configura√ß√£o do intervalo de execu√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            interval_hours = st.number_input("Intervalo de Execu√ß√£o (horas)", 
                                            min_value=1, max_value=24, 
                                            value=schedule_config["interval_hours"])
        
        # Configura√ß√£o de hor√°rio de funcionamento
        col1, col2 = st.columns(2)
        with col1:
            start_time = st.time_input("Hor√°rio de In√≠cio", 
                                    value=datetime.datetime.strptime(schedule_config["start_time"], "%H:%M").time())
        with col2:
            end_time = st.time_input("Hor√°rio de T√©rmino", 
                                value=datetime.datetime.strptime(schedule_config["end_time"], "%H:%M").time())
        
        # Salvar configura√ß√µes
        if st.button("Salvar Configura√ß√µes de Agendamento"):
            new_config = {
                "is_enabled": is_auto_enabled,
                "interval_hours": interval_hours,
                "start_time": start_time.strftime("%H:%M"),
                "end_time": end_time.strftime("%H:%M"),
                "last_run": schedule_config.get("last_run")
            }
            
            save_schedule_config(new_config)
            
            # Atualiza o agendador
            if is_auto_enabled:
                # Remove todos os jobs existentes
                for job in st.session_state.scheduler.get_jobs():
                    job.remove()
                
                # Adiciona o novo job
                st.session_state.scheduler.add_job(
                    lambda: st.session_state.update({"trigger_automation": True}),
                    IntervalTrigger(hours=interval_hours),
                    id='automation_job'
                )
                
                st.success(f"‚úÖ Automa√ß√£o agendada a cada {interval_hours} horas entre {start_time} e {end_time}")
            else:
                # Remove todos os jobs
                for job in st.session_state.scheduler.get_jobs():
                    job.remove()
                st.info("‚ùå Automa√ß√£o autom√°tica desativada")
            
            st.rerun()
        
        # Exibe a √∫ltima execu√ß√£o
        if schedule_config.get("last_run"):
            st.info(f"√öltima execu√ß√£o autom√°tica: {schedule_config['last_run']}")

    with tab3:
        st.subheader("Hist√≥rico de Execu√ß√µes")
        
        # Filtro de data
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("Data Inicial", value=datetime.date.today() - datetime.timedelta(days=7))
        with col2:
            end_date = st.date_input("Data Final", value=datetime.date.today())
        
        # Bot√£o para carregar dados
        if st.button("Carregar Hist√≥rico"):
            # Ajusta datas para incluir o dia inteiro
            start_datetime = datetime.datetime.combine(start_date, datetime.time.min)
            end_datetime = datetime.datetime.combine(end_date, datetime.time.max)
            
            # Usa a fun√ß√£o importada que lida com ambos os bancos de dados
            history_df = get_execution_history(start_datetime, end_datetime)
            
            if len(history_df) > 0:
                # Formata os dados para exibi√ß√£o
                history_df['execution_date'] = pd.to_datetime(history_df['execution_date'])
                history_df['data'] = history_df['execution_date'].dt.date
                history_df['hora'] = history_df['execution_date'].dt.time
                history_df['tempo_execucao'] = history_df['execution_time'].apply(lambda x: f"{x:.2f} segundos")
                
                # Exibe o dataframe formatado
                st.dataframe(
                    history_df[['data', 'hora', 'total_processed', 'successful', 'failed', 'tempo_execucao']],
                    column_config={
                        'data': 'Data',
                        'hora': 'Hora',
                        'total_processed': 'Total Processado',
                        'successful': 'Sucessos',
                        'failed': 'Falhas',
                        'tempo_execucao': 'Tempo de Execu√ß√£o'
                    },
                    height=400
                )
                
                # Gr√°fico de resultados por dia
                st.subheader("Resultados por Dia")
                daily_stats = history_df.groupby('data').agg({
                    'successful': 'sum',
                    'failed': 'sum'
                }).reset_index()
                
                # Converte para formato adequado para gr√°fico
                chart_data = pd.DataFrame({
                    'data': daily_stats['data'],
                    'Sucessos': daily_stats['successful'],
                    'Falhas': daily_stats['failed']
                })
                
                st.bar_chart(chart_data.set_index('data'))
            else:
                st.info("Nenhum dado encontrado para o per√≠odo selecionado.")
                
    # Rodap√©
    st.markdown("---")
    st.caption("Automa√ß√£o Dropi Novelties ¬© 2025")

# Fun√ß√µes de automa√ß√£o (adaptadas para serem executadas passo a passo)
def setup_driver():
    """Configura o driver do Selenium."""
    logger.info("Iniciando configura√ß√£o do driver Chrome...")
    
    chrome_options = Options()
    
    # Sempre use headless no Railway ou se configurado localmente
    if is_railway() or st.session_state.use_headless:
        logger.info("Modo headless ativado")
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
    else:
        logger.info("Modo headless desativado - navegador ser√° vis√≠vel")
    
    chrome_options.add_argument("--window-size=1920,1080")
    
    # Adiciona algumas flags b√°sicas que ajudam com a estabilidade
    chrome_options.add_argument("--disable-extensions")
    
    try:
        # Dentro do Railway, usamos uma abordagem mais simples para iniciar o Chrome
        if is_railway():
            logger.info("Inicializando o driver Chrome no Railway...")
            # No ambiente Railway, o Chrome est√° instalado no sistema
            driver = webdriver.Chrome(options=chrome_options)
        else:
            # Localmente, continue usando o webdriver_manager
            logger.info("Inicializando o driver Chrome localmente...")
            driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=chrome_options
            )
            
        logger.info("Driver do Chrome iniciado com sucesso")
        st.session_state.driver = driver
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar o driver Chrome: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def login():
    """Fun√ß√£o de login super robusta."""
    try:
        driver = st.session_state.driver
        
        # Abre o site em uma nova janela maximizada
        driver.maximize_window()
        
        # Navega para a p√°gina de login
        logger.info("Navegando para a p√°gina de login...")
        driver.get("https://app.dropi.mx/")
        time.sleep(5)  # Espera fixa de 5 segundos
        
        # Tira screenshot para an√°lise
        driver.save_screenshot("login_page.png")
        logger.info("Screenshot da p√°gina salvo como login_page.png")
        
        # Inspeciona a p√°gina e loga a estrutura HTML para an√°lise
        logger.info("Analisando estrutura da p√°gina de login...")
        html = driver.page_source
        logger.info(f"T√≠tulo da p√°gina: {driver.title}")
        logger.info(f"URL atual: {driver.current_url}")
        
        # Tenta encontrar os campos usando diferentes m√©todos
        
        # M√âTODO 1: Tenta encontrar os campos por XPath direto
        try:
            logger.info("Tentando encontrar campos por XPath...")
            
            # Lista todos os inputs para depura√ß√£o
            inputs = driver.find_elements(By.TAG_NAME, 'input')
            logger.info(f"Total de campos input encontrados: {len(inputs)}")
            for i, inp in enumerate(inputs):
                input_type = inp.get_attribute('type')
                input_id = inp.get_attribute('id')
                input_name = inp.get_attribute('name')
                logger.info(f"Input #{i}: tipo={input_type}, id={input_id}, name={input_name}")
            
            # Tenta localizar o campo de email/usu√°rio - tentando diferentes atributos
            email_field = None
            
            # Tenta por tipo "email"
            try:
                email_field = driver.find_element(By.XPATH, "//input[@type='email']")
                logger.info("Campo de email encontrado por type='email'")
            except:
                pass
                
            # Tenta por tipo "text"
            if not email_field:
                try:
                    email_field = driver.find_element(By.XPATH, "//input[@type='text']")
                    logger.info("Campo de email encontrado por type='text'")
                except:
                    pass
            
            # Tenta pelo primeiro input
            if not email_field and len(inputs) > 0:
                email_field = inputs[0]
                logger.info("Usando primeiro campo input encontrado para email")
            
            # Se encontrou o campo de email, preenche
            if email_field:
                email_field.clear()
                email_field.send_keys(st.session_state.email)
                logger.info(f"Email preenchido: {st.session_state.email}")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o campo de email")
            
            # Procura o campo de senha
            password_field = None
            
            # Tenta por tipo "password"
            try:
                password_field = driver.find_element(By.XPATH, "//input[@type='password']")
                logger.info("Campo de senha encontrado por type='password'")
            except:
                pass
            
            # Tenta usando o segundo input
            if not password_field and len(inputs) > 1:
                password_field = inputs[1]
                logger.info("Usando segundo campo input encontrado para senha")
            
            # Se encontrou o campo de senha, preenche
            if password_field:
                password_field.clear()
                password_field.send_keys(st.session_state.password)
                logger.info("Senha preenchida")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o campo de senha")
            
            # Lista todos os bot√µes para depura√ß√£o
            buttons = driver.find_elements(By.TAG_NAME, 'button')
            logger.info(f"Total de bot√µes encontrados: {len(buttons)}")
            for i, btn in enumerate(buttons):
                btn_text = btn.text
                btn_type = btn.get_attribute('type')
                logger.info(f"Bot√£o #{i}: texto='{btn_text}', tipo={btn_type}")
            
            # Procura o bot√£o de login
            login_button = None
            
            # Tenta por tipo "submit"
            try:
                login_button = driver.find_element(By.XPATH, "//button[@type='submit']")
                logger.info("Bot√£o de login encontrado por type='submit'")
            except:
                pass
            
            # Tenta por texto
            if not login_button:
                for btn in buttons:
                    if "iniciar" in btn.text.lower() or "login" in btn.text.lower() or "entrar" in btn.text.lower():
                        login_button = btn
                        logger.info(f"Bot√£o de login encontrado pelo texto: '{btn.text}'")
                        break
            
            # Se n√£o encontrou por texto espec√≠fico, usa o primeiro bot√£o
            if not login_button and len(buttons) > 0:
                login_button = buttons[0]
                logger.info("Usando primeiro bot√£o encontrado para login")
            
            # Se encontrou o bot√£o, clica
            if login_button:
                login_button.click()
                logger.info("Clicado no bot√£o de login")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o bot√£o de login")
            
            # Aguarda a navega√ß√£o
            time.sleep(8)
            
            # Tira screenshot ap√≥s o login
            driver.save_screenshot("after_login.png")
            logger.info("Screenshot ap√≥s login salvo como after_login.png")
            
            # Verifica se o login foi bem-sucedido
            current_url = driver.current_url
            logger.info(f"URL ap√≥s tentativa de login: {current_url}")
            
            # Tenta encontrar elementos que aparecem ap√≥s login bem-sucedido
            menu_items = driver.find_elements(By.TAG_NAME, 'a')
            for item in menu_items:
                logger.info(f"Item de menu encontrado: '{item.text}'")
                if "dashboard" in item.text.lower() or "orders" in item.text.lower():
                    logger.info(f"Item de menu confirmando login: '{item.text}'")
                    return True
            
            # Se n√£o encontrou elementos claros de login, verifica se estamos na URL de dashboard
            if "dashboard" in current_url or "orders" in current_url:
                logger.info("Login confirmado pela URL")
                return True
            
            # Se chegou aqui, o login pode ter falhado
            logger.warning("N√£o foi poss√≠vel confirmar se o login foi bem-sucedido. Tentando continuar mesmo assim.")
            return True
            
        except Exception as e:
            logger.error(f"Erro no m√©todo 1: {str(e)}")
            # Continua para o pr√≥ximo m√©todo
        
        # M√âTODO 2: Tenta navegar diretamente para a p√°gina de Orders
        logger.info("Tentando m√©todo alternativo: navega√ß√£o direta...")
        try:
            driver.get("https://app.dropi.mx/orders")
            time.sleep(5)
            driver.save_screenshot("direct_orders.png")
            
            # Verifica se fomos redirecionados para login ou se estamos na p√°gina de orders
            current_url = driver.current_url
            logger.info(f"URL ap√≥s navega√ß√£o direta: {current_url}")
            
            if "orders" in current_url and "login" not in current_url:
                logger.info("Navega√ß√£o direta bem-sucedida!")
                return True
            else:
                logger.warning("Navega√ß√£o direta falhou, redirecionado para login")
        except:
            logger.error("Erro ao tentar navega√ß√£o direta")
        
        logger.error("Todos os m√©todos de login falharam")
        return False
        
    except Exception as e:
        logger.error(f"Erro geral no login: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def navigate_to_novelties():
    """Navega at√© a p√°gina de novelties."""
    try:
        driver = st.session_state.driver
        
        # Verifica se j√° estamos na dashboard
        logger.info("Verificando a p√°gina atual...")
        current_url = driver.current_url
        logger.info(f"URL atual: {current_url}")
        
        # Clica em My Orders - usando JavaScript para maior confiabilidade
        logger.info("Tentando clicar em 'My Orders'...")
        try:
            # Primeiro tenta com JavaScript
            driver.execute_script("Array.from(document.querySelectorAll('a')).find(el => el.textContent.includes('My Orders')).click();")
            logger.info("Clicado em 'My Orders' via JavaScript")
        except:
            # Se falhar, tenta com Selenium normal
            try:
                my_orders_link = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'My Orders')]"))
                )
                my_orders_link.click()
                logger.info("Clicado em 'My Orders' via Selenium")
            except:
                logger.warning("N√£o foi poss√≠vel clicar em 'My Orders', tentando abrir URL diretamente")
                # Se ainda falhar, tenta navegar diretamente para a URL
                driver.get("https://app.dropi.mx/orders")
                time.sleep(3)
        
        # Espera um pouco
        time.sleep(5)
        
        # Clica em Novelties - usando abordagem similar
        logger.info("Tentando clicar em 'Novelties'...")
        try:
            # Primeiro tenta com JavaScript
            driver.execute_script("Array.from(document.querySelectorAll('a')).find(el => el.textContent.includes('Novelties')).click();")
            logger.info("Clicado em 'Novelties' via JavaScript")
        except:
            # Se falhar, tenta com Selenium normal
            try:
                novelties_link = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Novelties')]"))
                )
                novelties_link.click()
                logger.info("Clicado em 'Novelties' via Selenium")
            except:
                logger.warning("N√£o foi poss√≠vel clicar em 'Novelties', tentando abrir URL diretamente")
                # Se ainda falhar, tenta navegar diretamente para a URL
                driver.get("https://app.dropi.mx/novelties")
                time.sleep(3)
        
        # Espera mais um pouco
        time.sleep(5)
        
        # Tira screenshot para verificar
        try:
            driver.save_screenshot("novelties_page.png")
            logger.info("Screenshot da p√°gina de novelties salvo")
        except:
            pass
        
        # Espera at√© que a tabela de novelties seja carregada
        logger.info("Verificando se a tabela de novelties foi carregada...")
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//table"))
            )
            logger.info("Tabela de novelties encontrada!")
        except:
            logger.warning("N√£o foi poss√≠vel encontrar a tabela, mas continuando...")
        
        return True
    except Exception as e:
        logger.error(f"Erro ao navegar at√© Novelties: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def configure_entries_display():
    """Configura para exibir 1000 entradas usando o elemento select identificado."""
    try:
        driver = st.session_state.driver
        # Rola at√© o final da p√°gina
        logger.info("Rolando at√© o final da p√°gina para verificar op√ß√µes de exibi√ß√£o...")
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)  # Aguarda para verificar se a op√ß√£o est√° presente
        
        # Tira screenshot
        try:
            driver.save_screenshot("page_bottom_before.png")
            logger.info("Screenshot do final da p√°gina salvo (antes)")
        except:
            pass
        
        # Procura especificamente pelo select com os atributos informados
        logger.info("Procurando elemento select espec√≠fico conforme HTML fornecido...")
        
        entries_found = False
        try:
            # M√©todo 1: Procura pelo elemento select espec√≠fico
            select_elements = driver.find_elements(By.XPATH, "//select[@name='select' and @id='select' and contains(@class, 'custom-select')]")
            
            if not select_elements:
                # M√©todo 2: Procura por qualquer select na p√°gina
                select_elements = driver.find_elements(By.XPATH, "//select[contains(@class, 'custom-select') or contains(@class, 'form-control')]")
            
            if not select_elements:
                # M√©todo 3: Procura por qualquer select
                select_elements = driver.find_elements(By.TAG_NAME, "select")
            
            if select_elements:
                logger.info(f"Elemento select encontrado: {len(select_elements)} elementos")
                
                # Usa o primeiro select encontrado
                select_element = select_elements[0]
                
                # Tira screenshot antes de interagir com o select
                driver.save_screenshot("before_select_interaction.png")
                
                # Cria um objeto Select para manipular o elemento
                select = Select(select_element)
                
                # Verifica se h√° uma op√ß√£o com valor "1000"
                options_text = [o.text for o in select.options]
                logger.info(f"Op√ß√µes dispon√≠veis no select: {options_text}")
                
                try:
                    # Primeiro tenta selecionar pelo texto vis√≠vel "1000"
                    select.select_by_visible_text("1000")
                    logger.info("Selecionado '1000' pelo texto vis√≠vel")
                    entries_found = True
                except Exception as e:
                    logger.info(f"Erro ao selecionar por texto vis√≠vel: {str(e)}")
                    
                    try:
                        # Tenta selecionar pelo √≠ndice da op√ß√£o que cont√©m "1000"
                        for i, option in enumerate(select.options):
                            if "1000" in option.text or "1000" in option.get_attribute("value"):
                                select.select_by_index(i)
                                logger.info(f"Selecionado '1000' pelo √≠ndice {i}")
                                entries_found = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao selecionar por √≠ndice: {str(e)}")
                        
                        try:
                            # √öltimo recurso: tenta selecionar qualquer valor que contenha "1000"
                            for value in ["4: 1000", "1000", "4"]:  # Tenta v√°rios formatos poss√≠veis
                                try:
                                    select.select_by_value(value)
                                    logger.info(f"Selecionado '1000' pelo valor '{value}'")
                                    entries_found = True
                                    break
                                except:
                                    continue
                        except Exception as e:
                            logger.info(f"Erro ao selecionar por valor: {str(e)}")
                
                # Tenta tamb√©m usando JavaScript
                if not entries_found:
                    try:
                        logger.info("Tentando selecionar '1000' via JavaScript...")
                        # Encontra o valor que cont√©m 1000
                        for option in select.options:
                            if "1000" in option.text:
                                value = option.get_attribute("value")
                                # Define o valor diretamente via JavaScript
                                driver.execute_script(f"arguments[0].value = '{value}';", select_element)
                                # Dispara evento de change para atualizar a UI
                                driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", select_element)
                                logger.info(f"Selecionado '1000' via JavaScript com valor '{value}'")
                                entries_found = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao selecionar via JavaScript: {str(e)}")
                
                # Tira screenshot ap√≥s tentar selecionar
                driver.save_screenshot("after_select_interaction.png")
                
                if entries_found:
                    logger.info("Configurado para exibir 1000 entradas")
                    st.session_state.found_pagination = True
                    
                    # Aguarda o carregamento da tabela com mais entradas
                    logger.info("Aguardando carregamento da tabela com mais entradas...")
                    time.sleep(5)
                    
                    # ADICIONADO: Espera expl√≠cita para o carregamento da tabela
                    logger.info("Esperando explicitamente pelo carregamento das linhas da tabela...")
                    try:
                        # Espera at√© que haja pelo menos uma linha na tabela ou at√© 30 segundos
                        WebDriverWait(driver, 30).until(
                            lambda d: len(d.find_elements(By.XPATH, "//table/tbody/tr")) > 0
                        )
                        logger.info("Linhas da tabela carregadas com sucesso!")
                    except TimeoutException:
                        logger.warning("Timeout esperando pelas linhas da tabela. Verificando se h√° mensagem de 'Sem resultados'...")
                        # Verifica se existe uma mensagem de "Sem resultados" ou similar
                        try:
                            no_results = driver.find_element(By.XPATH, "//*[contains(text(), 'No hay resultados') or contains(text(), 'No data') or contains(text(), 'Sem resultados')]")
                            if no_results:
                                logger.info(f"Mensagem encontrada: '{no_results.text}' - A tabela realmente parece estar vazia.")
                        except:
                            # Vamos tentar um outro seletor para as linhas
                            logger.info("Tentando seletor alternativo para as linhas da tabela...")
            else:
                logger.warning("N√£o foi poss√≠vel encontrar o elemento select")
        except Exception as e:
            logger.error(f"Erro ao configurar quantidade de entradas: {str(e)}")
            logger.error(traceback.format_exc())
        
        # Volta para o topo da p√°gina
        logger.info("Retornando ao topo da p√°gina...")
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(1)
        
        # Agora obt√©m todas as linhas da tabela
        logger.info("Contando linhas da tabela...")
        try:
            # MODIFICADO: Tenta diferentes XPaths para encontrar as linhas
            rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
            
            # Se n√£o encontrou linhas, tenta um seletor mais gen√©rico
            if not rows:
                logger.info("Nenhuma linha encontrada com o seletor padr√£o, tentando seletor alternativo...")
                rows = driver.find_elements(By.XPATH, "//table//tr[position() > 1]")  # Ignora a primeira linha (cabe√ßalho)
            
            # Se ainda n√£o encontrou, tenta outro seletor mais gen√©rico
            if not rows:
                logger.info("Tentando outro seletor alternativo...")
                rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
            
            # Se continua sem encontrar, tenta um √∫ltimo recurso
            if not rows:
                logger.info("√öltimo recurso: capturando todas as linhas...")
                rows = driver.find_elements(By.TAG_NAME, "tr")
                # Filtra as linhas para remover poss√≠veis cabe√ßalhos
                if len(rows) > 1:
                    rows = rows[1:]  # Remove a primeira linha, que provavelmente √© o cabe√ßalho
            
            # Tira screenshot da tabela para an√°lise
            driver.save_screenshot("table_after_loading.png")
            logger.info("Screenshot da tabela ap√≥s carregamento salvo")
            
            st.session_state.rows = rows
            st.session_state.total_items = len(rows)
            logger.info(f"Total de {len(rows)} novelties encontradas para processar")
            
            # Se n√£o encontrou nenhuma linha, tenta verificar se h√° mensagem indicando aus√™ncia de dados
            if len(rows) == 0:
                try:
                    page_text = driver.find_element(By.TAG_NAME, "body").text
                    logger.info(f"Texto da p√°gina: {page_text[:500]}...")  # Primeiros 500 caracteres
                    
                    # Verifica se h√° textos comuns que indicam aus√™ncia de dados
                    no_data_texts = ["No hay resultados", "No data available", "No records found", "Sem resultados"]
                    for text in no_data_texts:
                        if text in page_text:
                            logger.info(f"Mensagem encontrada: '{text}' - A tabela realmente parece estar vazia.")
                except:
                    pass
        except Exception as e:
            logger.error(f"Erro ao contar linhas da tabela: {str(e)}")
            logger.error(traceback.format_exc())
            logger.warning("N√£o foi poss√≠vel contar as linhas da tabela. Usando valor padr√£o.")
            st.session_state.rows = []
            st.session_state.total_items = 0
        
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar exibi√ß√£o de entradas: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def process_current_novelty():
    """Processa a novelty atual na lista."""
    try:
        driver = st.session_state.driver
        
        # Verifica se h√° rows para processar
        if not st.session_state.rows:
            logger.info("Nenhuma novidade encontrada na tabela")
            return True
        
        # Verifica se todas as rows j√° foram processadas
        if st.session_state.current_row_index >= len(st.session_state.rows):
            logger.info("Todas as novelties foram processadas")
            return True
        
        # Pega a row atual
        row = st.session_state.rows[st.session_state.current_row_index]
        
        try:
            # Obt√©m o ID da linha para refer√™ncia em caso de erro
            try:
                row_id = row.find_elements(By.TAG_NAME, "td")[0].text
                logger.info(f"Processando novelty ID: {row_id} ({st.session_state.current_row_index+1}/{len(st.session_state.rows)})")
            except:
                row_id = f"Linha {st.session_state.current_row_index+1}"
                logger.info(f"Processando {row_id}/{len(st.session_state.rows)}")
            
            # Atualiza o progresso
            st.session_state.processed_items = st.session_state.current_row_index + 1
            st.session_state.progress = (st.session_state.current_row_index + 1) / len(st.session_state.rows)
            
            # Tirar screenshot antes de clicar no bot√£o Save
            try:
                driver.save_screenshot(f"before_save_{row_id}.png")
                logger.info(f"Screenshot antes de salvar: before_save_{row_id}.png")
            except:
                pass
            
            # Clica no bot√£o Save verde
            logger.info(f"Clicando no bot√£o 'Save' para a novelty {row_id}...")
            save_button = row.find_element(By.XPATH, ".//button[contains(@class, 'btn-success')]")
            save_button.click()
            
            # Espera pelo popup
            time.sleep(3)
            
            # Tirar screenshot ap√≥s clicar no bot√£o Save
            try:
                driver.save_screenshot(f"after_save_{row_id}.png")
                logger.info(f"Screenshot ap√≥s salvar: after_save_{row_id}.png")
            except:
                pass
            
            # Tenta diferentes m√©todos para encontrar e clicar no bot√£o "Yes" ou "Sim"
            yes_clicked = False
            
            # M√©todo 1: Procura por texto exato
            for text in ["Yes", "Sim", "YES", "SIM", "yes", "sim"]:
                try:
                    button = driver.find_element(By.XPATH, f"//button[contains(text(), '{text}')]")
                    logger.info(f"Bot√£o com texto '{text}' encontrado, tentando clicar...")
                    driver.execute_script("arguments[0].scrollIntoView(true);", button)
                    driver.execute_script("arguments[0].click();", button)
                    logger.info(f"Clicado no bot√£o com texto '{text}'")
                    yes_clicked = True
                    break
                except Exception as e:
                    logger.info(f"N√£o foi poss√≠vel clicar no bot√£o '{text}': {str(e)}")
                    continue
            
            # M√©todo 2: Primeiro bot√£o no modal-footer
            if not yes_clicked:
                try:
                    buttons = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal-footer')]/button")
                    if buttons:
                        logger.info("Encontrado bot√£o no modal-footer, tentando clicar...")
                        driver.execute_script("arguments[0].scrollIntoView(true);", buttons[0])
                        driver.execute_script("arguments[0].click();", buttons[0])
                        logger.info("Clicado no primeiro bot√£o do modal-footer")
                        yes_clicked = True
                except Exception as e:
                    logger.info(f"Erro ao clicar no bot√£o do modal-footer: {str(e)}")
            
            # M√©todo 3: Qualquer bot√£o primary ou success
            if not yes_clicked:
                try:
                    buttons = driver.find_elements(By.TAG_NAME, "button")
                    for button in buttons:
                        if button.is_displayed():
                            try:
                                button_class = button.get_attribute("class").lower()
                                if "primary" in button_class or "success" in button_class:
                                    logger.info(f"Encontrado bot√£o com classe {button_class}, tentando clicar...")
                                    driver.execute_script("arguments[0].scrollIntoView(true);", button)
                                    driver.execute_script("arguments[0].click();", button)
                                    logger.info(f"Clicado em bot√£o de classe: {button_class}")
                                    yes_clicked = True
                                    break
                            except Exception as e:
                                logger.info(f"Erro ao clicar no bot√£o de classe {button_class}: {str(e)}")
                                continue
                except Exception as e:
                    logger.info(f"Erro ao procurar bot√µes por classe: {str(e)}")
                    
            if not yes_clicked:
                logger.warning("N√£o foi poss√≠vel clicar em 'Yes'/'Sim'. Tentando continuar...")
            
            # Espera ap√≥s clicar no bot√£o Yes
            time.sleep(3)
            
            # Tirar screenshot ap√≥s clicar no bot√£o Yes
            try:
                driver.save_screenshot(f"after_yes_{row_id}.png")
                logger.info(f"Screenshot ap√≥s clicar em Yes: after_yes_{row_id}.png")
            except:
                pass
            
            # Agora vamos tentar encontrar o formul√°rio ou os campos, mesmo sem esperar pelo modal completo
            logger.info("Procurando campos para preenchimento, mesmo sem modal completo...")
            
            # Primeiro tentamos capturar o endere√ßo antes de procurar o formul√°rio
            address = extract_address_from_page(driver)
            
            # Tenta v√°rias estrat√©gias para encontrar o formul√°rio
            form_found = False
            form_modal = None
            
            # Estrat√©gia 1: Procura pelo modal padr√£o com formul√°rio
            try:
                logger.info("Tentando encontrar o modal com formul√°rio (estrat√©gia 1)...")
                form_modal = WebDriverWait(driver, 7).until(
                    EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal-body')]//form"))
                )
                logger.info("Formul√°rio encontrado com sucesso (estrat√©gia 1)")
                form_found = True
            except Exception as e:
                logger.info(f"N√£o foi poss√≠vel encontrar o formul√°rio padr√£o: {str(e)}")
            
            # Estrat√©gia 2: Procura por qualquer modal vis√≠vel
            if not form_found:
                try:
                    logger.info("Tentando encontrar qualquer modal vis√≠vel (estrat√©gia 2)...")
                    modal = WebDriverWait(driver, 5).until(
                        EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']"))
                    )
                    logger.info("Modal vis√≠vel encontrado, procurando campos dentro dele...")
                    form_modal = modal
                    form_found = True
                except Exception as e:
                    logger.info(f"N√£o foi poss√≠vel encontrar modal vis√≠vel: {str(e)}")
            
            # Estrat√©gia 3: Procura por campos input diretamente
            if not form_found:
                try:
                    logger.info("Tentando encontrar campos input diretamente (estrat√©gia 3)...")
                    inputs = driver.find_elements(By.TAG_NAME, "input")
                    # Filtra apenas inputs vis√≠veis
                    visible_inputs = [inp for inp in inputs if inp.is_displayed()]
                    if visible_inputs:
                        logger.info(f"Encontrados {len(visible_inputs)} inputs vis√≠veis")
                        # Usa o documento inteiro como "form_modal"
                        form_modal = driver.find_element(By.TAG_NAME, "body")
                        form_found = True
                    else:
                        logger.warning("Nenhum input vis√≠vel encontrado na p√°gina")
                except Exception as e:
                    logger.info(f"Erro ao procurar inputs: {str(e)}")
            
            # Se encontrou o formul√°rio ou campos, tenta preencher
            if form_found and form_modal:
                logger.info("Formul√°rio ou campos encontrados, preenchendo...")
                
                # Procura e preenche o campo Soluci√≥n
                solution_filled = fill_solution_field(driver, form_modal, address)
                
                # Clica em Salvar/Guardar se o campo foi preenchido
                if solution_filled:
                    # Clica em Salvar/Guardar - tentando v√°rios textos
                    save_clicked = click_save_button(driver)
                    
                    # Espera o modal fechar
                    logger.info("Aguardando fechamento do modal de edi√ß√£o...")
                    try:
                        WebDriverWait(driver, 10).until(
                            EC.invisibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']"))
                        )
                        logger.info("Modal fechou com sucesso")
                    except:
                        logger.warning("Modal de edi√ß√£o n√£o fechou em 10 segundos, tentando fechar manualmente...")
                        try:
                            # Tenta for√ßar o fechamento clicando no X
                            close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
                            for button in close_buttons:
                                if button.is_displayed():
                                    driver.execute_script("arguments[0].click();", button)
                                    logger.info("Fechando modal manualmente clicando no X")
                                    break
                        except Exception as e:
                            logger.warning(f"N√£o foi poss√≠vel fechar o modal manualmente: {str(e)}")
                else:
                    logger.warning("O campo Soluci√≥n n√£o foi preenchido, mas tentando continuar...")
                    try:
                        # Tenta clicar em salvar mesmo assim
                        save_clicked = click_save_button(driver)
                    except:
                        pass
            else:
                logger.warning("N√£o foi poss√≠vel encontrar o formul√°rio ou campos para preencher")
                try:
                    # Tenta continuar mesmo sem encontrar o formul√°rio, talvez n√£o seja necess√°rio preenchimento
                    logger.info("Tentando continuar sem preencher campos...")
                    
                    # Procura por bot√µes de salvar na p√°gina
                    for save_text in ["Guardar", "Salvar", "Save", "GUARDAR", "SALVAR", "SAVE"]:
                        try:
                            save_form_button = driver.find_element(By.XPATH, f"//button[contains(text(), '{save_text}')]")
                            if save_form_button.is_displayed():
                                driver.execute_script("arguments[0].click();", save_form_button)
                                logger.info(f"Clicado no bot√£o '{save_text}' sem preencher campos")
                                break
                        except:
                            continue
                except:
                    pass
            
            # Espera adicional ap√≥s salvar (conforme solicitado na melhoria)
            time.sleep(5)
            
            # NOVO: Procura e clica no popup "OK" que aparece ap√≥s salvar
            logger.info("Procurando popup de confirma√ß√£o com bot√£o OK...")
            try:
                # Tira screenshot do popup
                try:
                    driver.save_screenshot(f"popup_ok_{row_id}.png")
                    logger.info(f"Screenshot do popup OK: popup_ok_{row_id}.png")
                except:
                    pass
                
                # Tenta v√°rias estrat√©gias para encontrar e clicar no bot√£o OK
                ok_clicked = False
                
                # M√©todo 1: Bot√£o com texto OK
                for text in ["OK", "Ok", "ok", "Aceptar", "Aceptar", "Aceitar", "aceitar"]:
                    try:
                        ok_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                        for button in ok_buttons:
                            if button.is_displayed():
                                logger.info(f"Bot√£o OK encontrado com texto '{text}', clicando...")
                                driver.execute_script("arguments[0].click();", button)
                                ok_clicked = True
                                break
                        if ok_clicked:
                            break
                    except Exception as e:
                        logger.info(f"Erro ao clicar no bot√£o '{text}': {str(e)}")
                
                # M√©todo 2: Qualquer bot√£o em um modal visible
                if not ok_clicked:
                    try:
                        buttons = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']//button")
                        for button in buttons:
                            if button.is_displayed():
                                logger.info(f"Bot√£o encontrado em modal vis√≠vel: '{button.text}', clicando...")
                                driver.execute_script("arguments[0].click();", button)
                                ok_clicked = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao clicar em bot√£o de modal vis√≠vel: {str(e)}")
                
                # M√©todo 3: Qualquer bot√£o de classe primary ou success
                if not ok_clicked:
                    try:
                        buttons = driver.find_elements(By.TAG_NAME, "button")
                        for button in buttons:
                            if button.is_displayed():
                                try:
                                    button_class = button.get_attribute("class").lower()
                                    if "primary" in button_class or "success" in button_class:
                                        logger.info(f"Bot√£o OK encontrado por classe: '{button.text}', clicando...")
                                        driver.execute_script("arguments[0].click();", button)
                                        ok_clicked = True
                                        break
                                except:
                                    continue
                    except Exception as e:
                        logger.info(f"Erro ao procurar bot√£o OK por classe: {str(e)}")
                
                if ok_clicked:
                    logger.info("Bot√£o OK clicado com sucesso")
                    # Espera adicional ap√≥s clicar em OK
                    time.sleep(2)
                else:
                    logger.warning("N√£o foi poss√≠vel encontrar e clicar no bot√£o OK, continuando mesmo assim")
            except Exception as e:
                logger.warning(f"Erro ao procurar popup OK: {str(e)}")
            
            # Verifica se h√° novas guias abertas
            check_and_close_tabs()
            
            # Incrementa contador de sucesso
            st.session_state.success_count += 1
            logger.info(f"Novelty {row_id} processada com sucesso!")
            
            # Pequena pausa entre processamentos
            time.sleep(1)
            
        except Exception as e:
            # Registra o erro
            error_msg = f"Erro ao processar novelty {row_id}: {str(e)}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            st.session_state.failed_items.append({"id": row_id, "error": str(e)})
            st.session_state.failed_count = len(st.session_state.failed_items)
            
            # Tratamento de erro conforme especificado
            handle_error(row, row_id)
        
        # Incrementa o √≠ndice para a pr√≥xima novelty
        st.session_state.current_row_index += 1
        
        # Verifica se todas as novelties foram processadas
        if st.session_state.current_row_index >= len(st.session_state.rows):
            logger.info("Todas as novelties foram processadas")
            generate_report()
            return True
        
        return False
            
    except Exception as e:
        logger.error(f"Erro geral ao processar novelty: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def extract_address_from_page(driver):
    """Extrai o endere√ßo da p√°gina, independente do formul√°rio estar presente ou n√£o."""
    try:
        logger.info("Procurando endere√ßo do cliente na p√°gina...")
        
        # Tira screenshot para an√°lise
        try:
            driver.save_screenshot("page_for_address.png")
            logger.info("Screenshot para busca de endere√ßo salvo")
        except:
            pass
        
        address = ""
        
        # M√©todo 1: Procura pelo cabe√ßalho t√≠pico "ORDERS TO:"
        try:
            # Procura primeiro o nome do cliente, que normalmente est√° em destaque
            header_info = driver.find_elements(By.XPATH, "//*[contains(text(), 'ORDERS TO:')]")
            
            if header_info:
                # Pega o elemento que vem depois do "ORDERS TO:" que cont√©m o endere√ßo completo
                for element in header_info:
                    try:
                        # Tenta pegar o texto do elemento pai
                        parent = element.find_element(By.XPATH, "./..")
                        parent_text = parent.text
                        logger.info(f"Texto no elemento pai de ORDERS TO: {parent_text}")
                        
                        # Se encontrou o texto, procura pelo endere√ßo (geralmente ap√≥s o nome)
                        lines = parent_text.split('\n')
                        if len(lines) > 1:
                            for i, line in enumerate(lines):
                                if "ORDERS TO:" in line and i + 1 < len(lines):
                                    address = lines[i + 2]  # Pega duas linhas abaixo (nome, depois endere√ßo)
                                    logger.info(f"Endere√ßo encontrado ap√≥s ORDERS TO:: {address}")
                                    return address
                    except:
                        pass
            
                # M√©todo alternativo: tenta pegar o pr√≥ximo irm√£o
                for element in header_info:
                    try:
                        next_sibling = element.find_element(By.XPATH, "./following-sibling::*[1]")
                        sibling_text = next_sibling.text
                        logger.info(f"Texto no elemento seguinte a ORDERS TO:: {sibling_text}")
                        
                        # Separa as linhas
                        lines = sibling_text.split('\n')
                        if len(lines) > 1:
                            address = lines[1]  # A segunda linha geralmente √© o endere√ßo
                            logger.info(f"Endere√ßo capturado do irm√£o: {address}")
                            return address
                        else:
                            address = sibling_text
                            logger.info(f"Usando texto completo do irm√£o como endere√ßo: {address}")
                            return address
                    except:
                        pass
        except Exception as e:
            logger.info(f"Erro ao buscar ORDERS TO:: {str(e)}")
        
        # M√©todo 2: Procura por elementos de texto que cont√™m endere√ßo
        if not address:
            try:
                for address_keyword in ["Avenida", "Calle", "Rua", "Carretera", "Street", "Av.", "Av ", "Calz"]:
                    address_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{address_keyword}')]")
                    for element in address_elements:
                        try:
                            element_text = element.text
                            if len(element_text) > 10:  # Filtra textos muito curtos
                                address = element_text
                                logger.info(f"Endere√ßo encontrado com keyword '{address_keyword}': {address}")
                                return address
                        except:
                            pass
            except Exception as e:
                logger.info(f"Erro ao buscar por palavras-chave de endere√ßo: {str(e)}")
        
        # M√©todo 3: Procura por campos espec√≠ficos no formul√°rio que j√° estejam preenchidos
        if not address:
            try:
                # Tenta encontrar campos "Direcci√≥n" j√° preenchidos
                direccion_elements = driver.find_elements(By.XPATH, "//label[contains(text(), 'Direcci√≥n') or contains(text(), 'direcci√≥n')]")
                for label in direccion_elements:
                    try:
                        # Tenta encontrar o input associado
                        input_id = label.get_attribute("for")
                        if input_id:
                            input_field = driver.find_element(By.ID, input_id)
                            address_value = input_field.get_attribute("value")
                            if address_value and len(address_value) > 10:
                                address = address_value
                                logger.info(f"Endere√ßo encontrado em campo 'Direcci√≥n': {address}")
                                return address
                    except:
                        pass
            except Exception as e:
                logger.info(f"Erro ao buscar campos de dire√ß√£o preenchidos: {str(e)}")
        
        # Se n√£o encontrou endere√ßo, usa um valor padr√£o
        if not address:
            address = "Endere√ßo de Entrega"
            logger.warning("N√£o foi poss√≠vel encontrar endere√ßo, usando valor padr√£o")
        
        return address
    except Exception as e:
        logger.error(f"Erro ao extrair endere√ßo: {str(e)}")
        return "Endere√ßo de Entrega"

def fill_solution_field(driver, form_modal, address):
    """Preenche especificamente o campo Soluci√≥n com o endere√ßo."""
    try:
        logger.info("Tentando preencher o campo Soluci√≥n...")
        
        # Procura o campo de solu√ß√£o
        solution_fields = []
        
        # M√©todo 1: Por label exata
        try:
            solution_labels = driver.find_elements(By.XPATH, "//label[contains(text(), 'Soluci√≥n') or contains(text(), 'Solucion') or contains(text(), 'soluci√≥n') or contains(text(), 'solucion')]")
            for label in solution_labels:
                if label.is_displayed():
                    logger.info(f"Label de solu√ß√£o encontrado: '{label.text}'")
                    
                    # Procura o campo de input associado ao label
                    input_id = label.get_attribute("for")
                    if input_id:
                        try:
                            solution_field = driver.find_element(By.ID, input_id)
                            if solution_field.is_displayed():
                                solution_fields.append(solution_field)
                                logger.info("Campo de solu√ß√£o encontrado pelo ID do label")
                        except:
                            pass
        except Exception as e:
            logger.info(f"Erro ao buscar label 'Soluci√≥n': {str(e)}")
        
        # M√©todo 2: Encontrar qualquer input vis√≠vel pr√≥ximo √† label
        if not solution_fields:
            try:
                solution_labels = driver.find_elements(By.XPATH, "//*[contains(text(), 'Soluci√≥n') or contains(text(), 'Solucion')]")
                for label in solution_labels:
                    if label.is_displayed():
                        try:
                            # Busca por inputs pr√≥ximos ao label
                            parent = label.find_element(By.XPATH, "./..")
                            nearby_inputs = parent.find_elements(By.TAG_NAME, "input")
                            for input_field in nearby_inputs:
                                if input_field.is_displayed():
                                    solution_fields.append(input_field)
                                    logger.info("Campo de solu√ß√£o encontrado pr√≥ximo ao label")
                                    break
                        except:
                            pass
            except Exception as e:
                logger.info(f"Erro ao buscar inputs pr√≥ximos √† label 'Soluci√≥n': {str(e)}")
        
        # M√©todo 3: Encontrar o primeiro input vis√≠vel vazio na p√°gina
        if not solution_fields:
            try:
                inputs = form_modal.find_elements(By.TAG_NAME, "input")
                for input_field in inputs:
                    try:
                        if input_field.is_displayed() and not input_field.get_attribute("value"):
                            # Verifica se n√£o √© um campo de nome, telefone ou c√≥digo postal
                            input_name = input_field.get_attribute("name") or ""
                            input_id = input_field.get_attribute("id") or ""
                            input_placeholder = input_field.get_attribute("placeholder") or ""
                            
                            # Ignora campos espec√≠ficos
                            skip_keywords = ["name", "nombre", "phone", "telefono", "postal", "c√≥digo", "address", "direcci√≥n"]
                            should_skip = False
                            
                            for keyword in skip_keywords:
                                if (keyword.lower() in input_name.lower() or 
                                    keyword.lower() in input_id.lower() or 
                                    keyword.lower() in input_placeholder.lower()):
                                    should_skip = True
                                    break
                            
                            if not should_skip:
                                solution_fields.append(input_field)
                                logger.info("Usando primeiro campo vazio dispon√≠vel para solu√ß√£o")
                                break
                    except:
                        continue
            except Exception as e:
                logger.info(f"Erro ao buscar primeiro input vazio: {str(e)}")
        
        # Se encontrou algum campo para solu√ß√£o, preenche com o endere√ßo
        if solution_fields:
            solution_field = solution_fields[0]
            
            # Verifica se o campo est√° vazio antes de preencher
            if not solution_field.get_attribute("value"):
                # Rola at√© o elemento
                driver.execute_script("arguments[0].scrollIntoView(true);", solution_field)
                time.sleep(0.5)
                
                # Limpa o campo e preenche com o endere√ßo
                solution_field.clear()
                time.sleep(0.5)
                
                # Preenche usando JavaScript para maior confiabilidade
                driver.execute_script(f"arguments[0].value = '{address}';", solution_field)
                
                # Tamb√©m tenta o m√©todo padr√£o
                solution_field.send_keys(address)
                
                logger.info(f"Campo Soluci√≥n preenchido com o endere√ßo: {address}")
                
                # Verifica se o preenchimento funcionou
                actual_value = solution_field.get_attribute("value")
                logger.info(f"Valor atual do campo ap√≥s preenchimento: '{actual_value}'")
                
                return True
            else:
                logger.info("Campo Soluci√≥n j√° est√° preenchido, n√£o foi modificado")
                return True
        else:
            logger.warning("N√£o foi poss√≠vel encontrar o campo Soluci√≥n")
            return False
            
    except Exception as e:
        logger.error(f"Erro ao preencher campo Soluci√≥n: {str(e)}")
        return False

def click_save_button(driver):
    """Tenta clicar no bot√£o de salvar usando v√°rias estrat√©gias."""
    try:
        logger.info("Tentando clicar no bot√£o de salvar...")
        save_clicked = False
        
        # M√©todo 1: Procura por texto exato
        for save_text in ["Guardar", "Salvar", "Save", "GUARDAR", "SALVAR", "SAVE"]:
            try:
                save_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{save_text}')]")
                for button in save_buttons:
                    if button.is_displayed():
                        logger.info(f"Bot√£o de salvar encontrado com texto '{save_text}', tentando clicar...")
                        driver.execute_script("arguments[0].scrollIntoView(true);", button)
                        time.sleep(0.5)
                        driver.execute_script("arguments[0].click();", button)
                        logger.info(f"Clicado no bot√£o '{save_text}'")
                        save_clicked = True
                        break
                if save_clicked:
                    break
            except Exception as e:
                logger.info(f"Erro ao clicar no bot√£o '{save_text}': {str(e)}")
                continue
        
        # M√©todo 2: Procura por bot√£o de tipo submit
        if not save_clicked:
            try:
                submit_buttons = driver.find_elements(By.XPATH, "//button[@type='submit']")
                for button in submit_buttons:
                    if button.is_displayed():
                        logger.info("Bot√£o de submit encontrado, tentando clicar...")
                        driver.execute_script("arguments[0].scrollIntoView(true);", button)
                        time.sleep(0.5)
                        driver.execute_script("arguments[0].click();", button)
                        logger.info("Clicado no bot√£o de submit")
                        save_clicked = True
                        break
            except Exception as e:
                logger.info(f"Erro ao clicar no bot√£o de submit: {str(e)}")
        
        # M√©todo 3: Procura por bot√µes com classe indicativa de sucesso/prim√°rio
        if not save_clicked:
            try:
                buttons = driver.find_elements(By.TAG_NAME, "button")
                for button in buttons:
                    try:
                        if button.is_displayed():
                            button_class = button.get_attribute("class").lower()
                            if "primary" in button_class or "success" in button_class:
                                button_text = button.text.strip()
                                # Ignore os bot√µes que claramente n√£o s√£o para salvar
                                if button_text.lower() not in ["no", "n√£o", "cancel", "cancelar", "close", "fechar"]:
                                    logger.info(f"Bot√£o com classe {button_class} encontrado: '{button_text}', tentando clicar...")
                                    driver.execute_script("arguments[0].scrollIntoView(true);", button)
                                    time.sleep(0.5)
                                    driver.execute_script("arguments[0].click();", button)
                                    logger.info(f"Clicado em bot√£o: '{button_text}'")
                                    save_clicked = True
                                    break
                    except:
                        continue
            except Exception as e:
                logger.info(f"Erro ao procurar bot√µes por classe: {str(e)}")
        
        if not save_clicked:
            logger.warning("N√£o foi poss√≠vel encontrar e clicar no bot√£o de salvar")
        
        return save_clicked
    except Exception as e:
        logger.error(f"Erro ao tentar clicar no bot√£o de salvar: {str(e)}")
        return False

def fill_empty_fields(form_modal, row_id):
    """Fun√ß√£o legada mantida para compatibilidade, agora usa as novas fun√ß√µes."""
    try:
        driver = st.session_state.driver
        address = extract_address_from_page(driver)
        return fill_solution_field(driver, form_modal, address)
    except Exception as e:
        logger.error(f"Erro ao preencher formul√°rio: {str(e)}")
        return False

def extract_data_from_table(row_id):
    """Extrai dados da linha da tabela para uso no formul√°rio."""
    try:
        driver = st.session_state.driver
        # Tenta encontrar a linha com o ID correspondente
        row = driver.find_element(By.XPATH, f"//table/tbody/tr[td[contains(text(), '{row_id}')]]")
        
        # Extrai os dados
        data = {}
        
        # Tenta obter o nome e telefone do cliente da coluna de dados
        try:
            data_col = row.find_elements(By.TAG_NAME, "td")[3]  # Ajuste o √≠ndice conforme necess√°rio
            data_text = data_col.text
            
            # Extrai nome e telefone
            if "Phone:" in data_text:
                parts = data_text.split("Phone:")
                data["nome"] = parts[0].strip()
                data["telefone"] = parts[1].strip() if len(parts) > 1 else ""
            else:
                data["nome"] = data_text
                data["telefone"] = ""
            
            # Tenta encontrar o endere√ßo na mesma coluna ou em outra
            try:
                address_col = row.find_elements(By.TAG_NAME, "td")[4]  # Ajuste o √≠ndice conforme necess√°rio
                data["endereco"] = address_col.text.strip()
                data["endereco_completo"] = address_col.text.strip()
            except:
                data["endereco"] = ""
                data["endereco_completo"] = ""
            
        except:
            # Se n√£o conseguir extrair, usa valores gen√©ricos
            data["nome"] = "Nome do Cliente"
            data["endereco"] = "Endere√ßo de Entrega"
            data["endereco_completo"] = "Endere√ßo Completo de Entrega"
            data["telefone"] = "1234567890"
        
        return data
    except:
        # Se n√£o conseguir encontrar a linha, retorna dados gen√©ricos
        return {
            "nome": "Nome do Cliente",
            "endereco": "Endere√ßo de Entrega",
            "endereco_completo": "Endere√ßo Completo de Entrega",
            "telefone": "1234567890"
        }

def handle_error(row, row_id):
    """Trata erros conforme o protocolo especificado."""
    try:
        driver = st.session_state.driver
        logger.info(f"Iniciando tratamento de erro para novelty {row_id}...")
        
        # Tenta fechar qualquer modal/popup aberto
        try:
            logger.info("Tentando fechar popups abertos...")
            close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
            for button in close_buttons:
                if button.is_displayed():
                    button.click()
                    time.sleep(0.5)
        except:
            pass
            
        # Clica novamente no bot√£o Save
        try:
            logger.info(f"Tentando fluxo alternativo para novelty {row_id}...")
            logger.info("Clicando novamente no bot√£o 'Save'...")
            save_button = row.find_element(By.XPATH, ".//button[contains(@class, 'btn-success')]")
            save_button.click()
            
            # Espera pelo popup e clica em "N√£o" desta vez
            logger.info("Procurando e clicando no bot√£o 'N√£o' no popup...")
            nao_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'N√£o')]"))
            )
            nao_button.click()
            
            # No segundo popup, clica em "Sim"
            logger.info("Procurando e clicando no bot√£o 'Sim' no segundo popup...")
            sim_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Sim')]"))
            )
            sim_button.click()
            
            # Aguarda o modal fechar
            time.sleep(2)
            
            logger.info(f"Tratamento alternativo aplicado com sucesso para novelty {row_id}")
        except Exception as e:
            logger.error(f"Erro ao aplicar tratamento alternativo para novelty {row_id}: {str(e)}")
            
            # Tenta fechar todos os popups novamente
            try:
                logger.info("Tentando fechar todos os popups ap√≥s falha no tratamento alternativo...")
                close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
                for button in close_buttons:
                    if button.is_displayed():
                        button.click()
                        time.sleep(0.5)
            except:
                pass
        
        # Verifica se h√° novas guias abertas
        check_and_close_tabs()
            
    except Exception as e:
        logger.error(f"Erro ao tratar erro para novelty {row_id}: {str(e)}")

def check_and_close_tabs():
    """Verifica se h√° novas guias abertas e as fecha."""
    try:
        driver = st.session_state.driver
        # Obt√©m todas as guias
        handles = driver.window_handles
        
        # Se houver mais de uma guia, fecha as extras
        if len(handles) > 1:
            current_handle = driver.current_window_handle
            
            for handle in handles:
                if handle != current_handle:
                    driver.switch_to.window(handle)
                    driver.close()
                    st.session_state.closed_tabs += 1
            
            # Volta para a guia principal
            driver.switch_to.window(current_handle)
            logger.info(f"Fechadas {len(handles) - 1} guias extras")
    except Exception as e:
        logger.error(f"Erro ao verificar e fechar guias: {str(e)}")

def generate_report():
    """Gera um relat√≥rio da execu√ß√£o e salva no banco de dados."""
    # Calcula o tempo de execu√ß√£o
    execution_time = time.time() - st.session_state.start_time if st.session_state.start_time else 0
    
    # Adiciona data/hora da execu√ß√£o para salvar no banco
    execution_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    error_details = json.dumps(st.session_state.failed_items)
    
    report = {
        "execution_date": execution_date,
        "total_processados": st.session_state.success_count,
        "total_falhas": len(st.session_state.failed_items),
        "itens_com_falha": st.session_state.failed_items,
        "guias_fechadas": st.session_state.closed_tabs,
        "encontrou_paginacao": st.session_state.found_pagination,
        "execution_time": execution_time,
        "error_details": error_details
    }
    
    logger.info("======= RELAT√ìRIO DE EXECU√á√ÉO =======")
    logger.info(f"Total de novelties processadas com sucesso: {report['total_processados']}")
    logger.info(f"Total de novelties com falha: {report['total_falhas']}")
    logger.info(f"Total de guias fechadas durante o processo: {report['guias_fechadas']}")
    logger.info(f"Encontrou op√ß√£o para filtrar 1000 itens: {'Sim' if report['encontrou_paginacao'] else 'N√£o'}")
    logger.info(f"Tempo de execu√ß√£o: {execution_time:.2f} segundos")
    
    if report['total_falhas'] > 0:
        logger.info("Detalhes dos itens com falha:")
        for item in report['itens_com_falha']:
            logger.info(f"  - ID: {item['id']}, Erro: {item['error']}")
            
    logger.info("=====================================")
    
    # Salva o relat√≥rio no banco de dados
    try:
        save_execution_results(report)
        logger.info("Relat√≥rio salvo no banco de dados com sucesso")
    except Exception as e:
        logger.error(f"Erro ao salvar relat√≥rio no banco de dados: {str(e)}")
    
    st.session_state.report = report

# Fun√ß√£o para executar a automa√ß√£o agendada
def run_scheduled_automation():
    """Executa a automa√ß√£o de acordo com o agendamento."""
    # Verifica se j√° est√° em execu√ß√£o
    if st.session_state.is_running:
        logger.info("Automa√ß√£o j√° est√° em execu√ß√£o, ignorando chamada agendada")
        return
    
    # Verifica se estamos dentro do hor√°rio permitido
    now = datetime.datetime.now().time()
    config = load_schedule_config()
    
    start_time = datetime.datetime.strptime(config["start_time"], "%H:%M").time()
    end_time = datetime.datetime.strptime(config["end_time"], "%H:%M").time()
    
    if not (start_time <= now <= end_time):
        logger.info(f"Fora do hor√°rio permitido ({config['start_time']} - {config['end_time']}), ignorando chamada agendada")
        return
    
    logger.info("Iniciando automa√ß√£o agendada")
    
    # Inicia a automa√ß√£o
    st.session_state.is_running = True
    st.session_state.log_output = StringIO()
    st.session_state.log_messages = []
    st.session_state.error_messages = []
    st.session_state.progress = 0
    st.session_state.total_items = 0
    st.session_state.processed_items = 0
    st.session_state.success_count = 0
    st.session_state.failed_count = 0
    st.session_state.report = None
    st.session_state.automation_step = 'setup'
    st.session_state.current_row_index = 0
    st.session_state.rows = []
    st.session_state.failed_items = []
    st.session_state.closed_tabs = 0
    st.session_state.found_pagination = False
    st.session_state.email = DEFAULT_CREDENTIALS["email"]
    st.session_state.password = DEFAULT_CREDENTIALS["password"]
    st.session_state.use_headless = True  # Sempre headless para automa√ß√£o agendada
    st.session_state.start_time = time.time()
    
    # Atualiza o √∫ltimo hor√°rio de execu√ß√£o
    config["last_run"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_schedule_config(config)

# Verifica se uma automa√ß√£o foi agendada
if 'trigger_automation' in st.session_state and st.session_state.trigger_automation:
    st.session_state.trigger_automation = False
    run_scheduled_automation()

# Se este script for executado diretamente (n√£o importado)
if __name__ == "__main__":
    main()

# Processamento da automa√ß√£o baseado no estado atual
if st.session_state.is_running:
    # Etapas da automa√ß√£o
    if st.session_state.automation_step == 'setup':
        if setup_driver():
            st.session_state.automation_step = 'login'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha ao configurar o driver Chrome")
    
    elif st.session_state.automation_step == 'login':
        if login():
            st.session_state.automation_step = 'navigate'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha no login")
    
    elif st.session_state.automation_step == 'navigate':
        if navigate_to_novelties():
            st.session_state.automation_step = 'configure'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha ao navegar at√© Novelties")
    
    elif st.session_state.automation_step == 'configure':
        if configure_entries_display():
            st.session_state.automation_step = 'process'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha ao configurar exibi√ß√£o de entradas")
    
    elif st.session_state.automation_step == 'process':
        # Processa uma novelty por vez e faz rerun para atualizar a interface
        all_done = process_current_novelty()
        if all_done:
            st.session_state.automation_step = 'complete'
            # Fecha o navegador no final
            logger.info("Fechando o navegador...")
            if st.session_state.driver:
                st.session_state.driver.quit()
                st.session_state.driver = None
            st.session_state.is_running = False
        st.rerun()
    
    elif st.session_state.automation_step == 'complete':
        st.session_state.is_running = False
        st.success("Automa√ß√£o conclu√≠da com sucesso!")