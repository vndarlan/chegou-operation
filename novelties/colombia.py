import streamlit as st
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
from selenium.webdriver.support.ui import Select
import logging
import traceback
from io import StringIO
import sys
import os
import platform
import datetime
import plotly.express as px
from db_connection import get_execution_history  # Certifique-se de importar esta fun√ß√£o
try:
    from db_connection import is_railway
except ImportError:
    def is_railway():
        return "RAILWAY_ENVIRONMENT" in os.environ
    
THIS_COUNTRY = "colombia" # Mude para "chile", "colombia", 

st.markdown("<h1 style='text-align: center;'>üá®üá¥</h1>", unsafe_allow_html=True)
# Adicione o CSS aqui
st.markdown("""
<style>
    .stButton>button {
        border: none !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
    }
    /* Hover effect */
    .stButton>button:hover {
        background-color: #f0f0f0 !important;
    }
</style>
""", unsafe_allow_html=True)
# Verificar e instalar depend√™ncias
def check_dependencies():
    try:
        # Verificar o sistema operacional
        system = platform.system()
        st.sidebar.info(f"Sistema Operacional: {system}")
        
        # Verificar se o Chrome est√° instalado
        if system == "Windows":
            chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
            chrome_path_alt = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
            if os.path.exists(chrome_path) or os.path.exists(chrome_path_alt):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Darwin":  # macOS
            if os.path.exists("/Applications/Google Chrome.app"):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Linux":
            chrome_exists = os.system("which google-chrome > /dev/null 2>&1") == 0
            if chrome_exists:
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        
        # Verificar m√≥dulos Python
        required_modules = ["selenium", "webdriver_manager", "pandas"]
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            st.sidebar.error(f"‚ùå M√≥dulos faltando: {', '.join(missing_modules)}")
            st.sidebar.info("Execute: pip install " + " ".join(missing_modules))
        else:
            st.sidebar.success("‚úÖ Todos os m√≥dulos Python necess√°rios est√£o instalados")
        
        return len(missing_modules) == 0
    except Exception as e:
        st.sidebar.error(f"Erro ao verificar depend√™ncias: {str(e)}")
        return False

# Inicializa o estado da sess√£o para armazenar logs
if 'log_output' not in st.session_state:
    st.session_state.log_output = StringIO()
if 'is_running' not in st.session_state:
    st.session_state.is_running = False
if 'progress' not in st.session_state:
    st.session_state.progress = 0
if 'total_items' not in st.session_state:
    st.session_state.total_items = 0
if 'processed_items' not in st.session_state:
    st.session_state.processed_items = 0
if 'success_count' not in st.session_state:
    st.session_state.success_count = 0
if 'failed_count' not in st.session_state:
    st.session_state.failed_count = 0
if 'report' not in st.session_state:
    st.session_state.report = None
if 'log_messages' not in st.session_state:
    st.session_state.log_messages = []
if 'has_chromedriver' not in st.session_state:
    st.session_state.has_chromedriver = False
if 'automation_step' not in st.session_state:
    st.session_state.automation_step = 'idle'  # Estados: idle, setup, login, navigate, configure, process, complete
if 'driver' not in st.session_state:
    st.session_state.driver = None
if 'current_row_index' not in st.session_state:
    st.session_state.current_row_index = 0
if 'rows' not in st.session_state:
    st.session_state.rows = []
if 'failed_items' not in st.session_state:
    st.session_state.failed_items = []
if 'closed_tabs' not in st.session_state:
    st.session_state.closed_tabs = 0
if 'found_pagination' not in st.session_state:
    st.session_state.found_pagination = False
if 'show_log' not in st.session_state:
    st.session_state.show_log = False

# Sidebar com informa√ß√µes
st.sidebar.title("Configura√ß√£o")
use_headless = st.sidebar.checkbox("Modo Headless", value=False, 
                               help="Se marcado, o navegador n√£o ser√° exibido na tela. Desmarque para depura√ß√£o.")

# Verificar depend√™ncias
dependencies_ok = check_dependencies()

# Tentar instalar o ChromeDriver
if dependencies_ok and not st.session_state.has_chromedriver:
    with st.sidebar:
        with st.spinner("Instalando ChromeDriver..."):
            try:
                # Tenta instalar o ChromeDriver
                driver_path = ChromeDriverManager().install()
                st.session_state.has_chromedriver = True
                st.sidebar.success(f"‚úÖ ChromeDriver instalado em: {driver_path}")
            except Exception as e:
                st.sidebar.error(f"‚ùå Erro ao instalar ChromeDriver: {str(e)}")
                st.sidebar.info("Por favor, instale manualmente o ChromeDriver compat√≠vel com sua vers√£o do Chrome")

# Configura√ß√£o de logging para o Streamlit
class StreamlitHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        st.session_state.log_output.write(log_entry + '\n')
        
        # Adiciona √† lista de mensagens para exibi√ß√£o em tempo real
        log_type = "info"
        if record.levelno >= logging.ERROR:
            log_type = "error"
        elif record.levelno >= logging.WARNING:
            log_type = "warning"
            
        st.session_state.log_messages.append({
            "type": log_type,
            "message": log_entry
        })

logger = logging.getLogger("dropi_automation")
logger.setLevel(logging.INFO)
# Limpa handlers existentes para evitar duplica√ß√£o
if logger.handlers:
    logger.handlers = []
handler = StreamlitHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

tab1, tab2 = st.tabs(["Execu√ß√£o Manual", "Relat√≥rio"])
with tab1:
    # Interface do usu√°rio - agora em linhas em vez de colunas
    st.subheader("Execu√ß√£o Manual")

# Define as credenciais diretamente no c√≥digo (n√£o vis√≠veis no UI)
# Use suas credenciais reais aqui
EMAIL_CREDENTIALS = "viniciuschegouoperacional@gmail.com"
PASSWORD_CREDENTIALS = "123456cC"

# Interface do usu√°rio com layout reformulado
with st.form("automation_form"):
    # Bot√£o para iniciar automa√ß√£o centralizado (sem borda grande)
    submit_button = st.form_submit_button("Iniciar Automa√ß√£o", use_container_width=True)
    
    # Aviso de depend√™ncias abaixo do bot√£o se necess√°rio
    if not dependencies_ok or not st.session_state.has_chromedriver:
        st.warning("‚ö†Ô∏è Verifica√ß√£o de depend√™ncias falhou. Veja o painel lateral.")
    
    if submit_button:
        if st.session_state.is_running:
            st.warning("Automa√ß√£o j√° est√° em execu√ß√£o.")
        elif not dependencies_ok:
            st.error("N√£o √© poss√≠vel iniciar a automa√ß√£o. Verifique as depend√™ncias no painel lateral.")
        elif not st.session_state.has_chromedriver:
            st.error("ChromeDriver n√£o instalado. Verifique o painel lateral.")
        else:
            # Inicia a automa√ß√£o diretamente (sem thread)
            st.session_state.is_running = True
            st.session_state.log_output = StringIO()  # Limpa o log anterior
            st.session_state.log_messages = []  # Limpa as mensagens de log
            st.session_state.progress = 0
            st.session_state.total_items = 0
            st.session_state.processed_items = 0
            st.session_state.success_count = 0
            st.session_state.failed_count = 0
            st.session_state.report = None
            st.session_state.automation_step = 'setup'
            st.session_state.current_row_index = 0
            st.session_state.rows = []
            st.session_state.failed_items = []
            st.session_state.closed_tabs = 0
            st.session_state.found_pagination = False
            st.session_state.email = EMAIL_CREDENTIALS
            st.session_state.password = PASSWORD_CREDENTIALS
            st.session_state.use_headless = use_headless
            st.success("Iniciando automa√ß√£o... Aguarde.")
            st.rerun()

# Status em uma linha pr√≥pria (agora fora do formul√°rio)
if st.session_state.is_running:
    st.info("‚úÖ Automa√ß√£o em execu√ß√£o...")
    
    # Bot√£o para parar a automa√ß√£o
    if st.button("Parar Automa√ß√£o"):
        st.session_state.is_running = False
        
        # Fecha o navegador se estiver aberto
        if st.session_state.driver:
            try:
                st.session_state.driver.quit()
            except:
                pass
            st.session_state.driver = None
            
        st.warning("Automa√ß√£o interrompida pelo usu√°rio.")
        st.rerun()
else:
    if st.session_state.report:
        st.success("‚úÖ Automa√ß√£o conclu√≠da!")
    elif st.session_state.processed_items > 0:
        st.warning("‚ö†Ô∏è Automa√ß√£o interrompida.")
    else:
        st.info("‚è∏Ô∏è Aguardando in√≠cio da automa√ß√£o.")

# M√©tricas com bordas individuais
st.markdown("""
<style>
    .metric-container {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        margin: 5px;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

cols = st.columns(3)
with cols[0]:
    st.markdown(
        f'<div class="metric-container"><p>Novelties Processadas</p><h1>{st.session_state.processed_items}</h1></div>', 
        unsafe_allow_html=True
    )
with cols[1]:
    st.markdown(
        f'<div class="metric-container"><p>Sucesso</p><h1>{st.session_state.success_count}</h1></div>', 
        unsafe_allow_html=True
    )
with cols[2]:
    st.markdown(
        f'<div class="metric-container"><p>Falhas</p><h1>{st.session_state.failed_count}</h1></div>', 
        unsafe_allow_html=True
    )

# Barra de progresso
if st.session_state.total_items > 0:
    st.progress(st.session_state.progress)
    st.caption(f"Progresso: {st.session_state.processed_items}/{st.session_state.total_items} items")

# Linha divis√≥ria 
st.markdown("<hr style='margin: 20px 0; border-top: 1px solid #ddd;'>", unsafe_allow_html=True)

# Toggle para mostrar/ocultar o log completo
show_log = st.checkbox("Mostrar Log Completo", value=st.session_state.show_log)
st.session_state.show_log = show_log

# Exibe o log completo apenas se o checkbox estiver marcado
if st.session_state.show_log:
    log_container = st.container()
    log_container.text_area("Log Completo", value=st.session_state.log_output.getvalue(), height=400)

# Se houver um relat√≥rio, exibe-o
if st.session_state.report and not st.session_state.is_running:
    st.subheader("Relat√≥rio de Execu√ß√£o")
    
    report = st.session_state.report
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Processado", report.get("total_processados", 0))
    with col2:
        st.metric("Total Falhas", report.get("total_falhas", 0))
    with col3:
        st.metric("Guias Fechadas", report.get("guias_fechadas", 0))
    
    # Se houver falhas, exibe os detalhes
    if report.get("total_falhas", 0) > 0:
        st.subheader("Detalhes das Falhas")
        
        # Cria um DataFrame com os itens que falharam
        failures_df = pd.DataFrame(report.get("itens_com_falha", []))
        st.dataframe(failures_df)

# Fun√ß√µes de automa√ß√£o (adaptadas para serem executadas passo a passo)
def setup_driver():
    """Configura o driver do Selenium."""
    logger.info("Iniciando configura√ß√£o do driver Chrome...")
    
    chrome_options = Options()
    
    # No Railway sempre use headless
    if is_railway() or st.session_state.use_headless:
        logger.info("Modo headless ativado")
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
    else:
        logger.info("Modo headless desativado - navegador ser√° vis√≠vel")
    
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-extensions")
    
    try:
        if is_railway():
            # No Railway, usa o Chrome j√° instalado pelo Dockerfile
            logger.info("Inicializando o driver Chrome no Railway...")
            service = Service()
            driver = webdriver.Chrome(service=service, options=chrome_options)
        else:
            # Localmente, usa o webdriver_manager
            logger.info("Inicializando o driver Chrome localmente...")
            driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=chrome_options
            )
            
        logger.info("Driver do Chrome iniciado com sucesso")
        st.session_state.driver = driver
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar o driver Chrome: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def login():
    """Fun√ß√£o de login super robusta."""
    try:
        driver = st.session_state.driver
        
        # Abre o site em uma nova janela maximizada
        driver.maximize_window()
        
        # Navega para a p√°gina de login (URL atualizada para Equador)
        logger.info("Navegando para a p√°gina de login...")
        driver.get("https://app.dropi.co/")  # URL da Dropi Equador
        time.sleep(5)  # Espera fixa de 5 segundos
        
        # Tira screenshot para an√°lise
        driver.save_screenshot("login_page.png")
        logger.info("Screenshot da p√°gina salvo como login_page.png")
        
        # Inspeciona a p√°gina e loga a estrutura HTML para an√°lise
        logger.info("Analisando estrutura da p√°gina de login...")
        html = driver.page_source
        logger.info(f"T√≠tulo da p√°gina: {driver.title}")
        logger.info(f"URL atual: {driver.current_url}")
        
        # Tenta encontrar os campos usando diferentes m√©todos
        
        # M√âTODO 1: Tenta encontrar os campos por XPath direto
        try:
            logger.info("Tentando encontrar campos por XPath...")
            
            # Lista todos os inputs para depura√ß√£o
            inputs = driver.find_elements(By.TAG_NAME, 'input')
            logger.info(f"Total de campos input encontrados: {len(inputs)}")
            for i, inp in enumerate(inputs):
                input_type = inp.get_attribute('type')
                input_id = inp.get_attribute('id')
                input_name = inp.get_attribute('name')
                logger.info(f"Input #{i}: tipo={input_type}, id={input_id}, name={input_name}")
            
            # Tenta localizar o campo de email/usu√°rio - tentando diferentes atributos
            email_field = None
            
            # Tenta por tipo "email"
            try:
                email_field = driver.find_element(By.XPATH, "//input[@type='email']")
                logger.info("Campo de email encontrado por type='email'")
            except:
                pass
                
            # Tenta por tipo "text"
            if not email_field:
                try:
                    email_field = driver.find_element(By.XPATH, "//input[@type='text']")
                    logger.info("Campo de email encontrado por type='text'")
                except:
                    pass
            
            # Tenta pelo primeiro input
            if not email_field and len(inputs) > 0:
                email_field = inputs[0]
                logger.info("Usando primeiro campo input encontrado para email")
            
            # Se encontrou o campo de email, preenche
            if email_field:
                email_field.clear()
                email_field.send_keys(st.session_state.email)
                logger.info(f"Email preenchido: {st.session_state.email}")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o campo de email")
            
            # Procura o campo de senha
            password_field = None
            
            # Tenta por tipo "password"
            try:
                password_field = driver.find_element(By.XPATH, "//input[@type='password']")
                logger.info("Campo de senha encontrado por type='password'")
            except:
                pass
            
            # Tenta usando o segundo input
            if not password_field and len(inputs) > 1:
                password_field = inputs[1]
                logger.info("Usando segundo campo input encontrado para senha")
            
            # Se encontrou o campo de senha, preenche
            if password_field:
                password_field.clear()
                password_field.send_keys(st.session_state.password)
                logger.info("Senha preenchida")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o campo de senha")
            
            # Lista todos os bot√µes para depura√ß√£o
            buttons = driver.find_elements(By.TAG_NAME, 'button')
            logger.info(f"Total de bot√µes encontrados: {len(buttons)}")
            for i, btn in enumerate(buttons):
                btn_text = btn.text
                btn_type = btn.get_attribute('type')
                logger.info(f"Bot√£o #{i}: texto='{btn_text}', tipo={btn_type}")
            
            # Procura o bot√£o de login
            login_button = None
            
            # Tenta por tipo "submit"
            try:
                login_button = driver.find_element(By.XPATH, "//button[@type='submit']")
                logger.info("Bot√£o de login encontrado por type='submit'")
            except:
                pass
            
            # Tenta por texto
            if not login_button:
                for btn in buttons:
                    if "iniciar" in btn.text.lower() or "login" in btn.text.lower() or "entrar" in btn.text.lower():
                        login_button = btn
                        logger.info(f"Bot√£o de login encontrado pelo texto: '{btn.text}'")
                        break
            
            # Se n√£o encontrou por texto espec√≠fico, usa o primeiro bot√£o
            if not login_button and len(buttons) > 0:
                login_button = buttons[0]
                logger.info("Usando primeiro bot√£o encontrado para login")
            
            # Se encontrou o bot√£o, clica
            if login_button:
                login_button.click()
                logger.info("Clicado no bot√£o de login")
            else:
                raise Exception("N√£o foi poss√≠vel encontrar o bot√£o de login")
            
            # Aguarda a navega√ß√£o
            time.sleep(8)
            
            # Tira screenshot ap√≥s o login
            driver.save_screenshot("after_login.png")
            logger.info("Screenshot ap√≥s login salvo como after_login.png")
            
            # Verifica se o login foi bem-sucedido
            current_url = driver.current_url
            logger.info(f"URL ap√≥s tentativa de login: {current_url}")
            
            # Tenta encontrar elementos que aparecem ap√≥s login bem-sucedido
            menu_items = driver.find_elements(By.TAG_NAME, 'a')
            for item in menu_items:
                logger.info(f"Item de menu encontrado: '{item.text}'")
                if "dashboard" in item.text.lower() or "orders" in item.text.lower():
                    logger.info(f"Item de menu confirmando login: '{item.text}'")
                    return True
            
            # Se n√£o encontrou elementos claros de login, verifica se estamos na URL de dashboard
            if "dashboard" in current_url or "orders" in current_url:
                logger.info("Login confirmado pela URL")
                return True
            
            # Se chegou aqui, o login pode ter falhado
            logger.warning("N√£o foi poss√≠vel confirmar se o login foi bem-sucedido. Tentando continuar mesmo assim.")
            return True
            
        except Exception as e:
            logger.error(f"Erro no m√©todo 1: {str(e)}")
            # Continua para o pr√≥ximo m√©todo
        
        # M√âTODO 2: Tenta navegar diretamente para a p√°gina de Orders
        logger.info("Tentando m√©todo alternativo: navega√ß√£o direta...")
        try:
            driver.get("https://app.dropi.co/orders")  # URL atualizada para Equador
            time.sleep(5)
            driver.save_screenshot("direct_orders.png")
            
            # Verifica se fomos redirecionados para login ou se estamos na p√°gina de orders
            current_url = driver.current_url
            logger.info(f"URL ap√≥s navega√ß√£o direta: {current_url}")
            
            if "orders" in current_url and "login" not in current_url:
                logger.info("Navega√ß√£o direta bem-sucedida!")
                return True
            else:
                logger.warning("Navega√ß√£o direta falhou, redirecionado para login")
        except:
            logger.error("Erro ao tentar navega√ß√£o direta")
        
        logger.error("Todos os m√©todos de login falharam")
        return False
        
    except Exception as e:
        logger.error(f"Erro geral no login: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def navigate_to_novelties():
    """Navega at√© a p√°gina de novelties."""
    try:
        driver = st.session_state.driver
        
        # Verifica se j√° estamos na dashboard
        logger.info("Verificando a p√°gina atual...")
        current_url = driver.current_url
        logger.info(f"URL atual: {current_url}")
        
        # Clica em My Orders - usando JavaScript para maior confiabilidade
        logger.info("Tentando clicar em 'My Orders'...")
        try:
            # Primeiro tenta com JavaScript
            driver.execute_script("Array.from(document.querySelectorAll('a')).find(el => el.textContent.includes('My Orders')).click();")
            logger.info("Clicado em 'My Orders' via JavaScript")
        except:
            # Se falhar, tenta com Selenium normal
            try:
                my_orders_link = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'My Orders')]"))
                )
                my_orders_link.click()
                logger.info("Clicado em 'My Orders' via Selenium")
            except:
                logger.warning("N√£o foi poss√≠vel clicar em 'My Orders', tentando abrir URL diretamente")
                # Se ainda falhar, tenta navegar diretamente para a URL
                driver.get("https://app.dropi.co/orders")  # URL atualizada para Equador
                time.sleep(3)
        
        # Espera um pouco
        time.sleep(5)
        
        # Clica em Novelties - usando abordagem similar
        logger.info("Tentando clicar em 'Novelties'...")
        try:
            # Primeiro tenta com JavaScript
            driver.execute_script("Array.from(document.querySelectorAll('a')).find(el => el.textContent.includes('Novelties')).click();")
            logger.info("Clicado em 'Novelties' via JavaScript")
        except:
            # Se falhar, tenta com Selenium normal
            try:
                novelties_link = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Novelties')]"))
                )
                novelties_link.click()
                logger.info("Clicado em 'Novelties' via Selenium")
            except:
                logger.warning("N√£o foi poss√≠vel clicar em 'Novelties', tentando abrir URL diretamente")
                # Se ainda falhar, tenta navegar diretamente para a URL
                driver.get("https://app.dropi.co/novelties")  # URL atualizada para Equador
                time.sleep(3)
        
        # Espera mais um pouco
        time.sleep(5)
        
        # Tira screenshot para verificar
        try:
            driver.save_screenshot("novelties_page.png")
            logger.info("Screenshot da p√°gina de novelties salvo")
        except:
            pass
        
        # Espera at√© que a tabela de novelties seja carregada
        logger.info("Verificando se a tabela de novelties foi carregada...")
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//table"))
            )
            logger.info("Tabela de novelties encontrada!")
        except:
            logger.warning("N√£o foi poss√≠vel encontrar a tabela, mas continuando...")
        
        return True
    except Exception as e:
        logger.error(f"Erro ao navegar at√© Novelties: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def configure_entries_display():
    """Configura para exibir 1000 entradas usando o elemento select identificado."""
    try:
        driver = st.session_state.driver
        # Rola at√© o final da p√°gina
        logger.info("Rolando at√© o final da p√°gina para verificar op√ß√µes de exibi√ß√£o...")
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)  # Aguarda para verificar se a op√ß√£o est√° presente
        
        # Tira screenshot
        try:
            driver.save_screenshot("page_bottom_before.png")
            logger.info("Screenshot do final da p√°gina salvo (antes)")
        except:
            pass
        
        # Procura especificamente pelo select com os atributos informados
        logger.info("Procurando elemento select espec√≠fico conforme HTML fornecido...")
        
        entries_found = False
        try:
            # M√©todo 1: Procura pelo elemento select espec√≠fico
            select_elements = driver.find_elements(By.XPATH, "//select[@name='select' and @id='select' and contains(@class, 'custom-select')]")
            
            if not select_elements:
                # M√©todo 2: Procura por qualquer select na p√°gina
                select_elements = driver.find_elements(By.XPATH, "//select[contains(@class, 'custom-select') or contains(@class, 'form-control')]")
            
            if not select_elements:
                # M√©todo 3: Procura por qualquer select
                select_elements = driver.find_elements(By.TAG_NAME, "select")
            
            if select_elements:
                logger.info(f"Elemento select encontrado: {len(select_elements)} elementos")
                
                # Usa o primeiro select encontrado
                select_element = select_elements[0]
                
                # Tira screenshot antes de interagir com o select
                driver.save_screenshot("before_select_interaction.png")
                
                # Cria um objeto Select para manipular o elemento
                select = Select(select_element)
                
                # Verifica se h√° uma op√ß√£o com valor "1000"
                options_text = [o.text for o in select.options]
                logger.info(f"Op√ß√µes dispon√≠veis no select: {options_text}")
                
                try:
                    # Primeiro tenta selecionar pelo texto vis√≠vel "1000"
                    select.select_by_visible_text("1000")
                    logger.info("Selecionado '1000' pelo texto vis√≠vel")
                    entries_found = True
                except Exception as e:
                    logger.info(f"Erro ao selecionar por texto vis√≠vel: {str(e)}")
                    
                    try:
                        # Tenta selecionar pelo √≠ndice da op√ß√£o que cont√©m "1000"
                        for i, option in enumerate(select.options):
                            if "1000" in option.text or "1000" in option.get_attribute("value"):
                                select.select_by_index(i)
                                logger.info(f"Selecionado '1000' pelo √≠ndice {i}")
                                entries_found = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao selecionar por √≠ndice: {str(e)}")
                        
                        try:
                            # √öltimo recurso: tenta selecionar qualquer valor que contenha "1000"
                            for value in ["4: 1000", "1000", "4"]:  # Tenta v√°rios formatos poss√≠veis
                                try:
                                    select.select_by_value(value)
                                    logger.info(f"Selecionado '1000' pelo valor '{value}'")
                                    entries_found = True
                                    break
                                except:
                                    continue
                        except Exception as e:
                            logger.info(f"Erro ao selecionar por valor: {str(e)}")
                
                # Tenta tamb√©m usando JavaScript
                if not entries_found:
                    try:
                        logger.info("Tentando selecionar '1000' via JavaScript...")
                        # Encontra o valor que cont√©m 1000
                        for option in select.options:
                            if "1000" in option.text:
                                value = option.get_attribute("value")
                                # Define o valor diretamente via JavaScript
                                driver.execute_script(f"arguments[0].value = '{value}';", select_element)
                                # Dispara evento de change para atualizar a UI
                                driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", select_element)
                                logger.info(f"Selecionado '1000' via JavaScript com valor '{value}'")
                                entries_found = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao selecionar via JavaScript: {str(e)}")
                
                # Tira screenshot ap√≥s tentar selecionar
                driver.save_screenshot("after_select_interaction.png")
                
                if entries_found:
                    logger.info("Configurado para exibir 1000 entradas")
                    st.session_state.found_pagination = True
                    
                    # Aguarda o carregamento da tabela com mais entradas - AUMENTADO PARA 10 SEGUNDOS
                    logger.info("Aguardando carregamento da tabela com mais entradas...")
                    time.sleep(10)
                    
                    # ADICIONADO: Espera expl√≠cita para o carregamento da tabela
                    logger.info("Esperando explicitamente pelo carregamento das linhas da tabela...")
                    try:
                        # Espera at√© que haja pelo menos uma linha na tabela ou at√© 30 segundos
                        WebDriverWait(driver, 30).until(
                            lambda d: len(d.find_elements(By.XPATH, "//table/tbody/tr")) > 0
                        )
                        logger.info("Linhas da tabela carregadas com sucesso!")
                    except TimeoutException:
                        logger.warning("Timeout esperando pelas linhas da tabela. Verificando se h√° mensagem de 'Sem resultados'...")
                        # Verifica se existe uma mensagem de "Sem resultados" ou similar
                        try:
                            no_results = driver.find_element(By.XPATH, "//*[contains(text(), 'No hay resultados') or contains(text(), 'No data') or contains(text(), 'Sem resultados')]")
                            if no_results:
                                logger.info(f"Mensagem encontrada: '{no_results.text}' - A tabela realmente parece estar vazia.")
                        except:
                            # Vamos tentar um outro seletor para as linhas
                            logger.info("Tentando seletor alternativo para as linhas da tabela...")
                            try:
                                # MODIFICA√á√ÉO: tentar m√∫ltiplos seletores para encontrar linhas da tabela
                                table_rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
                                if table_rows and len(table_rows) > 0:
                                    logger.info(f"Encontradas {len(table_rows)} linhas com seletor alternativo CSS")
                                else:
                                    table_rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
                                    if table_rows and len(table_rows) > 0:
                                        logger.info(f"Encontradas {len(table_rows)} linhas com seletor alternativo XPath gen√©rico")
                            except:
                                logger.warning("Nenhuma linha encontrada com seletores alternativos")
            else:
                logger.warning("N√£o foi poss√≠vel encontrar o elemento select")
        except Exception as e:
            logger.error(f"Erro ao configurar quantidade de entradas: {str(e)}")
            logger.error(traceback.format_exc())
        
        # Volta para o topo da p√°gina
        logger.info("Retornando ao topo da p√°gina...")
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(1)
        
        # Agora obt√©m todas as linhas da tabela
        logger.info("Contando linhas da tabela...")
        try:
            # MODIFICADO: Tenta diferentes XPaths para encontrar as linhas
            rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
            
            # Se n√£o encontrou linhas, tenta um seletor mais gen√©rico
            if not rows:
                logger.info("Nenhuma linha encontrada com o seletor padr√£o, tentando seletor alternativo...")
                rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")  # Ignora a primeira linha (cabe√ßalho)
            
            # Se ainda n√£o encontrou, tenta outro seletor mais gen√©rico
            if not rows:
                logger.info("Tentando outro seletor alternativo...")
                rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
            
            # Se continua sem encontrar, tenta um √∫ltimo recurso
            if not rows:
                logger.info("√öltimo recurso: capturando todas as linhas...")
                rows = driver.find_elements(By.TAG_NAME, "tr")
                # Filtra as linhas para remover poss√≠veis cabe√ßalhos
                if len(rows) > 1:
                    rows = rows[1:]  # Remove a primeira linha, que provavelmente √© o cabe√ßalho
            
            # Tira screenshot da tabela para an√°lise
            driver.save_screenshot("table_after_loading.png")
            logger.info("Screenshot da tabela ap√≥s carregamento salvo")
            
            st.session_state.rows = rows
            st.session_state.total_items = len(rows)
            logger.info(f"Total de {len(rows)} novelties encontradas para processar")
            
            # Se n√£o encontrou nenhuma linha, tenta verificar se h√° mensagem indicando aus√™ncia de dados
            if len(rows) == 0:
                try:
                    page_text = driver.find_element(By.TAG_NAME, "body").text
                    logger.info(f"Texto da p√°gina: {page_text[:500]}...")  # Primeiros 500 caracteres
                    
                    # Verifica se h√° textos comuns que indicam aus√™ncia de dados
                    no_data_texts = ["No hay resultados", "No data available", "No records found", "Sem resultados"]
                    for text in no_data_texts:
                        if text in page_text:
                            logger.info(f"Mensagem encontrada: '{text}' - A tabela realmente parece estar vazia.")
                except:
                    pass
        except Exception as e:
            logger.error(f"Erro ao contar linhas da tabela: {str(e)}")
            logger.error(traceback.format_exc())
            logger.warning("N√£o foi poss√≠vel contar as linhas da tabela. Usando valor padr√£o.")
            st.session_state.rows = []
            st.session_state.total_items = 0
        
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar exibi√ß√£o de entradas: {str(e)}")
        logger.error(traceback.format_exc())
        return False
    
def extract_customer_info(driver):
    """Extrai informa√ß√µes do cliente da p√°gina, incluindo nome, endere√ßo e telefone."""
    try:
        logger.info("Extraindo informa√ß√µes do cliente...")
        
        # Tira screenshot para an√°lise
        try:
            driver.save_screenshot("page_for_customer_info.png")
            logger.info("Screenshot para busca de informa√ß√µes do cliente salvo")
        except:
            pass
        
        customer_info = {
            "address": "",
            "name": "",
            "phone": ""
        }
        
        # Procura pelo cabe√ßalho "ORDERS TO:"
        try:
            header_info = driver.find_elements(By.XPATH, "//*[contains(text(), 'ORDERS TO:')]")
            
            if header_info:
                for element in header_info:
                    try:
                        # Tenta pegar o texto do elemento pai
                        parent = element.find_element(By.XPATH, "./..")
                        parent_text = parent.text
                        logger.info(f"Texto no elemento pai de ORDERS TO: {parent_text}")
                        
                        # Separar as linhas para extrair as informa√ß√µes
                        lines = parent_text.split('\n')
                        if len(lines) > 1:
                            for i, line in enumerate(lines):
                                if "ORDERS TO:" in line:
                                    # O nome geralmente est√° uma linha ap√≥s ORDERS TO:
                                    if i + 1 < len(lines):
                                        customer_info["name"] = lines[i + 1]
                                        logger.info(f"Nome encontrado: {customer_info['name']}")
                                    
                                    # O endere√ßo geralmente est√° duas linhas ap√≥s ORDERS TO:
                                    if i + 2 < len(lines):
                                        customer_info["address"] = lines[i + 2]
                                        logger.info(f"Endere√ßo encontrado: {customer_info['address']}")
                                    
                                    break
                    except Exception as e:
                        logger.info(f"Erro ao extrair de ORDERS TO:: {str(e)}")
        except Exception as e:
            logger.info(f"Erro ao buscar ORDERS TO:: {str(e)}")
        
        # Procura pelo campo de telefone - procura por texto com "Telf."
        try:
            phone_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Telf.')]")
            for element in phone_elements:
                element_text = element.text
                logger.info(f"Elemento com 'Telf.' encontrado: {element_text}")
                
                # Extrai o n√∫mero de telefone
                if "Telf." in element_text:
                    phone_parts = element_text.split("Telf.")
                    if len(phone_parts) > 1:
                        customer_info["phone"] = phone_parts[1].strip()
                        logger.info(f"Telefone encontrado: {customer_info['phone']}")
                        break
        except Exception as e:
            logger.info(f"Erro ao buscar telefone: {str(e)}")
        
        # Se n√£o encontrou alguma informa√ß√£o, tenta m√©todos alternativos para cada uma
        
        # M√©todo alternativo para nome
        if not customer_info["name"]:
            try:
                # Tenta buscar por elementos que podem conter o nome do cliente
                for name_keyword in ["Client:", "Cliente:", "Nombre:", "Name:"]:
                    name_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{name_keyword}')]")
                    for element in name_elements:
                        try:
                            element_text = element.text
                            if name_keyword in element_text:
                                parts = element_text.split(name_keyword)
                                if len(parts) > 1:
                                    customer_info["name"] = parts[1].strip()
                                    logger.info(f"Nome encontrado (m√©todo alt): {customer_info['name']}")
                                    break
                        except:
                            pass
                    if customer_info["name"]:
                        break
            except Exception as e:
                logger.info(f"Erro ao buscar nome (m√©todo alt): {str(e)}")
        
        # M√©todo alternativo para endere√ßo
        if not customer_info["address"]:
            try:
                # Tenta buscar por elementos com palavras-chave de endere√ßo
                for address_keyword in ["Avenida", "Calle", "Rua", "Carretera", "Street", "Av.", "Av ", "Calz"]:
                    address_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{address_keyword}')]")
                    for element in address_elements:
                        try:
                            element_text = element.text
                            if len(element_text) > 10:  # Filtra textos muito curtos
                                customer_info["address"] = element_text
                                logger.info(f"Endere√ßo encontrado (m√©todo alt): {customer_info['address']}")
                                break
                        except:
                            pass
                    if customer_info["address"]:
                        break
            except Exception as e:
                logger.info(f"Erro ao buscar endere√ßo (m√©todo alt): {str(e)}")
        
        # M√©todo alternativo para telefone
        if not customer_info["phone"]:
            try:
                # Tenta buscar por elementos com palavras-chave de telefone
                for phone_keyword in ["Phone:", "Tel√©fono:", "Telefono:", "Tel:", "Tel."]:
                    phone_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{phone_keyword}')]")
                    for element in phone_elements:
                        try:
                            element_text = element.text
                            if phone_keyword in element_text:
                                parts = element_text.split(phone_keyword)
                                if len(parts) > 1:
                                    customer_info["phone"] = parts[1].strip()
                                    logger.info(f"Telefone encontrado (m√©todo alt): {customer_info['phone']}")
                                    break
                        except:
                            pass
                    if customer_info["phone"]:
                        break
            except Exception as e:
                logger.info(f"Erro ao buscar telefone (m√©todo alt): {str(e)}")
        
        # Valores padr√£o para campos n√£o encontrados
        if not customer_info["name"]:
            customer_info["name"] = "Nome do Cliente"
            logger.warning("Nome do cliente n√£o encontrado, usando valor padr√£o")
        
        if not customer_info["address"]:
            customer_info["address"] = "Endere√ßo de Entrega"
            logger.warning("Endere√ßo n√£o encontrado, usando valor padr√£o")
        
        if not customer_info["phone"]:
            customer_info["phone"] = "N√£o informado"
            logger.warning("Telefone n√£o encontrado, usando valor padr√£o")
            
        return customer_info
    except Exception as e:
        logger.error(f"Erro ao extrair informa√ß√µes do cliente: {str(e)}")
        return {
            "address": "Endere√ßo de Entrega",
            "name": "Nome do Cliente",
            "phone": "N√£o informado"
        }

def handle_dropdown_solution_form(driver, form_modal, customer_info):
    """Fun√ß√£o especializada para lidar com o formul√°rio que tem um dropdown de Soluci√≥n."""
    try:
        logger.info("Detectado formul√°rio com dropdown de Soluci√≥n - usando o c√≥digo espec√≠fico...")
        
        # Tirar screenshot antes de qualquer intera√ß√£o
        try:
            driver.save_screenshot("before_dropdown_interaction.png")
            logger.info("Screenshot antes da intera√ß√£o com dropdown")
        except:
            pass
        
        # PASSO 1: Encontrar o dropdown usando o seletor espec√≠fico baseado no HTML inspecionado
        select_element = None
        select_found = False
        
        try:
            # Busca espec√≠fica pelo select dentro da div com "Soluci√≥n"
            logger.info("Buscando pelo elemento select espec√≠fico...")
            
            # Tenta encontrar o select usando v√°rios seletores (do mais espec√≠fico para o mais gen√©rico)
            selectors = [
                "//div[contains(text(), 'Soluci√≥n')]/select[contains(@class, 'form-select')]",
                "//div[contains(@class, 'form-group')]/select[contains(@class, 'form-select')]",
                "//div[contains(text(), 'Soluci√≥n')]//select",
                "//select[contains(@class, 'form-select')]",
                "//select"
            ]
            
            for selector in selectors:
                select_elements = driver.find_elements(By.XPATH, selector)
                if select_elements:
                    for element in select_elements:
                        if element.is_displayed():
                            select_element = element
                            select_found = True
                            logger.info(f"Select encontrado usando o seletor: {selector}")
                            break
                    if select_found:
                        break
            
            if not select_found:
                logger.info("√öltimo recurso: procurando por qualquer elemento select em qualquer lugar")
                select_elements = driver.find_elements(By.TAG_NAME, "select")
                for element in select_elements:
                    if element.is_displayed():
                        select_element = element
                        select_found = True
                        logger.info("Select encontrado usando busca por tag")
                        break
        except Exception as e:
            logger.info(f"Erro ao buscar select: {str(e)}")
        
        # Se n√£o encontrou o select, tentar clicar em NO e depois Yes
        if not select_element:
            logger.error("N√£o foi poss√≠vel encontrar o elemento select")
            return click_no_yes_buttons(driver)
        
        # PASSO 2: Verificar se a op√ß√£o desejada existe
        option_exists = False
        try:
            # Lista todas as op√ß√µes dispon√≠veis para depura√ß√£o
            select = Select(select_element)
            options = select.options
            logger.info(f"Op√ß√µes dispon√≠veis no select ({len(options)}):")
            
            # MUDAN√áA CR√çTICA: Verificar explicitamente se a op√ß√£o existe
            for i, option in enumerate(options):
                option_text = option.text.lower().strip()
                option_value = option.get_attribute("value")
                logger.info(f"  Op√ß√£o {i}: texto='{option_text}', valor='{option_value}'")
                
                # Verificar por diferentes varia√ß√µes do texto
                if "entregar en nueva direcci√≥n" in option_text or "entregar en nueva direccion" in option_text:
                    option_exists = True
                    logger.info(f"Op√ß√£o 'Entregar en nueva direcci√≥n' encontrada na posi√ß√£o {i}")
            
            # MUDAN√áA CR√çTICA: Se a op√ß√£o n√£o existir, clique em NO e depois Yes
            if not option_exists:
                logger.warning("Op√ß√£o 'Entregar en nueva direcci√≥n' N√ÉO encontrada! Tentando excluir o formul√°rio...")
                return click_no_yes_buttons(driver)
                
        except Exception as e:
            logger.error(f"Erro ao verificar op√ß√µes do select: {str(e)}")
            # Se houver qualquer erro na verifica√ß√£o, tente excluir o formul√°rio
            logger.warning("Erro ao verificar op√ß√µes. Tentando excluir o formul√°rio...")
            return click_no_yes_buttons(driver)
        
        # PASSO 3: Selecionar a op√ß√£o "Entregar en nueva direcci√≥n" diretamente
        option_selected = False
        
        try:
            # Rola at√© o elemento para garantir que est√° vis√≠vel
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", select_element)
            time.sleep(1)
            
            # M√©todo 1: Usando a classe Select do Selenium
            try:
                logger.info("Tentando selecionar com a classe Select...")
                select = Select(select_element)
                
                # Tenta selecionar pelo texto vis√≠vel
                select.select_by_visible_text("Entregar en nueva direcci√≥n")
                logger.info("Op√ß√£o selecionada pelo texto vis√≠vel")
                option_selected = True
            except Exception as e:
                logger.info(f"Erro ao selecionar pelo texto vis√≠vel: {str(e)}")
                
                # Tenta selecionar pelo valor - sabemos que √© "2: Object"
                try:
                    select.select_by_value("2: Object")
                    logger.info("Op√ß√£o selecionada pelo valor '2: Object'")
                    option_selected = True
                except Exception as e:
                    logger.info(f"Erro ao selecionar pelo valor: {str(e)}")
                    
                    # Tenta selecionar pelo √≠ndice (a op√ß√£o "Entregar en nueva direcci√≥n" √© a terceira = √≠ndice 2)
                    try:
                        select.select_by_index(2)
                        logger.info("Op√ß√£o selecionada pelo √≠ndice 2")
                        option_selected = True
                    except Exception as e:
                        logger.info(f"Erro ao selecionar pelo √≠ndice: {str(e)}")
        except Exception as e:
            logger.info(f"Erro ao usar a classe Select: {str(e)}")
        
        # M√©todo 2: Usando JavaScript direto
        if not option_selected:
            try:
                logger.info("Tentando selecionar usando JavaScript...")
                
                # Define o valor diretamente via JavaScript
                driver.execute_script("arguments[0].value = '2: Object';", select_element)
                
                # Dispara evento de change para atualizar a interface
                driver.execute_script("arguments[0].dispatchEvent(new Event('change', { 'bubbles': true }));", select_element)
                
                logger.info("Valor '2: Object' configurado via JavaScript")
                option_selected = True
            except Exception as e:
                logger.info(f"Erro ao selecionar via JavaScript: {str(e)}")
        
        # Tirar screenshot ap√≥s selecionar a op√ß√£o
        try:
            driver.save_screenshot("after_option_selected.png")
            logger.info("Screenshot ap√≥s selecionar op√ß√£o")
        except:
            pass
        
        # Espera para o dropdown processar a sele√ß√£o
        time.sleep(3)
        
        # Se n√£o conseguiu selecionar, tenta excluir o item
        if not option_selected:
            logger.warning("N√£o foi poss√≠vel selecionar a op√ß√£o, tentando excluir...")
            return click_no_yes_buttons(driver)
        
        # PASSO 4: Preencher os campos "Detalle adicional" e "Direcci√≥n entrega"
        # com o endere√ßo do cliente
        fields_filled = 0
        
        logger.info("Preenchendo campos ap√≥s selecionar a op√ß√£o...")
        
        # Preenche o campo "Detalle adicional de la soluci√≥n"
        try:
            # M√©todo 1: Usando fill_field_by_label
            detalle_filled = fill_field_by_label(driver, form_modal, 
                                                ["Detalle adicional de la soluci√≥n", "Detalle adicional"], 
                                                customer_info["address"])
            
            # M√©todo 2: Tentar encontrar por placeholder ou atributos
            if not detalle_filled:
                detalles = driver.find_elements(By.XPATH, "//textarea | //input[contains(@placeholder, 'Detalle') or contains(@id, 'detalle') or contains(@name, 'detalle')]")
                for detalle in detalles:
                    if detalle.is_displayed():
                        driver.execute_script("arguments[0].value = '';", detalle)
                        time.sleep(0.5)
                        driver.execute_script(f"arguments[0].value = '{customer_info['address']}';", detalle)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", detalle)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", detalle)
                        logger.info("Campo 'Detalle adicional' preenchido via m√©todo alternativo")
                        detalle_filled = True
                        fields_filled += 1
                        break
            else:
                fields_filled += 1
                logger.info("Campo 'Detalle adicional' preenchido com sucesso")
        except Exception as e:
            logger.info(f"Erro ao preencher campo 'Detalle adicional': {str(e)}")
        
        # Preenche o campo "Direcci√≥n entrega"
        try:
            # M√©todo 1: Usando fill_field_by_label
            direccion_filled = fill_field_by_label(driver, form_modal, 
                                                 ["Direcci√≥n entrega", "Direcci√≥n de entrega"], 
                                                 customer_info["address"])
            
            # M√©todo 2: Tentar encontrar por placeholder ou atributos
            if not direccion_filled:
                direcciones = driver.find_elements(By.XPATH, "//input[contains(@placeholder, 'direcci√≥n') or contains(@id, 'direccion') or contains(@name, 'direccion') or contains(@id, 'address') or contains(@name, 'address')]")
                for direccion in direcciones:
                    if direccion.is_displayed():
                        driver.execute_script("arguments[0].value = '';", direccion)
                        time.sleep(0.5)
                        driver.execute_script(f"arguments[0].value = '{customer_info['address']}';", direccion)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", direccion)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", direccion)
                        logger.info("Campo 'Direcci√≥n entrega' preenchido via m√©todo alternativo")
                        direccion_filled = True
                        fields_filled += 1
                        break
            else:
                fields_filled += 1
                logger.info("Campo 'Direcci√≥n entrega' preenchido com sucesso")
        except Exception as e:
            logger.info(f"Erro ao preencher campo 'Direcci√≥n entrega': {str(e)}")
        
        # Tirar screenshot ap√≥s preencher os campos
        try:
            driver.save_screenshot("after_fields_filled.png")
            logger.info("Screenshot ap√≥s preencher os campos")
        except:
            pass
        
        logger.info(f"Total de {fields_filled} campos preenchidos ap√≥s selecionar a op√ß√£o")
        return fields_filled > 0
            
    except Exception as e:
        logger.error(f"Erro ao processar formul√°rio com dropdown: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def click_no_yes_buttons(driver):
    """Fun√ß√£o para clicar em NO e depois Yes quando n√£o podemos processar o formul√°rio."""
    try:
        logger.info("Tentando clicar em NO e depois Yes para excluir o formul√°rio...")
        
        # Procura e clica no bot√£o "No"
        no_clicked = False
        try:
            # Procura bot√µes com texto "NO" ou classe de bot√£o danger (vermelho)
            no_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'NO') or contains(@class, 'btn-danger')]")
            for button in no_buttons:
                if button.is_displayed():
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", button)
                    logger.info("Clicado no bot√£o 'NO' via JavaScript")
                    time.sleep(2)
                    no_clicked = True
                    break
            
            if not no_clicked:
                logger.warning("N√£o foi poss√≠vel encontrar ou clicar no bot√£o 'NO'")
                return False
            
            # Agora procura e clica no bot√£o "Yes" para confirmar
            yes_clicked = False
            
            # Procura por diferentes varia√ß√µes de "Yes"
            for text in ["Yes", "YES"]:
                yes_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                for button in yes_buttons:
                    if button.is_displayed():
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                        time.sleep(1)
                        driver.execute_script("arguments[0].click();", button)
                        logger.info(f"Clicado no bot√£o '{text}' via JavaScript para confirmar exclus√£o")
                        time.sleep(2)
                        yes_clicked = True
                        break
                
                if yes_clicked:
                    break
            
            if not yes_clicked:
                logger.warning("N√£o foi poss√≠vel encontrar ou clicar no bot√£o Yes ap√≥s NO")
                return False
            
            logger.info("Exclus√£o do formul√°rio confirmada com sucesso (NO + Yes)")
            
            # Sinaliza que o formul√°rio foi exclu√≠do com sucesso
            st.session_state.form_excluded = True
            
            # Aguarda para ter certeza que tudo processou
            time.sleep(5)
            
            # Retorna True para indicar sucesso e pular para o pr√≥ximo item
            return True
            
        except Exception as e:
            logger.error(f"Erro ao clicar nos bot√µes NO/Yes: {str(e)}")
            return False
    except Exception as e:
        logger.error(f"Erro ao tentar excluir formul√°rio: {str(e)}")
        return False

def fill_form_fields(driver, form_modal, customer_info):
    """Preenche os campos do formul√°rio com as informa√ß√µes do cliente."""
    try:
        logger.info("Verificando se o formul√°rio tem o formato de dropdown...")
        
        # Verifica se existe um select de Soluci√≥n (detec√ß√£o mais precisa)
        dropdown_exists = False
        try:
            # Busca espec√≠fica pelo elemento select
            select_elements = []
            
            # Tenta encontrar o select explicitamente relacionado √† Soluci√≥n
            select_elements = driver.find_elements(By.XPATH, "//div[contains(text(), 'Soluci√≥n')]/select")
            
            if not select_elements:
                select_elements = driver.find_elements(By.XPATH, "//div[contains(@class, 'form-group')][contains(text(), 'Soluci√≥n')]//select")
            
            # Se encontrou algum select, verifica se tem a op√ß√£o espec√≠fica "Entregar en nueva direcci√≥n"
            if select_elements:
                for select_element in select_elements:
                    if select_element.is_displayed():
                        # Verifica se tem a op√ß√£o espec√≠fica
                        try:
                            options = select_element.find_elements(By.TAG_NAME, "option")
                            for option in options:
                                if "entregar en nueva direcci√≥n" in option.text.lower():
                                    dropdown_exists = True
                                    logger.info("Detectado formul√°rio com dropdown para Soluci√≥n e op√ß√£o 'Entregar en nueva direcci√≥n'")
                                    break
                            if dropdown_exists:
                                break
                        except:
                            # Se n√£o conseguir verificar as op√ß√µes, ainda pode ser um dropdown
                            pass
            
            # Se n√£o encontrou pelo select com op√ß√µes, faz uma verifica√ß√£o de fallback
            if not dropdown_exists:
                # Verifica especificamente pela estrutura HTML que voc√™ compartilhou
                form_html = form_modal.get_attribute("innerHTML").lower()
                if "select" in form_html and "soluci√≥n" in form_html and "entregar en nueva direcci√≥n" in form_html:
                    dropdown_exists = True
                    logger.info("Detectado formul√°rio com dropdown de Soluci√≥n via HTML interno")
        except Exception as e:
            logger.info(f"Erro ao verificar tipo de formul√°rio: {str(e)}")
        
        # Se detectou que √© o formato com dropdown, usa a fun√ß√£o especializada
        if dropdown_exists:
            logger.info("Detectado formul√°rio com dropdown de Soluci√≥n. Usando tratamento especializado.")
            return handle_dropdown_solution_form(driver, form_modal, customer_info)
        
        # Caso contr√°rio, continua com o fluxo normal
        logger.info("Usando fluxo normal de preenchimento de formul√°rio...")
        fields_filled = 0
        
        # Resto do c√≥digo original para preencher formul√°rios padr√£o
        # Primeiro vamos encontrar todos os campos do formul√°rio para entender o que precisa ser preenchido
        form_fields = []
        try:
            # Tirar screenshot do formul√°rio para an√°lise
            driver.save_screenshot("form_before_filling.png")
            logger.info("Screenshot do formul√°rio antes de preencher salvo")
            
            # Encontra todas as labels vis√≠veis no formul√°rio
            labels = form_modal.find_elements(By.TAG_NAME, "label")
            visible_labels = [label for label in labels if label.is_displayed()]
            
            logger.info(f"Total de {len(visible_labels)} labels vis√≠veis encontradas no formul√°rio")
            
            # Lista todas as labels encontradas no log
            for idx, label in enumerate(visible_labels):
                label_text = label.text.strip()
                label_for = label.get_attribute("for")
                logger.info(f"Label #{idx}: Texto='{label_text}', For='{label_for}'")
                
                # Verifica se h√° um campo associado
                if label_for:
                    try:
                        input_field = driver.find_element(By.ID, label_for)
                        if input_field.is_displayed():
                            field_type = input_field.get_attribute("type")
                            field_value = input_field.get_attribute("value")
                            field_required = input_field.get_attribute("required")
                            
                            form_fields.append({
                                "label": label_text,
                                "field": input_field,
                                "type": field_type,
                                "value": field_value,
                                "required": field_required == "true" or field_required == ""
                            })
                            
                            logger.info(f"Campo associado encontrado: Tipo='{field_type}', Valor='{field_value}', Obrigat√≥rio={field_required}")
                    except:
                        logger.info(f"N√£o foi poss√≠vel encontrar campo para label '{label_text}'")
            
            # Se n√£o encontrou campos por labels, tenta encontrar todos os inputs
            if not form_fields:
                logger.info("Tentando encontrar todos os campos de input vis√≠veis...")
                inputs = form_modal.find_elements(By.TAG_NAME, "input")
                visible_inputs = [inp for inp in inputs if inp.is_displayed()]
                
                logger.info(f"Total de {len(visible_inputs)} inputs vis√≠veis encontrados")
                
                for idx, input_field in enumerate(visible_inputs):
                    field_id = input_field.get_attribute("id")
                    field_name = input_field.get_attribute("name")
                    field_placeholder = input_field.get_attribute("placeholder")
                    field_type = input_field.get_attribute("type")
                    field_value = input_field.get_attribute("value")
                    field_required = input_field.get_attribute("required")
                    
                    # IMPORTANTE: Ignorar o campo de pesquisa
                    if field_name == "textToSearch" or field_placeholder == "Search":
                        logger.info(f"Ignorando campo de pesquisa: ID='{field_id}', Nome='{field_name}', Placeholder='{field_placeholder}'")
                        continue
                    
                    # Tenta determinar a label pelo contexto
                    label_text = field_placeholder or field_name or field_id or f"Campo #{idx}"
                    
                    form_fields.append({
                        "label": label_text,
                        "field": input_field,
                        "type": field_type,
                        "value": field_value,
                        "required": field_required == "true" or field_required == ""
                    })
                    
                    logger.info(f"Input #{idx}: ID='{field_id}', Nome='{field_name}', Placeholder='{field_placeholder}', " +
                               f"Tipo='{field_type}', Valor='{field_value}', Obrigat√≥rio={field_required}")
        except Exception as e:
            logger.error(f"Erro ao analisar campos do formul√°rio: {str(e)}")
        
        # Conta o n√∫mero total de campos vis√≠veis para determinar o padr√£o (Col√¥mbia vs Equador)
        visible_input_count = len([f for f in form_fields if f["field"].is_displayed()])
        logger.info(f"Total de {visible_input_count} campos de input vis√≠veis detectados")
        
        # 1. Preenche o campo Soluci√≥n (sempre deve ser preenchido, independente do padr√£o)
        solucion_filled = fill_field_by_label(driver, form_modal, 
                                              ["Soluci√≥n", "Solucion", "soluci√≥n", "solucion", "Solution"], 
                                              customer_info["address"])
        if solucion_filled:
            fields_filled += 1
            logger.info("‚úÖ Campo Soluci√≥n preenchido com sucesso")
        else:
            logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Soluci√≥n")
        
        # Se h√° mais de um campo, preenche os outros campos (comportamento padr√£o do Equador)
        if visible_input_count > 1:
            logger.info("Detectados m√∫ltiplos campos - usando o padr√£o completo de preenchimento")
            
            # 2. Preenche o campo Nombre
            nombre_filled = fill_field_by_label(driver, form_modal, 
                                               ["Nombre", "Nome", "Name"], 
                                               customer_info["name"])
            if nombre_filled:
                fields_filled += 1
                logger.info("‚úÖ Campo Nombre preenchido com sucesso")
            else:
                logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Nombre")
                
                # Tenta encontrar e preencher o campo pelo ID ou classe
                try:
                    nombre_inputs = form_modal.find_elements(By.XPATH, "//input[contains(@id, 'nombre') or contains(@id, 'name') or contains(@name, 'nombre') or contains(@name, 'name')]")
                    if nombre_inputs:
                        nombre_input = nombre_inputs[0]
                        if nombre_input.is_displayed():
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", nombre_input)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{customer_info['name']}';", nombre_input)
                            # Dispara eventos para garantir que o site registre a altera√ß√£o
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", nombre_input)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", nombre_input)
                            logger.info("‚úÖ Campo Nombre preenchido via seletor alternativo")
                            fields_filled += 1
                            nombre_filled = True
                except Exception as e:
                    logger.info(f"Erro ao tentar m√©todo alternativo para Nombre: {str(e)}")
            
            # 3. Preenche o campo Direcci√≥n entrega
            direccion_filled = fill_field_by_label(driver, form_modal, 
                                                  ["Direcci√≥n entrega", "Direccion entrega", "Dire√ß√£o entrega", 
                                                   "Direcci√≥n de entrega", "Direccion de entrega", "Delivery address"], 
                                                  customer_info["address"])
            if direccion_filled:
                fields_filled += 1
                logger.info("‚úÖ Campo Direcci√≥n entrega preenchido com sucesso")
            else:
                logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Direcci√≥n entrega")
                
                # Tenta encontrar e preencher o campo pelo ID ou classe
                try:
                    direccion_inputs = form_modal.find_elements(By.XPATH, "//input[contains(@id, 'direccion') or contains(@id, 'address') or contains(@name, 'direccion') or contains(@name, 'address')]")
                    if direccion_inputs:
                        direccion_input = direccion_inputs[0]
                        if direccion_input.is_displayed():
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", direccion_input)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{customer_info['address']}';", direccion_input)
                            # Dispara eventos para garantir que o site registre a altera√ß√£o
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", direccion_input)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", direccion_input)
                            logger.info("‚úÖ Campo Direcci√≥n preenchido via seletor alternativo")
                            fields_filled += 1
                            direccion_filled = True
                except Exception as e:
                    logger.info(f"Erro ao tentar m√©todo alternativo para Direcci√≥n: {str(e)}")
            
            # 4. Preenche o campo Celular
            celular_filled = fill_field_by_label(driver, form_modal, 
                                                ["Celular", "Tel√©fono", "Telefono", "Phone"], 
                                                customer_info["phone"])
            if celular_filled:
                fields_filled += 1
                logger.info("‚úÖ Campo Celular preenchido com sucesso")
            else:
                logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Celular")
                
                # Tenta encontrar e preencher o campo pelo ID ou classe
                try:
                    celular_inputs = form_modal.find_elements(By.XPATH, "//input[contains(@id, 'celular') or contains(@id, 'phone') or contains(@id, 'telefono') or contains(@name, 'celular') or contains(@name, 'phone') or contains(@name, 'telefono')]")
                    if celular_inputs:
                        celular_input = celular_inputs[0]
                        if celular_input.is_displayed():
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", celular_input)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{customer_info['phone']}';", celular_input)
                            # Dispara eventos para garantir que o site registre a altera√ß√£o
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", celular_input)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", celular_input)
                            logger.info("‚úÖ Campo Celular preenchido via seletor alternativo")
                            fields_filled += 1
                            celular_filled = True
                except Exception as e:
                    logger.info(f"Erro ao tentar m√©todo alternativo para Celular: {str(e)}")
        else:
            logger.info("Detectado apenas um campo - usando o padr√£o simplificado da Col√¥mbia")
            # No padr√£o da Col√¥mbia com apenas um campo, j√° preenchemos o Soluci√≥n acima
        
        # 5. Tenta preencher todos os campos obrigat√≥rios vazios
        try:
            logger.info("Verificando se h√° campos obrigat√≥rios n√£o preenchidos...")
            
            # Encontra todos os campos marcados como obrigat√≥rios
            required_inputs = form_modal.find_elements(By.XPATH, "//input[@required]")
            
            logger.info(f"Encontrados {len(required_inputs)} campos obrigat√≥rios")
            
            for idx, input_field in enumerate(required_inputs):
                if input_field.is_displayed():
                    field_value = input_field.get_attribute("value")
                    field_id = input_field.get_attribute("id") or ""
                    field_name = input_field.get_attribute("name") or ""
                    field_type = input_field.get_attribute("type") or ""
                    field_placeholder = input_field.get_attribute("placeholder") or ""
                    
                    # IMPORTANTE: Ignorar o campo de pesquisa
                    if field_name == "textToSearch" or field_placeholder == "Search":
                        logger.info(f"Ignorando campo de pesquisa obrigat√≥rio: ID='{field_id}', Nome='{field_name}'")
                        continue
                    
                    logger.info(f"Campo obrigat√≥rio #{idx}: ID='{field_id}', Nome='{field_name}', Tipo='{field_type}', Valor Atual='{field_value}'")
                    
                    # Se o campo est√° vazio, tenta preench√™-lo com um valor relevante
                    if not field_value:
                        # Determina o melhor valor com base nos atributos do campo
                        value_to_use = ""
                        
                        if "nombre" in field_id.lower() or "nome" in field_id.lower() or "name" in field_id.lower() or \
                           "nombre" in field_name.lower() or "nome" in field_name.lower() or "name" in field_name.lower():
                            value_to_use = customer_info["name"]
                        elif "direccion" in field_id.lower() or "endereco" in field_id.lower() or "address" in field_id.lower() or \
                             "direccion" in field_name.lower() or "endereco" in field_name.lower() or "address" in field_name.lower():
                            value_to_use = customer_info["address"]
                        elif "celular" in field_id.lower() or "telefono" in field_id.lower() or "phone" in field_id.lower() or \
                             "celular" in field_name.lower() or "telefono" in field_name.lower() or "phone" in field_name.lower():
                            value_to_use = customer_info["phone"]
                        elif "solucion" in field_id.lower() or "solution" in field_id.lower() or \
                             "solucion" in field_name.lower() or "solution" in field_name.lower():
                            value_to_use = customer_info["address"]
                        else:
                            # Se n√£o conseguimos determinar, usa o nome para campos de texto
                            if field_type.lower() in ["text", "email", "tel", "url", ""]:
                                value_to_use = customer_info["name"]
                        
                        if value_to_use:
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", input_field)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{value_to_use}';", input_field)
                            # Dispara eventos
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", input_field)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", input_field)
                            logger.info(f"Preenchido campo obrigat√≥rio #{idx} com '{value_to_use}'")
                            fields_filled += 1
        except Exception as e:
            logger.error(f"Erro ao verificar campos obrigat√≥rios: {str(e)}")
        
        # Tirar screenshot ap√≥s preencher todos os campos
        try:
            driver.save_screenshot("form_after_filling.png")
            logger.info("Screenshot do formul√°rio ap√≥s preenchimento salvo")
        except:
            pass
        
        # 7. Verifica se todos os campos foram preenchidos
        try:
            logger.info("Verificando preenchimento final dos campos...")
            
            empty_required_fields = []
            
            # Verifica todos os inputs
            all_inputs = form_modal.find_elements(By.TAG_NAME, "input")
            for input_field in all_inputs:
                if input_field.is_displayed():
                    field_id = input_field.get_attribute("id") or ""
                    field_name = input_field.get_attribute("name") or ""
                    field_value = input_field.get_attribute("value")
                    field_required = input_field.get_attribute("required") == "true" or input_field.get_attribute("required") == ""
                    field_type = input_field.get_attribute("type") or ""
                    field_placeholder = input_field.get_attribute("placeholder") or ""
                    
                    # IMPORTANTE: Ignorar o campo de pesquisa
                    if field_name == "textToSearch" or field_placeholder == "Search":
                        logger.info(f"Ignorando campo de pesquisa na verifica√ß√£o final: ID='{field_id}', Nome='{field_name}'")
                        continue
                    
                    # Ignora campos ocultos, checkbox, radio
                    if field_type.lower() not in ["hidden", "checkbox", "radio"]:
                        if field_required and not field_value:
                            empty_required_fields.append({
                                "id": field_id,
                                "name": field_name,
                                "type": field_type
                            })
            
            if empty_required_fields:
                logger.warning(f"Ainda existem {len(empty_required_fields)} campos obrigat√≥rios vazios:")
                for field in empty_required_fields:
                    logger.warning(f"Campo vazio: ID='{field['id']}', Nome='{field['name']}', Tipo='{field['type']}'")
            else:
                logger.info("Todos os campos obrigat√≥rios est√£o preenchidos!")
        except Exception as e:
            logger.error(f"Erro ao verificar preenchimento final: {str(e)}")
        
        logger.info(f"Total de {fields_filled} campos preenchidos no formul√°rio")
        
        # NOVA VERIFICA√á√ÉO: Se n√£o preencheu nenhum campo, tentar excluir o formul√°rio
        if fields_filled == 0:
            logger.warning("Nenhum campo foi preenchido, tentando excluir o formul√°rio...")
            return click_no_yes_buttons(driver)
            
        return fields_filled > 0
    except Exception as e:
        logger.error(f"Erro ao preencher campos do formul√°rio: {str(e)}")
        return False
    
def handle_empty_data_error(driver, customer_info):
    """Fun√ß√£o mantida para compatibilidade, n√£o √© mais utilizada ativamente."""
    logger.info("Fun√ß√£o handle_empty_data_error chamada, mas n√£o est√° mais em uso ativo.")
    return False

def fill_field_by_label(driver, form_modal, label_texts, value):
    """Preenche um campo espec√≠fico do formul√°rio identificado por texto da label."""
    try:
        logger.info(f"Tentando preencher campo com labels {label_texts}...")
        
        field_found = False
        
        # M√©todo 1: Procura por labels exatas
        for label_text in label_texts:
            try:
                labels = form_modal.find_elements(By.XPATH, f"//label[contains(text(), '{label_text}')]")
                
                for label in labels:
                    if label.is_displayed():
                        logger.info(f"Label encontrada: '{label.text}'")
                        
                        # Procura o campo de input associado ao label
                        input_id = label.get_attribute("for")
                        if input_id:
                            try:
                                input_field = driver.find_element(By.ID, input_id)
                                if input_field.is_displayed():
                                    # Rola at√© o elemento
                                    driver.execute_script("arguments[0].scrollIntoView(true);", input_field)
                                    time.sleep(0.5)
                                    
                                    # Clica no campo para garantir o foco
                                    driver.execute_script("arguments[0].click();", input_field)
                                    
                                    # CORRE√á√ÉO: Limpa completamente o campo usando JavaScript
                                    driver.execute_script("arguments[0].value = '';", input_field)
                                    time.sleep(0.5)
                                    
                                    # CORRE√á√ÉO: Preenche usando apenas JavaScript
                                    driver.execute_script(f"arguments[0].value = '{value}';", input_field)
                                    
                                    # IMPORTANTE: Dispara TODOS os eventos poss√≠veis para garantir que o site reconhe√ßa a mudan√ßa
                                    events = ["input", "change", "blur", "keyup", "keydown"]
                                    for event in events:
                                        driver.execute_script(f"arguments[0].dispatchEvent(new Event('{event}', {{bubbles: true}}));", input_field)
                                    
                                    # Simula intera√ß√£o de teclado
                                    from selenium.webdriver.common.keys import Keys
                                    input_field.send_keys(Keys.TAB)
                                    
                                    # Verifica o valor ap√≥s preenchimento
                                    actual_value = input_field.get_attribute("value")
                                    logger.info(f"Campo '{label_text}' preenchido. Valor atual: {actual_value}")
                                    
                                    field_found = True
                                    return True
                            except Exception as e:
                                logger.info(f"Erro ao preencher campo '{label_text}': {str(e)}")
            except Exception as e:
                logger.info(f"Erro ao buscar label '{label_text}': {str(e)}")
        
        # M√©todo 2: Encontrar qualquer input vis√≠vel pr√≥ximo √† label
        if not field_found:
            for label_text in label_texts:
                try:
                    label_elements = form_modal.find_elements(By.XPATH, f"//*[contains(text(), '{label_text}')]")
                    for label in label_elements:
                        if label.is_displayed():
                            try:
                                # Busca por inputs pr√≥ximos ao label
                                parent = label.find_element(By.XPATH, "./..")
                                nearby_inputs = parent.find_elements(By.TAG_NAME, "input")
                                for input_field in nearby_inputs:
                                    if input_field.is_displayed():
                                        # Rola at√© o elemento
                                        driver.execute_script("arguments[0].scrollIntoView(true);", input_field)
                                        time.sleep(0.5)
                                        
                                        # Clica no campo para garantir o foco
                                        driver.execute_script("arguments[0].click();", input_field)
                                        
                                        # CORRE√á√ÉO: Limpa completamente o campo usando JavaScript
                                        driver.execute_script("arguments[0].value = '';", input_field)
                                        time.sleep(0.5)
                                        
                                        # CORRE√á√ÉO: Preenche usando apenas JavaScript
                                        driver.execute_script(f"arguments[0].value = '{value}';", input_field)
                                        
                                        # IMPORTANTE: Dispara TODOS os eventos poss√≠veis para garantir que o site reconhe√ßa a mudan√ßa
                                        events = ["input", "change", "blur", "keyup", "keydown"]
                                        for event in events:
                                            driver.execute_script(f"arguments[0].dispatchEvent(new Event('{event}', {{bubbles: true}}));", input_field)
                                            
                                        # Simula intera√ß√£o de teclado
                                        from selenium.webdriver.common.keys import Keys
                                        input_field.send_keys(Keys.TAB)
                                        
                                        # Verifica o valor ap√≥s preenchimento
                                        actual_value = input_field.get_attribute("value")
                                        logger.info(f"Campo pr√≥ximo a '{label_text}' preenchido. Valor atual: {actual_value}")
                                        
                                        field_found = True
                                        return True
                            except Exception as e:
                                logger.info(f"Erro ao preencher campo pr√≥ximo a '{label_text}': {str(e)}")
                except Exception as e:
                    logger.info(f"Erro ao buscar elementos com texto '{label_text}': {str(e)}")
        
        if not field_found:
            logger.warning(f"N√£o foi poss√≠vel encontrar campo com labels {label_texts}")
            return False
    except Exception as e:
        logger.error(f"Erro ao preencher campo: {str(e)}")
        return False

def process_current_novelty():
    """Processa a novelty atual na lista."""
    try:
        driver = st.session_state.driver
        
        # Verifica se h√° rows para processar
        if not st.session_state.rows:
            logger.info("Nenhuma novidade encontrada na tabela")
            return True
        
        # Verifica se todas as rows j√° foram processadas
        if st.session_state.current_row_index >= len(st.session_state.rows):
            logger.info("Todas as novelties foram processadas")
            return True
        
        # Vari√°vel para controlar tentativas de recarregamento
        reload_attempts = 0
        max_reload_attempts = 3
        
        # Obt√©m o ID da linha para refer√™ncia
        try:
            # Importante: Precisamos recarregar as linhas da tabela para evitar StaleElementReference
            rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
            
            # Se n√£o encontrou linhas, tenta seletores alternativos
            if not rows:
                logger.info("Tentando seletores alternativos para as linhas da tabela...")
                rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
                
                if not rows:
                    rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
            
            if rows and st.session_state.current_row_index < len(rows):
                row = rows[st.session_state.current_row_index]
                try:
                    row_id = row.find_elements(By.TAG_NAME, "td")[0].text
                    logger.info(f"Processando novelty ID: {row_id} ({st.session_state.current_row_index+1}/{len(rows)})")
                except:
                    row_id = f"Linha {st.session_state.current_row_index+1}"
                    logger.info(f"Processando {row_id}/{len(rows)}")
            else:
                row_id = f"Linha {st.session_state.current_row_index+1}"
                logger.info(f"Processando {row_id} (linhas n√£o dispon√≠veis)")
                
                # MODIFICA√á√ÉO: estrat√©gia mais robusta de recarregamento
                if reload_attempts < max_reload_attempts:
                    logger.warning(f"Linhas da tabela n√£o dispon√≠veis. Tentativa {reload_attempts+1} de {max_reload_attempts} para recarregar a p√°gina...")
                    reload_attempts += 1
                    
                    # Navega diretamente para a p√°gina de novelties para garantir que estamos no lugar certo
                    driver.get("https://app.dropi.co/dashboard/novelties")
                    
                    # Aumenta o tempo de espera ap√≥s recarregar
                    logger.info("Aguardando 10 segundos para carregamento completo da p√°gina...")
                    time.sleep(10)
                    
                    # Tenta configurar a exibi√ß√£o de 1000 entradas novamente
                    try:
                        logger.info("Tentando configurar exibi√ß√£o para 1000 entradas novamente...")
                        configure_entries_display()
                        time.sleep(5)  # Espera adicional ap√≥s configurar
                    except:
                        logger.warning("N√£o foi poss√≠vel configurar exibi√ß√£o para 1000 entradas")
                    
                    # Tenta obter as linhas novamente ap√≥s a configura√ß√£o
                    try:
                        rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
                        
                        if not rows:
                            rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
                            
                            if not rows:
                                rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
                        
                        logger.info(f"Ap√≥s recarregar: {len(rows)} linhas encontradas")
                        
                        if rows and len(rows) > 0:
                            # Atualiza as linhas no state
                            st.session_state.rows = rows
                            logger.info("Linhas atualizadas com sucesso!")
                            return False  # Retorna para tentar processar novamente
                    except Exception as e:
                        logger.error(f"Erro ao tentar obter linhas ap√≥s recarregar: {str(e)}")
                
                # Se chegou aqui, √© porque todas as tentativas de recarregamento falharam
                # Vamos avan√ßar para a pr√≥xima novelty
                if reload_attempts >= max_reload_attempts:
                    logger.error(f"Todas as {max_reload_attempts} tentativas de recarregamento falharam. Avan√ßando para pr√≥xima novelty.")
                    st.session_state.failed_items.append({"id": row_id, "error": "N√£o foi poss√≠vel carregar a tabela ap√≥s m√∫ltiplas tentativas"})
                    st.session_state.failed_count = len(st.session_state.failed_items)
                    
                    # Incrementa o √≠ndice para a pr√≥xima novelty e retorna para tentar novamente
                    st.session_state.current_row_index += 1
                    st.session_state.processed_items = st.session_state.current_row_index
                    st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                    return False
                
                return False  # Retorna para tentar novamente
        except Exception as e:
            logger.error(f"Erro ao obter informa√ß√µes da linha: {str(e)}")
            row_id = f"Linha {st.session_state.current_row_index+1}"
        
        # Atualiza o progresso
        st.session_state.processed_items = st.session_state.current_row_index + 1
        st.session_state.progress = (st.session_state.current_row_index + 1) / st.session_state.total_items
        
        try:
            # Tirar screenshot antes de clicar no bot√£o Save
            try:
                driver.save_screenshot(f"before_save_{row_id}.png")
                logger.info(f"Screenshot antes de salvar: before_save_{row_id}.png")
            except:
                pass
            
            # CORRE√á√ÉO PARA O ERRO STALE ELEMENT: Recarregar o elemento antes de interagir
            logger.info(f"Tentando localizar o bot√£o 'Save' para a novelty {row_id}...")
            try:
                # Recarrega as linhas novamente para garantir que est√£o atuais
                fresh_rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
                
                # Se n√£o encontrou com o seletor padr√£o, tenta seletores alternativos
                if not fresh_rows:
                    fresh_rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
                    
                    if not fresh_rows:
                        fresh_rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
                
                if fresh_rows and st.session_state.current_row_index < len(fresh_rows):
                    current_row = fresh_rows[st.session_state.current_row_index]
                    
                    # MODIFICA√á√ÉO: usa m√∫ltiplos seletores para encontrar o bot√£o Save
                    save_buttons = current_row.find_elements(By.XPATH, ".//button[contains(@class, 'btn-success')]")
                    
                    # Se n√£o encontrou por classe, tenta por texto
                    if not save_buttons:
                        save_buttons = current_row.find_elements(By.XPATH, ".//button[contains(text(), 'Save')]")
                    
                    # Se ainda n√£o encontrou, tenta qualquer bot√£o na linha
                    if not save_buttons:
                        save_buttons = current_row.find_elements(By.TAG_NAME, "button")
                    
                    if save_buttons:
                        save_button = save_buttons[0]
                        
                        # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", save_button)
                        time.sleep(2)  # Aumentado para 2 segundos
                        
                        # Tenta clicar com JavaScript para maior confiabilidade
                        driver.execute_script("arguments[0].click();", save_button)
                        logger.info("Bot√£o 'Save' clicado via JavaScript")
                        
                        # NOVA VERIFICA√á√ÉO: Verificar se a janela ainda existe ap√≥s clicar
                        time.sleep(2)
                        try:
                            # Tenta acessar o t√≠tulo atual para verificar se a janela existe
                            current_title = driver.title
                        except Exception as window_error:
                            logger.warning(f"Janela do navegador foi fechada: {str(window_error)}")
                            # Fecha o driver atual se existir
                            try:
                                if st.session_state.driver:
                                    st.session_state.driver.quit()
                            except:
                                pass
                            
                            # Reconfigura o driver
                            setup_driver()
                            
                            # Reinicia o login e navega√ß√£o
                            if login():
                                navigate_to_novelties()
                                configure_entries_display()
                            
                            # Registra como processado com sucesso
                            st.session_state.success_count += 1
                            logger.info(f"Novelty {row_id} processada com sucesso (janela fechada e reaberta)!")
                            
                            # Avan√ßa para a pr√≥xima novelty
                            st.session_state.current_row_index += 1
                            st.session_state.processed_items = st.session_state.current_row_index
                            st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                            return False
                    else:
                        logger.warning("Bot√£o 'Save' n√£o encontrado na linha atual")
                        # Registra a falha
                        st.session_state.failed_items.append({"id": row_id, "error": "Bot√£o 'Save' n√£o encontrado"})
                        st.session_state.failed_count = len(st.session_state.failed_items)
                        # Incrementa o √≠ndice e continua para a pr√≥xima novelty
                        st.session_state.current_row_index += 1
                        return False
                else:
                    logger.warning("N√£o foi poss√≠vel localizar a linha atual na tabela")
                    # Registra a falha
                    st.session_state.failed_items.append({"id": row_id, "error": "Linha n√£o encontrada na tabela"})
                    st.session_state.failed_count = len(st.session_state.failed_items)
                    # Incrementa o √≠ndice e continua para a pr√≥xima novelty
                    st.session_state.current_row_index += 1
                    return False
            except Exception as e:
                logger.error(f"Erro ao clicar no bot√£o 'Save': {str(e)}")
                # Registra a falha
                st.session_state.failed_items.append({"id": row_id, "error": f"Erro ao clicar no bot√£o 'Save': {str(e)}"})
                st.session_state.failed_count = len(st.session_state.failed_items)
                # Incrementa o √≠ndice e continua para a pr√≥xima novelty
                st.session_state.current_row_index += 1
                return False
            
            # Espera pelo popup - tempo aumentado
            logger.info("Aguardando 5 segundos pelo popup...")
            time.sleep(5)
            
            # Tirar screenshot ap√≥s clicar no bot√£o Save
            try:
                driver.save_screenshot(f"after_save_{row_id}.png")
                logger.info(f"Screenshot ap√≥s salvar: after_save_{row_id}.png")
            except:
                pass
            
            # Tenta diferentes m√©todos para encontrar e clicar no bot√£o "Yes" ou "Sim"
            yes_clicked = False
            
            # M√©todo 1: Procura por texto exato
            for text in ["Yes", "YES"]:
                try:
                    yes_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                    for button in yes_buttons:
                        if button.is_displayed():
                            logger.info(f"Bot√£o com texto '{text}' encontrado, tentando clicar...")
                            
                            # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                            time.sleep(1)
                            
                            # Tenta clicar com JavaScript
                            driver.execute_script("arguments[0].click();", button)
                            logger.info(f"Clicado no bot√£o com texto '{text}' via JavaScript")
                            
                            # Aguarda ap√≥s clicar
                            time.sleep(2)
                            
                            yes_clicked = True
                            break
                    if yes_clicked:
                        break
                except Exception as e:
                    logger.info(f"N√£o foi poss√≠vel clicar no bot√£o '{text}': {str(e)}")
                    continue
            
            # M√©todo 2: Primeiro bot√£o no modal-footer
            if not yes_clicked:
                try:
                    buttons = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal-footer')]/button")
                    if buttons:
                        logger.info("Encontrado bot√£o no modal-footer, tentando clicar...")
                        
                        # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", buttons[0])
                        time.sleep(1)
                        
                        # Tenta clicar com JavaScript
                        driver.execute_script("arguments[0].click();", buttons[0])
                        logger.info("Clicado no primeiro bot√£o do modal-footer via JavaScript")
                        
                        # Aguarda ap√≥s clicar
                        time.sleep(2)
                        
                        yes_clicked = True
                except Exception as e:
                    logger.info(f"Erro ao clicar no bot√£o do modal-footer: {str(e)}")
            
            # M√©todo 3: Qualquer bot√£o primary ou success
            if not yes_clicked:
                try:
                    buttons = driver.find_elements(By.TAG_NAME, "button")
                    for button in buttons:
                        if button.is_displayed():
                            try:
                                button_class = button.get_attribute("class").lower()
                                if "primary" in button_class or "success" in button_class:
                                    logger.info(f"Encontrado bot√£o com classe {button_class}, tentando clicar...")
                                    
                                    # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                                    time.sleep(1)
                                    
                                    # Tenta clicar com JavaScript
                                    driver.execute_script("arguments[0].click();", button)
                                    logger.info(f"Clicado em bot√£o de classe: {button_class} via JavaScript")
                                    
                                    # Aguarda ap√≥s clicar
                                    time.sleep(2)
                                    
                                    yes_clicked = True
                                    break
                            except Exception as e:
                                logger.info(f"Erro ao clicar no bot√£o de classe {button_class}: {str(e)}")
                                continue
                except Exception as e:
                    logger.info(f"Erro ao procurar bot√µes por classe: {str(e)}")
                    
            if not yes_clicked:
                logger.warning("N√£o foi poss√≠vel clicar em 'Yes'/'Sim'. Tentando continuar...")
            
            # Verificar novamente se a janela ainda existe ap√≥s Yes
            try:
                # Tenta acessar o t√≠tulo atual
                current_title = driver.title
            except Exception as window_error:
                logger.warning(f"Janela do navegador foi fechada ap√≥s clicar em Yes: {str(window_error)}")
                # Fecha o driver atual se existir
                try:
                    if st.session_state.driver:
                        st.session_state.driver.quit()
                except:
                    pass
                
                # Reconfigura o driver
                setup_driver()
                
                # Reinicia o login e navega√ß√£o
                if login():
                    navigate_to_novelties()
                    configure_entries_display()
                
                # Registra como processado com sucesso
                st.session_state.success_count += 1
                logger.info(f"Novelty {row_id} processada com sucesso (janela fechada ap√≥s Yes)!")
                
                # Avan√ßa para a pr√≥xima novelty
                st.session_state.current_row_index += 1
                st.session_state.processed_items = st.session_state.current_row_index
                st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                return False
            
            # Espera ap√≥s clicar no bot√£o Yes - tempo aumentado
            logger.info("Aguardando 5 segundos ap√≥s 'Yes'...")
            time.sleep(5)
            
            # Tirar screenshot ap√≥s clicar no bot√£o Yes
            try:
                driver.save_screenshot(f"after_yes_{row_id}.png")
                logger.info(f"Screenshot ap√≥s clicar em Yes: after_yes_{row_id}.png")
            except:
                pass
            
            # Agora vamos tentar encontrar o formul√°rio ou os campos
            logger.info("Procurando campos para preenchimento...")
            
            # Extrai as informa√ß√µes do cliente
            customer_info = extract_customer_info(driver)
            
            # Tenta v√°rias estrat√©gias para encontrar o formul√°rio
            form_found = False
            form_modal = None
            
            # Estrat√©gia 1: Procura pelo modal padr√£o com formul√°rio
            try:
                logger.info("Tentando encontrar o modal com formul√°rio (estrat√©gia 1)...")
                form_modal = WebDriverWait(driver, 7).until(
                    EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal-body')]//form"))
                )
                logger.info("Formul√°rio encontrado com sucesso (estrat√©gia 1)")
                form_found = True
            except Exception as e:
                logger.info(f"N√£o foi poss√≠vel encontrar o formul√°rio padr√£o: {str(e)}")
            
            # Estrat√©gia 2: Procura por qualquer modal vis√≠vel
            if not form_found:
                try:
                    logger.info("Tentando encontrar qualquer modal vis√≠vel (estrat√©gia 2)...")
                    modal = WebDriverWait(driver, 5).until(
                        EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']"))
                    )
                    logger.info("Modal vis√≠vel encontrado, procurando campos dentro dele...")
                    form_modal = modal
                    form_found = True
                except Exception as e:
                    logger.info(f"N√£o foi poss√≠vel encontrar modal vis√≠vel: {str(e)}")
            
            # Estrat√©gia 3: Procura por campos input diretamente
            if not form_found:
                try:
                    logger.info("Tentando encontrar campos input diretamente (estrat√©gia 3)...")
                    inputs = driver.find_elements(By.TAG_NAME, "input")
                    # Filtra apenas inputs vis√≠veis
                    visible_inputs = [inp for inp in inputs if inp.is_displayed()]
                    if visible_inputs:
                        logger.info(f"Encontrados {len(visible_inputs)} inputs vis√≠veis")
                        # Usa o documento inteiro como "form_modal"
                        form_modal = driver.find_element(By.TAG_NAME, "body")
                        form_found = True
                    else:
                        logger.warning("Nenhum input vis√≠vel encontrado na p√°gina")
                except Exception as e:
                    logger.info(f"Erro ao procurar inputs: {str(e)}")
            
            # Se encontrou o formul√°rio ou campos, tenta preencher
            if form_found and form_modal:
                logger.info("Formul√°rio ou campos encontrados, preenchendo...")
                
                # Preenche os campos do formul√°rio
                result = fill_form_fields(driver, form_modal, customer_info)
                
                # Verificar se o formul√°rio foi exclu√≠do via NO+Yes
                if st.session_state.get('form_excluded', False):
                    logger.info("Formul√°rio foi exclu√≠do com sucesso (NO+YES). Prosseguindo para pr√≥xima novelty.")
                    # Reseta o flag
                    st.session_state.form_excluded = False
                    # Incrementa contador de sucesso
                    st.session_state.success_count += 1
                    # Incrementa o √≠ndice para a pr√≥xima novelty
                    st.session_state.current_row_index += 1
                    # Atualiza o progresso
                    st.session_state.processed_items = st.session_state.current_row_index
                    st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                    return False  # Retorna para processar a pr√≥xima novelty
                
                # Clica em Salvar/Guardar se pelo menos um campo foi preenchido
                if result:
                    # Clica em Salvar/Guardar - tentando v√°rios textos
                    save_clicked = click_save_button(driver)
                    
                    # C√ìDIGO REDIRECIONAMENTO - Verifica o erro espec√≠fico "Ups, tenemos el siguiente inconveniente"
                    logger.info("Verificando se apareceu o erro 'Ups, tenemos el siguiente inconveniente'...")
                    try:
                        # Espera um pouco para o popup aparecer
                        time.sleep(3)
                        
                        # Procura pelo texto de erro espec√≠fico
                        error_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Ups, tenemos el siguiente inconveniente')]")
                        
                        if error_elements:
                            logger.warning("Detectado erro 'Ups, tenemos el siguiente inconveniente'")
                            
                            # Tenta tirar um screenshot do erro
                            try:
                                driver.save_screenshot(f"error_ups_{row_id}.png")
                                logger.info(f"Screenshot do erro: error_ups_{row_id}.png")
                            except:
                                pass
                            
                            # Registra o erro
                            error_msg = "Erro 'Ups, tenemos el siguiente inconveniente'"
                            logger.error(f"Erro ao processar novelty {row_id}: {error_msg}")
                            st.session_state.failed_items.append({"id": row_id, "error": error_msg})
                            st.session_state.failed_count = len(st.session_state.failed_items)
                            
                            # Redireciona para a lista de novelties
                            logger.info("Redirecionando para a lista de novelties...")
                            driver.get("https://app.dropi.co/dashboard/novelties")
                            
                            # Aguarda o carregamento da p√°gina
                            time.sleep(5)
                            
                            # Incrementa o √≠ndice para pular esta novelty
                            st.session_state.current_row_index += 1
                            
                            # Atualiza o progresso
                            st.session_state.processed_items = st.session_state.current_row_index
                            st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                            
                            # Retorna False para continuar com a pr√≥xima novelty
                            return False
                    except Exception as e:
                        logger.info(f"Erro ao verificar popup de erro espec√≠fico: {str(e)}")
                    # FIM DO C√ìDIGO REDIRECIONAMENTO
                    
                    # Espera o modal fechar
                    logger.info("Aguardando fechamento do modal de edi√ß√£o...")
                    try:
                        WebDriverWait(driver, 10).until(
                            EC.invisibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']"))
                        )
                        logger.info("Modal fechou com sucesso")
                    except:
                        logger.warning("Modal de edi√ß√£o n√£o fechou em 10 segundos, tentando fechar manualmente...")
                        try:
                            # Tenta for√ßar o fechamento clicando no X
                            close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
                            for button in close_buttons:
                                if button.is_displayed():
                                    driver.execute_script("arguments[0].click();", button)
                                    logger.info("Fechando modal manualmente clicando no X")
                                    break
                        except Exception as e:
                            logger.warning(f"N√£o foi poss√≠vel fechar o modal manualmente: {str(e)}")
                else:
                    logger.warning("Nenhum campo foi preenchido, mas tentando continuar...")
                    try:
                        # Tenta clicar em salvar mesmo assim
                        save_clicked = click_save_button(driver)
                        
                        # C√ìDIGO REDIRECIONAMENTO - Verifica o erro espec√≠fico "Ups, tenemos el siguiente inconveniente"
                        logger.info("Verificando se apareceu o erro 'Ups, tenemos el siguiente inconveniente'...")
                        try:
                            # Espera um pouco para o popup aparecer
                            time.sleep(3)
                            
                            # Procura pelo texto de erro espec√≠fico
                            error_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Ups, tenemos el siguiente inconveniente')]")
                            
                            if error_elements:
                                logger.warning("Detectado erro 'Ups, tenemos el siguiente inconveniente'")
                                
                                # Tenta tirar um screenshot do erro
                                try:
                                    driver.save_screenshot(f"error_ups_{row_id}.png")
                                    logger.info(f"Screenshot do erro: error_ups_{row_id}.png")
                                except:
                                    pass
                                
                                # Registra o erro
                                error_msg = "Erro 'Ups, tenemos el siguiente inconveniente'"
                                logger.error(f"Erro ao processar novelty {row_id}: {error_msg}")
                                st.session_state.failed_items.append({"id": row_id, "error": error_msg})
                                st.session_state.failed_count = len(st.session_state.failed_items)
                                
                                # Redireciona para a lista de novelties
                                logger.info("Redirecionando para a lista de novelties...")
                                driver.get("https://app.dropi.co/dashboard/novelties")
                                
                                # Aguarda o carregamento da p√°gina
                                time.sleep(5)
                                
                                # Incrementa o √≠ndice para pular esta novelty
                                st.session_state.current_row_index += 1
                                
                                # Atualiza o progresso
                                st.session_state.processed_items = st.session_state.current_row_index
                                st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                                
                                # Retorna False para continuar com a pr√≥xima novelty
                                return False
                        except Exception as e:
                            logger.info(f"Erro ao verificar popup de erro espec√≠fico: {str(e)}")
                        # FIM DO C√ìDIGO REDIRECIONAMENTO
                    except:
                        pass
            else:
                logger.warning("N√£o foi poss√≠vel encontrar o formul√°rio ou campos para preencher")
                try:
                    # Tenta continuar mesmo sem encontrar o formul√°rio
                    logger.info("Tentando continuar sem preencher campos...")
                    
                    # Procura por bot√µes de salvar na p√°gina
                    for save_text in ["Guardar", "Salvar", "Save", "GUARDAR", "SALVAR", "SAVE"]:
                        try:
                            save_form_button = driver.find_element(By.XPATH, f"//button[contains(text(), '{save_text}')]")
                            if save_form_button.is_displayed():
                                driver.execute_script("arguments[0].click();", save_form_button)
                                logger.info(f"Clicado no bot√£o '{save_text}' sem preencher campos")
                                
                                # C√ìDIGO REDIRECIONAMENTO - Verifica o erro espec√≠fico "Ups, tenemos el siguiente inconveniente"
                                logger.info("Verificando se apareceu o erro 'Ups, tenemos el siguiente inconveniente'...")
                                try:
                                    # Espera um pouco para o popup aparecer
                                    time.sleep(3)
                                    
                                    # Procura pelo texto de erro espec√≠fico
                                    error_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Ups, tenemos el siguiente inconveniente')]")
                                    
                                    if error_elements:
                                        logger.warning("Detectado erro 'Ups, tenemos el siguiente inconveniente'")
                                        
                                        # Tenta tirar um screenshot do erro
                                        try:
                                            driver.save_screenshot(f"error_ups_{row_id}.png")
                                            logger.info(f"Screenshot do erro: error_ups_{row_id}.png")
                                        except:
                                            pass
                                        
                                        # Registra o erro
                                        error_msg = "Erro 'Ups, tenemos el siguiente inconveniente'"
                                        logger.error(f"Erro ao processar novelty {row_id}: {error_msg}")
                                        st.session_state.failed_items.append({"id": row_id, "error": error_msg})
                                        st.session_state.failed_count = len(st.session_state.failed_items)
                                        
                                        # Redireciona para a lista de novelties
                                        logger.info("Redirecionando para a lista de novelties...")
                                        driver.get("https://app.dropi.co/dashboard/novelties")
                                        
                                        # Aguarda o carregamento da p√°gina
                                        time.sleep(5)
                                        
                                        # Incrementa o √≠ndice para pular esta novelty
                                        st.session_state.current_row_index += 1
                                        
                                        # Atualiza o progresso
                                        st.session_state.processed_items = st.session_state.current_row_index
                                        st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                                        
                                        # Retorna False para continuar com a pr√≥xima novelty
                                        return False
                                except Exception as e:
                                    logger.info(f"Erro ao verificar popup de erro espec√≠fico: {str(e)}")
                                # FIM DO C√ìDIGO REDIRECIONAMENTO
                                
                                break
                        except:
                            continue
                except:
                    pass
            
            # Espera adicional ap√≥s salvar
            time.sleep(5)
            
            # Procura e clica no popup "OK" que aparece ap√≥s salvar
            logger.info("Procurando popup de confirma√ß√£o com bot√£o OK...")
            try:
                # Tira screenshot do popup
                try:
                    driver.save_screenshot(f"popup_ok_{row_id}.png")
                    logger.info(f"Screenshot do popup OK: popup_ok_{row_id}.png")
                except:
                    pass
                
                # Tenta v√°rias estrat√©gias para encontrar e clicar no bot√£o OK
                ok_clicked = False
                
                # M√©todo 1: Bot√£o com texto OK
                for text in ["OK", "Ok", "ok", "Aceptar", "Aceptar", "Aceitar", "aceitar"]:
                    try:
                        ok_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                        for button in ok_buttons:
                            if button.is_displayed():
                                logger.info(f"Bot√£o OK encontrado com texto '{text}', clicando...")
                                driver.execute_script("arguments[0].click();", button)
                                ok_clicked = True
                                break
                        if ok_clicked:
                            break
                    except Exception as e:
                        logger.info(f"Erro ao clicar no bot√£o '{text}': {str(e)}")
                
                # M√©todo 2: Qualquer bot√£o em um modal visible
                if not ok_clicked:
                    try:
                        buttons = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']//button")
                        for button in buttons:
                            if button.is_displayed():
                                logger.info(f"Bot√£o encontrado em modal vis√≠vel: '{button.text}', clicando...")
                                driver.execute_script("arguments[0].click();", button)
                                ok_clicked = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao clicar em bot√£o de modal vis√≠vel: {str(e)}")
                
                # M√©todo 3: Qualquer bot√£o de classe primary ou success
                if not ok_clicked:
                    try:
                        buttons = driver.find_elements(By.TAG_NAME, "button")
                        for button in buttons:
                            if button.is_displayed():
                                try:
                                    button_class = button.get_attribute("class").lower()
                                    if "primary" in button_class or "success" in button_class:
                                        logger.info(f"Bot√£o OK encontrado por classe: '{button.text}', clicando...")
                                        driver.execute_script("arguments[0].click();", button)
                                        ok_clicked = True
                                        break
                                except:
                                    continue
                    except Exception as e:
                        logger.info(f"Erro ao procurar bot√£o OK por classe: {str(e)}")
                
                if ok_clicked:
                    logger.info("Bot√£o OK clicado com sucesso")
                    # Espera adicional ap√≥s clicar em OK
                    time.sleep(2)
                else:
                    logger.warning("N√£o foi poss√≠vel encontrar e clicar no bot√£o OK, continuando mesmo assim")
            except Exception as e:
                logger.warning(f"Erro ao procurar popup OK: {str(e)}")
            
            # Verifica se h√° novas guias abertas
            check_and_close_tabs()
            
            # Incrementa contador de sucesso
            st.session_state.success_count += 1
            logger.info(f"Novelty {row_id} processada com sucesso!")
            
            # Pequena pausa entre processamentos
            time.sleep(1)
            
        except Exception as e:
            # Registra o erro
            error_msg = f"Erro ao processar novelty {row_id}: {str(e)}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            st.session_state.failed_items.append({"id": row_id, "error": str(e)})
            st.session_state.failed_count = len(st.session_state.failed_items)
            
            # Tratamento de erro conforme especificado
            handle_error(row, row_id)
        
        # Incrementa o √≠ndice para a pr√≥xima novelty
        st.session_state.current_row_index += 1
        
        # Verifica se todas as novelties foram processadas
        if st.session_state.current_row_index >= len(st.session_state.rows):
            logger.info("Todas as novelties foram processadas")
            generate_report()
            return True
        
        return False
            
    except Exception as e:
        logger.error(f"Erro geral ao processar novelty: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def click_save_button(driver):
    """Tenta clicar no bot√£o de salvar usando v√°rias estrat√©gias."""
    try:
        logger.info("Tentando clicar no bot√£o de salvar...")
        
        # PAUSA MAIOR: Aumentando para 5 segundos para garantir que o formul√°rio seja completamente validado
        logger.info("Aguardando 5 segundos para garantir que o formul√°rio esteja pronto e validado...")
        time.sleep(5)
        
        # Tirar screenshot antes de tentar salvar
        driver.save_screenshot("before_save_button.png")
        logger.info("Screenshot antes de tentar salvar")
        
        save_clicked = False
        
        # M√©todo 0: Procura especificamente por "SAVE SOLUCION" primeiro (PRIORIDADE M√ÅXIMA)
        try:
            logger.info("Procurando especificamente pelo bot√£o 'SAVE SOLUCION'...")
            
            # Tenta v√°rios formatos e combina√ß√µes de case
            save_solution_patterns = [
                "SAVE SOLUCION", "Save Solucion", "save solucion", 
                "SAVE SOLUTION", "Save Solution", "save solution",
                "SAVE", "Save", "save",
                "GUARDAR", "Guardar", "guardar",
                "ENVIAR", "Enviar", "enviar"
            ]
            
            for pattern in save_solution_patterns:
                save_solution_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{pattern}')]")
                
                if save_solution_buttons:
                    for button in save_solution_buttons:
                        try:
                            if button.is_displayed():
                                logger.info(f"Bot√£o com texto '{pattern}' encontrado, tentando clicar...")
                                
                                # Tirar screenshot antes de clicar
                                driver.save_screenshot(f"before_click_{pattern}.png")
                                
                                # Rola para garantir visibilidade e centraliza
                                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                                time.sleep(1)
                                
                                # IMPORTANTE: Tenta m√∫ltiplos m√©todos de clique
                                try:
                                    # M√©todo 1: Clique direto
                                    button.click()
                                    logger.info(f"Clicado no bot√£o '{pattern}' via clique direto")
                                except Exception as click_error:
                                    logger.info(f"Clique direto falhou: {str(click_error)}, tentando JavaScript...")
                                    try:
                                        # M√©todo 2: JavaScript click
                                        driver.execute_script("arguments[0].click();", button)
                                        logger.info(f"Clicado no bot√£o '{pattern}' via JavaScript")
                                    except Exception as js_error:
                                        logger.info(f"Clique JavaScript falhou: {str(js_error)}, tentando Actions...")
                                        try:
                                            # M√©todo 3: Actions chains
                                            from selenium.webdriver.common.action_chains import ActionChains
                                            actions = ActionChains(driver)
                                            actions.move_to_element(button).click().perform()
                                            logger.info(f"Clicado no bot√£o '{pattern}' via ActionChains")
                                        except Exception as action_error:
                                            logger.info(f"Todos os m√©todos de clique falharam: {str(action_error)}")
                                            continue
                                
                                # Aguarda um pouco ap√≥s clicar
                                time.sleep(2)
                                
                                # Verifica se o bot√£o ainda est√° vis√≠vel (se o clique funcionou, ele pode ter desaparecido)
                                try:
                                    if not button.is_displayed():
                                        logger.info(f"Bot√£o '{pattern}' n√£o est√° mais vis√≠vel ap√≥s o clique - sucesso!")
                                        save_clicked = True
                                        return True
                                except:
                                    # Se der erro ao verificar, provavelmente o bot√£o foi removido do DOM
                                    logger.info(f"Erro ao verificar visibilidade do bot√£o - prov√°vel sucesso!")
                                    save_clicked = True
                                    return True
                                
                                # Se chegou aqui, o bot√£o ainda est√° vis√≠vel
                                logger.info(f"Bot√£o '{pattern}' ainda est√° vis√≠vel ap√≥s o clique, mas considerando como clicado")
                                save_clicked = True
                                return True
                        except Exception as e:
                            logger.info(f"Erro ao tentar clicar no bot√£o '{pattern}': {str(e)}")
                            continue
            
            if not save_clicked:
                logger.info("Nenhum bot√£o SAVE SOLUCION encontrado pelas varia√ß√µes de texto")
        except Exception as e:
            logger.info(f"Erro ao procurar bot√£o 'SAVE SOLUCION': {str(e)}")
        
        # Resto do c√≥digo permanece o mesmo
        # ...
        
        if not save_clicked:
            # √öltimo recurso: Pressiona Enter como se tivesse enviado um formul√°rio
            try:
                logger.info("Tentando enviar o formul√°rio pressionando Enter...")
                from selenium.webdriver.common.keys import Keys
                active_element = driver.switch_to.active_element
                active_element.send_keys(Keys.ENTER)
                logger.info("Tecla Enter enviada para o elemento ativo")
                time.sleep(2)
                save_clicked = True
            except Exception as e:
                logger.info(f"Erro ao enviar Enter: {str(e)}")
        
        # Mesmo que n√£o tenha clicado, aguarda um pouco mais
        time.sleep(3)
        
        return save_clicked
    except Exception as e:
        logger.error(f"Erro ao tentar clicar no bot√£o de salvar: {str(e)}")
        return False

def check_and_close_tabs():
    """Verifica se h√° novas guias abertas e as fecha."""
    try:
        driver = st.session_state.driver
        # Obt√©m todas as guias
        handles = driver.window_handles
        
        # Se houver mais de uma guia, fecha as extras
        if len(handles) > 1:
            current_handle = driver.current_window_handle
            
            for handle in handles:
                if handle != current_handle:
                    driver.switch_to.window(handle)
                    driver.close()
                    st.session_state.closed_tabs += 1
            
            # Volta para a guia principal
            driver.switch_to.window(current_handle)
            logger.info(f"Fechadas {len(handles) - 1} guias extras")
    except Exception as e:
        logger.error(f"Erro ao verificar e fechar guias: {str(e)}")

def handle_error(row, row_id):
    """Trata erros conforme o protocolo especificado."""
    try:
        driver = st.session_state.driver
        logger.info(f"Iniciando tratamento de erro para novelty {row_id}...")
        
        # Tenta fechar qualquer modal/popup aberto
        try:
            logger.info("Tentando fechar popups abertos...")
            close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
            for button in close_buttons:
                if button.is_displayed():
                    button.click()
                    time.sleep(0.5)
        except:
            pass
            
        # Clica novamente no bot√£o Save
        try:
            logger.info(f"Tentando fluxo alternativo para novelty {row_id}...")
            logger.info("Clicando novamente no bot√£o 'Save'...")
            save_button = row.find_element(By.XPATH, ".//button[contains(@class, 'btn-success')]")
            save_button.click()
            
            # Espera pelo popup e clica em "N√£o" desta vez
            logger.info("Procurando e clicando no bot√£o 'N√£o' no popup...")
            nao_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'N√£o')]"))
            )
            nao_button.click()
            
            # No segundo popup, clica em "Sim"
            logger.info("Procurando e clicando no bot√£o 'Sim' no segundo popup...")
            sim_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Sim')]"))
            )
            sim_button.click()
            
            # Aguarda o modal fechar
            time.sleep(2)
            
            logger.info(f"Tratamento alternativo aplicado com sucesso para novelty {row_id}")
        except Exception as e:
            logger.error(f"Erro ao aplicar tratamento alternativo para novelty {row_id}: {str(e)}")
            
            # Tenta fechar todos os popups novamente
            try:
                logger.info("Tentando fechar todos os popups ap√≥s falha no tratamento alternativo...")
                close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
                for button in close_buttons:
                    if button.is_displayed():
                        button.click()
                        time.sleep(0.5)
            except:
                pass
        
        # Verifica se h√° novas guias abertas
        check_and_close_tabs()
            
    except Exception as e:
        logger.error(f"Erro ao tratar erro para novelty {row_id}: {str(e)}")

def generate_report():
    """Gera um relat√≥rio da execu√ß√£o."""
    report = {
        "total_processados": st.session_state.success_count,
        "total_falhas": len(st.session_state.failed_items),
        "itens_com_falha": st.session_state.failed_items,
        "guias_fechadas": st.session_state.closed_tabs,
        "encontrou_paginacao": st.session_state.found_pagination
    }
    
    logger.info("======= RELAT√ìRIO DE EXECU√á√ÉO =======")
    logger.info(f"Total de novelties processadas com sucesso: {report['total_processados']}")
    logger.info(f"Total de novelties com falha: {report['total_falhas']}")
    logger.info(f"Total de guias fechadas durante o processo: {report['guias_fechadas']}")
    logger.info(f"Encontrou op√ß√£o para filtrar 1000 itens: {'Sim' if report['encontrou_paginacao'] else 'N√£o'}")
    
    if report['total_falhas'] > 0:
        logger.info("Detalhes dos itens com falha:")
        for item in report['itens_com_falha']:
            logger.info(f"  - ID: {item['id']}, Erro: {item['error']}")
            
    logger.info("=====================================")
    
    st.session_state.report = report

# Processamento da automa√ß√£o baseado no estado atual
if st.session_state.is_running:
    # Etapas da automa√ß√£o
    if st.session_state.automation_step == 'setup':
        if setup_driver():
            st.session_state.automation_step = 'login'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha ao configurar o driver Chrome")
    
    elif st.session_state.automation_step == 'login':
        if login():
            st.session_state.automation_step = 'navigate'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha no login")
    
    elif st.session_state.automation_step == 'navigate':
        if navigate_to_novelties():
            st.session_state.automation_step = 'configure'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha ao navegar at√© Novelties")
    
    elif st.session_state.automation_step == 'configure':
        if configure_entries_display():
            st.session_state.automation_step = 'process'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha ao configurar exibi√ß√£o de entradas")
    
    elif st.session_state.automation_step == 'process':
        # Processa uma novelty por vez e faz rerun para atualizar a interface
        all_done = process_current_novelty()
        if all_done:
            st.session_state.automation_step = 'complete'
            # Fecha o navegador no final
            logger.info("Fechando o navegador...")
            if st.session_state.driver:
                st.session_state.driver.quit()
                st.session_state.driver = None
            st.session_state.is_running = False
        st.rerun()
    
    elif st.session_state.automation_step == 'complete':
        st.session_state.is_running = False
        st.success("Automa√ß√£o conclu√≠da com sucesso!")

with tab2:
    st.subheader("Relat√≥rio de Execu√ß√µes")
    
    # Filtros de data
    col1, col2 = st.columns(2)
    with col1:
        default_start_date = datetime.datetime.now() - datetime.timedelta(days=30)
        start_date = st.date_input("Data Inicial", value=default_start_date)
    with col2:
        end_date = st.date_input("Data Final", value=datetime.datetime.now())
    
    # Converte as datas para o formato string YYYY-MM-DD
    start_date_str = start_date.strftime("%Y-%m-%d")
    end_date_str = end_date.strftime("%Y-%m-%d") + " 23:59:59"
    
    # Bot√£o para atualizar o relat√≥rio
    if st.button("Atualizar Relat√≥rio", key="update_report"):
        st.session_state.filtered_data = get_execution_history(start_date_str, end_date_str)
    
    # Inicializa a vari√°vel filtered_data
    if 'filtered_data' not in st.session_state:
        st.session_state.filtered_data = get_execution_history(start_date_str, end_date_str)
    
    # Exibe os dados em formato de tabela
    if st.session_state.filtered_data.empty:
        st.info("N√£o h√° dados de execu√ß√£o para o per√≠odo selecionado.")
    else:
        # Formata√ß√£o da tabela
        display_df = st.session_state.filtered_data.copy()
        display_df['execution_date'] = pd.to_datetime(display_df['execution_date'])
        display_df['data_execucao'] = display_df['execution_date'].dt.strftime('%d/%m/%Y %H:%M')
        
        # Renomeia colunas para portugu√™s
        display_df.rename(columns={
            'total_processed': 'Total Processado',
            'successful': 'Sucessos',
            'failed': 'Falhas',
            'execution_time': 'Tempo (segundos)'
        }, inplace=True)
        
        # Exibe a tabela
        display_columns = ['data_execucao', 'Total Processado', 'Sucessos', 'Falhas', 'Tempo (segundos)']
        st.dataframe(display_df[display_columns], width=800)
        
        # Estat√≠sticas
        total_novelties = display_df['Total Processado'].sum()
        total_success = display_df['Sucessos'].sum()
        total_failed = display_df['Falhas'].sum()
        avg_time = display_df['Tempo (segundos)'].mean()
        
        # M√©tricas
        stats_cols = st.columns(4)
        with stats_cols[0]:
            st.metric("Total de Novelties", f"{total_novelties}")
        with stats_cols[1]:
            st.metric("Total de Sucessos", f"{total_success}")
        with stats_cols[2]:
            st.metric("Total de Falhas", f"{total_failed}")
        with stats_cols[3]:
            st.metric("Tempo M√©dio (s)", f"{avg_time:.2f}")