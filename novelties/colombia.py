import streamlit as st
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
from selenium.webdriver.support.ui import Select
import logging
import traceback
from io import StringIO
import sys
import os
import platform
import datetime
import plotly.express as px
from db_connection import get_execution_history  # Certifique-se de importar esta fun√ß√£o
try:
    from db_connection import is_railway
except ImportError:
    def is_railway():
        return "RAILWAY_ENVIRONMENT" in os.environ
    
THIS_COUNTRY = "colombia" # Mude para "chile", "colombia", 

st.markdown("<h1 style='text-align: center;'>üá®üá¥</h1>", unsafe_allow_html=True)
# Adicione o CSS aqui
st.markdown("""
<style>
    .stButton>button {
        border: none !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
    }
    /* Hover effect */
    .stButton>button:hover {
        background-color: #f0f0f0 !important;
    }
</style>
""", unsafe_allow_html=True)

# Verificar e instalar depend√™ncias
def check_dependencies():
    try:
        # Verificar o sistema operacional
        system = platform.system()
        st.sidebar.info(f"Sistema Operacional: {system}")
        
        # Verificar se o Chrome est√° instalado
        if system == "Windows":
            chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
            chrome_path_alt = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
            if os.path.exists(chrome_path) or os.path.exists(chrome_path_alt):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Darwin":  # macOS
            if os.path.exists("/Applications/Google Chrome.app"):
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        elif system == "Linux":
            chrome_exists = os.system("which google-chrome > /dev/null 2>&1") == 0
            if chrome_exists:
                st.sidebar.success("‚úÖ Google Chrome detectado")
            else:
                st.sidebar.error("‚ùå Google Chrome n√£o encontrado. Por favor, instale-o.")
        
        # Verificar m√≥dulos Python
        required_modules = ["selenium", "webdriver_manager", "pandas"]
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            st.sidebar.error(f"‚ùå M√≥dulos faltando: {', '.join(missing_modules)}")
            st.sidebar.info("Execute: pip install " + " ".join(missing_modules))
        else:
            st.sidebar.success("‚úÖ Todos os m√≥dulos Python necess√°rios est√£o instalados")
        
        return len(missing_modules) == 0
    except Exception as e:
        st.sidebar.error(f"Erro ao verificar depend√™ncias: {str(e)}")
        return False

# Inicializa o estado da sess√£o para armazenar logs
if 'log_output' not in st.session_state:
    st.session_state.log_output = StringIO()
if 'is_running' not in st.session_state:
    st.session_state.is_running = False
if 'progress' not in st.session_state:
    st.session_state.progress = 0
if 'total_items' not in st.session_state:
    st.session_state.total_items = 0
if 'processed_items' not in st.session_state:
    st.session_state.processed_items = 0
if 'success_count' not in st.session_state:
    st.session_state.success_count = 0
if 'failed_count' not in st.session_state:
    st.session_state.failed_count = 0
if 'report' not in st.session_state:
    st.session_state.report = None
if 'log_messages' not in st.session_state:
    st.session_state.log_messages = []
if 'has_chromedriver' not in st.session_state:
    st.session_state.has_chromedriver = False
if 'automation_step' not in st.session_state:
    st.session_state.automation_step = 'idle'  # Estados: idle, setup, login, navigate, configure, process, complete
if 'driver' not in st.session_state:
    st.session_state.driver = None
if 'current_row_index' not in st.session_state:
    st.session_state.current_row_index = 0
if 'rows' not in st.session_state:
    st.session_state.rows = []
if 'failed_items' not in st.session_state:
    st.session_state.failed_items = []
if 'closed_tabs' not in st.session_state:
    st.session_state.closed_tabs = 0
if 'found_pagination' not in st.session_state:
    st.session_state.found_pagination = False
if 'show_log' not in st.session_state:
    st.session_state.show_log = False

# Sidebar com informa√ß√µes
st.sidebar.title("Configura√ß√£o")
use_headless = st.sidebar.checkbox("Modo Headless", value=False, 
                               help="Se marcado, o navegador n√£o ser√° exibido na tela. Desmarque para depura√ß√£o.")

# Verificar depend√™ncias
dependencies_ok = check_dependencies()

# Tentar instalar o ChromeDriver
if dependencies_ok and not st.session_state.has_chromedriver:
    with st.sidebar:
        with st.spinner("Instalando ChromeDriver..."):
            try:
                # Tenta instalar o ChromeDriver
                driver_path = ChromeDriverManager().install()
                st.session_state.has_chromedriver = True
                st.sidebar.success(f"‚úÖ ChromeDriver instalado em: {driver_path}")
            except Exception as e:
                st.sidebar.error(f"‚ùå Erro ao instalar ChromeDriver: {str(e)}")
                st.sidebar.info("Por favor, instale manualmente o ChromeDriver compat√≠vel com sua vers√£o do Chrome")

# Configura√ß√£o de logging para o Streamlit
class StreamlitHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        st.session_state.log_output.write(log_entry + '\n')
        
        # Adiciona √† lista de mensagens para exibi√ß√£o em tempo real
        log_type = "info"
        if record.levelno >= logging.ERROR:
            log_type = "error"
        elif record.levelno >= logging.WARNING:
            log_type = "warning"
            
        st.session_state.log_messages.append({
            "type": log_type,
            "message": log_entry
        })

logger = logging.getLogger("dropi_automation")
logger.setLevel(logging.INFO)
# Limpa handlers existentes para evitar duplica√ß√£o
if logger.handlers:
    logger.handlers = []
handler = StreamlitHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

tab1, tab2 = st.tabs(["Execu√ß√£o Manual", "Relat√≥rio"])
with tab1:
    # Interface do usu√°rio - agora em linhas em vez de colunas
    st.subheader("Execu√ß√£o Manual")

# Define as credenciais diretamente no c√≥digo (n√£o vis√≠veis no UI)
# Use suas credenciais reais aqui
EMAIL_CREDENTIALS = "viniciuschegouoperacional@gmail.com"
PASSWORD_CREDENTIALS = "123456cC"

# Interface do usu√°rio com layout reformulado
with st.form("automation_form"):
    # Bot√£o para iniciar automa√ß√£o centralizado (sem borda grande)
    submit_button = st.form_submit_button("Iniciar Automa√ß√£o", use_container_width=True)
    
    # Aviso de depend√™ncias abaixo do bot√£o se necess√°rio
    if not dependencies_ok or not st.session_state.has_chromedriver:
        st.warning("‚ö†Ô∏è Verifica√ß√£o de depend√™ncias falhou. Veja o painel lateral.")
    
    if submit_button:
        if st.session_state.is_running:
            st.warning("Automa√ß√£o j√° est√° em execu√ß√£o.")
        elif not dependencies_ok:
            st.error("N√£o √© poss√≠vel iniciar a automa√ß√£o. Verifique as depend√™ncias no painel lateral.")
        elif not st.session_state.has_chromedriver:
            st.error("ChromeDriver n√£o instalado. Verifique o painel lateral.")
        else:
            # Inicia a automa√ß√£o diretamente (sem thread)
            st.session_state.is_running = True
            st.session_state.log_output = StringIO()  # Limpa o log anterior
            st.session_state.log_messages = []  # Limpa as mensagens de log
            st.session_state.progress = 0
            st.session_state.total_items = 0
            st.session_state.processed_items = 0
            st.session_state.success_count = 0
            st.session_state.failed_count = 0
            st.session_state.report = None
            st.session_state.automation_step = 'setup'
            st.session_state.current_row_index = 0
            st.session_state.rows = []
            st.session_state.failed_items = []
            st.session_state.closed_tabs = 0
            st.session_state.found_pagination = False
            st.session_state.email = EMAIL_CREDENTIALS
            st.session_state.password = PASSWORD_CREDENTIALS
            st.session_state.use_headless = use_headless
            st.success("Iniciando automa√ß√£o... Aguarde.")
            st.rerun()

# Status em uma linha pr√≥pria (agora fora do formul√°rio)
if st.session_state.is_running:
    st.info("‚úÖ Automa√ß√£o em execu√ß√£o...")
    
    # Bot√£o para parar a automa√ß√£o
    if st.button("Parar Automa√ß√£o"):
        st.session_state.is_running = False
        
        # Fecha o navegador se estiver aberto
        if st.session_state.driver:
            try:
                st.session_state.driver.quit()
            except:
                pass
            st.session_state.driver = None
            
        st.warning("Automa√ß√£o interrompida pelo usu√°rio.")
        st.rerun()
else:
    if st.session_state.report:
        st.success("‚úÖ Automa√ß√£o conclu√≠da!")
    elif st.session_state.processed_items > 0:
        st.warning("‚ö†Ô∏è Automa√ß√£o interrompida.")
    else:
        st.info("‚è∏Ô∏è Aguardando in√≠cio da automa√ß√£o.")

# M√©tricas com bordas individuais
st.markdown("""
<style>
    .metric-container {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        margin: 5px;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

cols = st.columns(3)
with cols[0]:
    st.markdown(
        f'<div class="metric-container"><p>Novelties Processadas</p><h1>{st.session_state.processed_items}</h1></div>', 
        unsafe_allow_html=True
    )
with cols[1]:
    st.markdown(
        f'<div class="metric-container"><p>Sucesso</p><h1>{st.session_state.success_count}</h1></div>', 
        unsafe_allow_html=True
    )
with cols[2]:
    st.markdown(
        f'<div class="metric-container"><p>Falhas</p><h1>{st.session_state.failed_count}</h1></div>', 
        unsafe_allow_html=True
    )

# Barra de progresso
if st.session_state.total_items > 0:
    st.progress(st.session_state.progress)
    st.caption(f"Progresso: {st.session_state.processed_items}/{st.session_state.total_items} items")

# Linha divis√≥ria 
st.markdown("<hr style='margin: 20px 0; border-top: 1px solid #ddd;'>", unsafe_allow_html=True)

# Toggle para mostrar/ocultar o log completo
show_log = st.checkbox("Mostrar Log Completo", value=st.session_state.show_log)
st.session_state.show_log = show_log

# Exibe o log completo apenas se o checkbox estiver marcado
if st.session_state.show_log:
    log_container = st.container()
    log_container.text_area("Log Completo", value=st.session_state.log_output.getvalue(), height=400)

# Se houver um relat√≥rio, exibe-o
if st.session_state.report and not st.session_state.is_running:
    st.subheader("Relat√≥rio de Execu√ß√£o")
    
    report = st.session_state.report
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Processado", report.get("total_processados", 0))
    with col2:
        st.metric("Total Falhas", report.get("total_falhas", 0))
    with col3:
        st.metric("Guias Fechadas", report.get("guias_fechadas", 0))
    
    # Se houver falhas, exibe os detalhes
    if report.get("total_falhas", 0) > 0:
        st.subheader("Detalhes das Falhas")
        
        # Cria um DataFrame com os itens que falharam
        failures_df = pd.DataFrame(report.get("itens_com_falha", []))
        st.dataframe(failures_df)

# Fun√ß√µes de automa√ß√£o (adaptadas para serem executadas passo a passo)
def setup_driver():
    """Configura o driver do Selenium."""
    logger.info("Iniciando configura√ß√£o do driver Chrome...")
    
    chrome_options = Options()
    
    # No Railway sempre use headless
    if is_railway() or st.session_state.use_headless:
        logger.info("Modo headless ativado")
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
    else:
        logger.info("Modo headless desativado - navegador ser√° vis√≠vel")
    
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--page-load-strategy=eager")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    
    try:
        if is_railway():
            # No Railway, usa o Chrome j√° instalado pelo Dockerfile
            logger.info("Inicializando o driver Chrome no Railway...")
            service = Service()
            driver = webdriver.Chrome(service=service, options=chrome_options)
        else:
            # Localmente, usa o webdriver_manager
            logger.info("Inicializando o driver Chrome localmente...")
            driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=chrome_options
            )
            
        logger.info("Driver do Chrome iniciado com sucesso")
        st.session_state.driver = driver
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar o driver Chrome: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def verify_authentication():
    """Verifica se o usu√°rio est√° autenticado."""
    try:
        driver = st.session_state.driver
        current_url = driver.current_url
        page_text = driver.find_element(By.TAG_NAME, "body").text.lower()
        
        # Indicadores de que N√ÉO est√° autenticado
        auth_failure_indicators = [
            "login" in current_url,
            "auth" in current_url,
            "registrarme" in page_text,
            "crear cuenta" in page_text,
            "iniciar sesi√≥n" in page_text,
            "sign in" in page_text
        ]
        
        if any(auth_failure_indicators):
            logger.error("USU√ÅRIO N√ÉO EST√Å AUTENTICADO!")
            return False
        
        # Indicadores de que EST√Å autenticado
        auth_success_indicators = [
            "dashboard" in current_url,
            "orders" in current_url,
            "novelties" in current_url,
            "pedidos" in page_text,
            "dashboard" in page_text
        ]
        
        if any(auth_success_indicators):
            logger.info("Usu√°rio autenticado com sucesso")
            return True
        
        logger.warning("Status de autentica√ß√£o incerto")
        return False
        
    except Exception as e:
        logger.error(f"Erro ao verificar autentica√ß√£o: {e}")
        return False

def login():
    """Fun√ß√£o de login super robusta - VERS√ÉO CORRIGIDA."""
    try:
        driver = st.session_state.driver
        
        # Abre o site em uma nova janela maximizada
        driver.maximize_window()
        
        # Navega para a p√°gina de login
        logger.info("Navegando para a p√°gina de login...")
        driver.get("https://app.dropi.co/auth/login")  # URL mais espec√≠fica
        time.sleep(5)
        
        # Aguarda a p√°gina carregar completamente
        logger.info("Aguardando carregamento completo da p√°gina...")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # Tira screenshot para an√°lise
        driver.save_screenshot("login_page.png")
        logger.info("Screenshot da p√°gina salvo como login_page.png")
        
        # Encontra e preenche o campo de email
        logger.info("Preenchendo campo de email...")
        try:
            email_field = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, "email"))
            )
            email_field.clear()
            email_field.send_keys(st.session_state.email)
            logger.info(f"Email preenchido: {st.session_state.email}")
        except Exception as e:
            logger.error(f"Erro ao preencher email: {e}")
            return False
        
        # Encontra e preenche o campo de senha
        logger.info("Preenchendo campo de senha...")
        try:
            password_field = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, "password"))
            )
            password_field.clear()
            password_field.send_keys(st.session_state.password)
            logger.info("Senha preenchida")
        except Exception as e:
            logger.error(f"Erro ao preencher senha: {e}")
            return False
        
        # CORRE√á√ÉO PRINCIPAL: Melhor tratamento do bot√£o de login
        logger.info("Tentando clicar no bot√£o de login...")
        try:
            # M√©todo 1: JavaScript click (mais confi√°vel)
            login_button = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'Iniciar Sesi√≥n')]"))
            )
            
            # Rola at√© o bot√£o para garantir visibilidade
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", login_button)
            time.sleep(2)
            
            # Clica usando JavaScript (evita problemas de intercepta√ß√£o)
            driver.execute_script("arguments[0].click();", login_button)
            logger.info("Clicado no bot√£o de login via JavaScript")
            
        except Exception as e:
            logger.warning(f"Erro no m√©todo JavaScript: {e}")
            
            # M√©todo 2: Tenta com ActionChains
            try:
                from selenium.webdriver.common.action_chains import ActionChains
                login_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Iniciar Sesi√≥n')]")
                actions = ActionChains(driver)
                actions.move_to_element(login_button).click().perform()
                logger.info("Clicado no bot√£o de login via ActionChains")
            except Exception as e2:
                logger.warning(f"Erro no m√©todo ActionChains: {e2}")
                
                # M√©todo 3: Enviar ENTER no formul√°rio
                try:
                    from selenium.webdriver.common.keys import Keys
                    password_field.send_keys(Keys.ENTER)
                    logger.info("Login enviado via ENTER")
                except Exception as e3:
                    logger.error(f"Todos os m√©todos de login falharam: {e3}")
                    return False
        
        # Aguarda o redirecionamento ap√≥s login
        logger.info("Aguardando redirecionamento ap√≥s login...")
        time.sleep(8)
        
        # Verifica se o login foi bem-sucedido
        current_url = driver.current_url
        logger.info(f"URL ap√≥s login: {current_url}")
        
        # Verifica se foi redirecionado para dashboard ou orders
        if any(path in current_url for path in ["/dashboard", "/orders", "/novelties"]):
            logger.info("Login confirmado - redirecionado com sucesso")
            return True
        else:
            logger.warning(f"Login pode ter falhado - URL atual: {current_url}")
            # Tenta verificar se h√° elementos que indicam login bem-sucedido
            try:
                # Procura por elementos que s√≥ aparecem quando logado
                dashboard_elements = driver.find_elements(By.XPATH, 
                    "//*[contains(text(), 'Dashboard') or contains(text(), 'Orders') or contains(text(), 'Pedidos')]")
                if dashboard_elements:
                    logger.info("Login confirmado - elementos do dashboard encontrados")
                    return True
            except:
                pass
            
            return False
            
    except Exception as e:
        logger.error(f"Erro geral no login: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def navigate_to_novelties():
    """Navega at√© a p√°gina de novelties - VERS√ÉO CORRIGIDA."""
    try:
        driver = st.session_state.driver
        
        # CORRE√á√ÉO: Navega diretamente para a URL correta
        logger.info("Navegando diretamente para a p√°gina de novelties...")
        driver.get("https://app.dropi.co/dashboard/novelties")  # URL CORRIGIDA
        time.sleep(8)  # Aguarda carregamento
        
        # Verifica se a p√°gina carregou corretamente
        current_url = driver.current_url
        logger.info(f"URL atual ap√≥s navega√ß√£o: {current_url}")
        
        # Verifica se est√° na p√°gina correta
        if "novelties" not in current_url:
            logger.warning("N√£o conseguiu acessar a p√°gina de novelties, tentando m√©todo alternativo...")
            
            # Tenta navegar atrav√©s do menu
            try:
                # Vai para dashboard primeiro
                driver.get("https://app.dropi.co/dashboard")
                time.sleep(5)
                
                # Procura pelo link de novelties
                novelties_links = driver.find_elements(By.XPATH, 
                    "//a[contains(@href, 'novelties') or contains(text(), 'Novelties')]")
                
                if novelties_links:
                    logger.info("Link de novelties encontrado, clicando...")
                    driver.execute_script("arguments[0].click();", novelties_links[0])
                    time.sleep(5)
                else:
                    logger.warning("Link de novelties n√£o encontrado no menu")
                    return False
                    
            except Exception as e:
                logger.error(f"Erro na navega√ß√£o alternativa: {e}")
                return False
        
        # Aguarda a tabela carregar
        logger.info("Aguardando carregamento da tabela de novelties...")
        try:
            # Aguarda at√© 20 segundos pela tabela
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.TAG_NAME, "table"))
            )
            logger.info("Tabela de novelties carregada com sucesso!")
        except TimeoutException:
            logger.warning("Timeout aguardando tabela, mas continuando...")
            
            # Verifica se h√° mensagem de "sem dados"
            page_text = driver.find_element(By.TAG_NAME, "body").text.lower()
            if any(text in page_text for text in ["no data", "no hay", "sem dados", "vazio"]):
                logger.info("P√°gina indica que n√£o h√° novelties para processar")
            else:
                logger.warning("Tabela n√£o encontrada e sem mensagem clara sobre dados")
        
        # Tira screenshot da p√°gina final
        driver.save_screenshot("novelties_page_final.png")
        logger.info("Screenshot da p√°gina de novelties salvo")
        
        return True
        
    except Exception as e:
        logger.error(f"Erro ao navegar at√© Novelties: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def configure_entries_display():
    """Configura para exibir 1000 entradas - VERS√ÉO CORRIGIDA."""
    try:
        driver = st.session_state.driver
        
        # Aguarda a p√°gina estar completamente carregada
        logger.info("Aguardando p√°gina estar completamente carregada...")
        time.sleep(5)
        
        # Verifica se h√° dados na p√°gina primeiro
        page_text = driver.find_element(By.TAG_NAME, "body").text
        logger.info(f"Verificando conte√∫do da p√°gina...")
        logger.info(f"Conte√∫do da p√°gina (primeiros 500 chars): {page_text[:500]}")
        logger.info(f"URL atual: {driver.current_url}")
        logger.info(f"T√≠tulo da p√°gina: {driver.title}")
        
        # Se a p√°gina cont√©m texto de registro/login, h√° um problema de autentica√ß√£o
        if any(text in page_text.lower() for text in ["registrarme", "crear cuenta", "dropshipper", "login", "iniciar sesi√≥n"]):
            logger.error("ERRO: P√°gina mostra conte√∫do de registro/login - usu√°rio n√£o est√° autenticado!")
            logger.error("A automa√ß√£o precisa fazer login novamente")
            return False
        
        # Procura pela tabela de novelties
        logger.info("Procurando tabela de novelties...")
        tables = driver.find_elements(By.TAG_NAME, "table")
        
        if not tables:
            logger.warning("Nenhuma tabela encontrada na p√°gina")
            # Verifica se h√° mensagem espec√≠fica sobre dados
            if any(text in page_text.lower() for text in ["no hay novelties", "no data", "sem dados"]):
                logger.info("P√°gina indica explicitamente que n√£o h√° novelties")
                st.session_state.rows = []
                st.session_state.total_items = 0
                return True
            else:
                logger.error("Nenhuma tabela encontrada e sem mensagem clara sobre status dos dados")
                return False
        
        # Se h√° tabela, procura pelo controle de pagina√ß√£o
        logger.info("Procurando controle de pagina√ß√£o...")
        
        # Rola at√© o final da p√°gina
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)
        
        # CORRE√á√ÉO: Busca mais robusta pelo select de pagina√ß√£o
        select_found = False
        
        # Tenta diferentes estrat√©gias para encontrar o select
        select_strategies = [
            "//select[contains(@class, 'form-select')]",
            "//select[contains(@class, 'custom-select')]", 
            "//select[@name='select']",
            "//select[@id='select']",
            "//select",
            "//div[contains(@class, 'dataTables_length')]//select",
            "//*[contains(@class, 'pagination')]//select"
        ]
        
        for strategy in select_strategies:
            try:
                select_elements = driver.find_elements(By.XPATH, strategy)
                if select_elements:
                    logger.info(f"Select encontrado usando estrat√©gia: {strategy}")
                    
                    for select_element in select_elements:
                        if select_element.is_displayed():
                            # Verifica se tem op√ß√£o para 1000
                            select = Select(select_element)
                            options = [option.text for option in select.options]
                            logger.info(f"Op√ß√µes dispon√≠veis: {options}")
                            
                            # Tenta selecionar 1000 se dispon√≠vel
                            if any("1000" in str(option) for option in options):
                                try:
                                    # Tenta diferentes formas de selecionar 1000
                                    for option in select.options:
                                        if "1000" in option.text:
                                            select.select_by_visible_text(option.text)
                                            logger.info(f"Selecionado: {option.text}")
                                            select_found = True
                                            break
                                    
                                    if select_found:
                                        time.sleep(8)  # Aguarda recarregamento
                                        break
                                        
                                except Exception as e:
                                    logger.info(f"Erro ao selecionar 1000: {e}")
                            else:
                                logger.info("Op√ß√£o 1000 n√£o dispon√≠vel, usando configura√ß√£o padr√£o")
                                select_found = True
                                break
                    
                    if select_found:
                        break
                        
            except Exception as e:
                logger.info(f"Estrat√©gia {strategy} falhou: {e}")
                continue
        
        if not select_found:
            logger.warning("Controle de pagina√ß√£o n√£o encontrado, usando configura√ß√£o padr√£o")
        
        # Volta para o topo
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(2)
        
        # CORRE√á√ÉO: Busca mais robusta pelas linhas da tabela
        logger.info("Contando linhas da tabela...")
        
        # Aguarda um pouco mais para carregamento
        time.sleep(5)
        
        # Estrat√©gias m√∫ltiplas para encontrar linhas
        row_strategies = [
            "//table/tbody/tr",
            "//table//tr[position() > 1]",  # Pula header
            "//tr[td]",  # Linhas que t√™m c√©lulas
            "//tbody/tr",
            ".//tr"
        ]
        
        rows_found = []
        for strategy in row_strategies:
            try:
                potential_rows = driver.find_elements(By.XPATH, strategy)
                visible_rows = [row for row in potential_rows if row.is_displayed()]
                
                # Filtra linhas que realmente cont√™m dados (t√™m pelo menos 3 c√©lulas)
                data_rows = []
                for row in visible_rows:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if len(cells) >= 3:  # Linha com dados reais
                        data_rows.append(row)
                
                if data_rows:
                    logger.info(f"Estrat√©gia '{strategy}' encontrou {len(data_rows)} linhas com dados")
                    rows_found = data_rows
                    break
                    
            except Exception as e:
                logger.info(f"Estrat√©gia de linhas '{strategy}' falhou: {e}")
                continue
        
        # Atualiza o estado
        st.session_state.rows = rows_found
        st.session_state.total_items = len(rows_found)
        
        logger.info(f"RESULTADO FINAL: {len(rows_found)} novelties encontradas para processar")
        
        # Tira screenshot final
        driver.save_screenshot("table_final_count.png")
        
        return True
        
    except Exception as e:
        logger.error(f"Erro ao configurar exibi√ß√£o de entradas: {str(e)}")
        logger.error(traceback.format_exc())
        return False
    
def extract_customer_info(driver):
    """Extrai informa√ß√µes do cliente da p√°gina, incluindo nome, endere√ßo e telefone."""
    try:
        logger.info("Extraindo informa√ß√µes do cliente...")
        
        # Tira screenshot para an√°lise
        try:
            driver.save_screenshot("page_for_customer_info.png")
            logger.info("Screenshot para busca de informa√ß√µes do cliente salvo")
        except:
            pass
        
        customer_info = {
            "address": "",
            "name": "",
            "phone": ""
        }
        
        # Procura pelo cabe√ßalho "ORDERS TO:"
        try:
            header_info = driver.find_elements(By.XPATH, "//*[contains(text(), 'ORDERS TO:')]")
            
            if header_info:
                for element in header_info:
                    try:
                        # Tenta pegar o texto do elemento pai
                        parent = element.find_element(By.XPATH, "./..")
                        parent_text = parent.text
                        logger.info(f"Texto no elemento pai de ORDERS TO: {parent_text}")
                        
                        # Separar as linhas para extrair as informa√ß√µes
                        lines = parent_text.split('\n')
                        if len(lines) > 1:
                            for i, line in enumerate(lines):
                                if "ORDERS TO:" in line:
                                    # O nome geralmente est√° uma linha ap√≥s ORDERS TO:
                                    if i + 1 < len(lines):
                                        customer_info["name"] = lines[i + 1]
                                        logger.info(f"Nome encontrado: {customer_info['name']}")
                                    
                                    # O endere√ßo geralmente est√° duas linhas ap√≥s ORDERS TO:
                                    if i + 2 < len(lines):
                                        customer_info["address"] = lines[i + 2]
                                        logger.info(f"Endere√ßo encontrado: {customer_info['address']}")
                                    
                                    break
                    except Exception as e:
                        logger.info(f"Erro ao extrair de ORDERS TO:: {str(e)}")
        except Exception as e:
            logger.info(f"Erro ao buscar ORDERS TO:: {str(e)}")
        
        # Procura pelo campo de telefone - procura por texto com "Telf."
        try:
            phone_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Telf.')]")
            for element in phone_elements:
                element_text = element.text
                logger.info(f"Elemento com 'Telf.' encontrado: {element_text}")
                
                # Extrai o n√∫mero de telefone
                if "Telf." in element_text:
                    phone_parts = element_text.split("Telf.")
                    if len(phone_parts) > 1:
                        customer_info["phone"] = phone_parts[1].strip()
                        logger.info(f"Telefone encontrado: {customer_info['phone']}")
                        break
        except Exception as e:
            logger.info(f"Erro ao buscar telefone: {str(e)}")
        
        # Se n√£o encontrou alguma informa√ß√£o, tenta m√©todos alternativos para cada uma
        
        # M√©todo alternativo para nome
        if not customer_info["name"]:
            try:
                # Tenta buscar por elementos que podem conter o nome do cliente
                for name_keyword in ["Client:", "Cliente:", "Nombre:", "Name:"]:
                    name_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{name_keyword}')]")
                    for element in name_elements:
                        try:
                            element_text = element.text
                            if name_keyword in element_text:
                                parts = element_text.split(name_keyword)
                                if len(parts) > 1:
                                    customer_info["name"] = parts[1].strip()
                                    logger.info(f"Nome encontrado (m√©todo alt): {customer_info['name']}")
                                    break
                        except:
                            pass
                    if customer_info["name"]:
                        break
            except Exception as e:
                logger.info(f"Erro ao buscar nome (m√©todo alt): {str(e)}")
        
        # M√©todo alternativo para endere√ßo
        if not customer_info["address"]:
            try:
                # Tenta buscar por elementos com palavras-chave de endere√ßo
                for address_keyword in ["Avenida", "Calle", "Rua", "Carretera", "Street", "Av.", "Av ", "Calz"]:
                    address_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{address_keyword}')]")
                    for element in address_elements:
                        try:
                            element_text = element.text
                            if len(element_text) > 10:  # Filtra textos muito curtos
                                customer_info["address"] = element_text
                                logger.info(f"Endere√ßo encontrado (m√©todo alt): {customer_info['address']}")
                                break
                        except:
                            pass
                    if customer_info["address"]:
                        break
            except Exception as e:
                logger.info(f"Erro ao buscar endere√ßo (m√©todo alt): {str(e)}")
        
        # M√©todo alternativo para telefone
        if not customer_info["phone"]:
            try:
                # Tenta buscar por elementos com palavras-chave de telefone
                for phone_keyword in ["Phone:", "Tel√©fono:", "Telefono:", "Tel:", "Tel."]:
                    phone_elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{phone_keyword}')]")
                    for element in phone_elements:
                        try:
                            element_text = element.text
                            if phone_keyword in element_text:
                                parts = element_text.split(phone_keyword)
                                if len(parts) > 1:
                                    customer_info["phone"] = parts[1].strip()
                                    logger.info(f"Telefone encontrado (m√©todo alt): {customer_info['phone']}")
                                    break
                        except:
                            pass
                    if customer_info["phone"]:
                        break
            except Exception as e:
                logger.info(f"Erro ao buscar telefone (m√©todo alt): {str(e)}")
        
        # Valores padr√£o para campos n√£o encontrados
        if not customer_info["name"]:
            customer_info["name"] = "Nome do Cliente"
            logger.warning("Nome do cliente n√£o encontrado, usando valor padr√£o")
        
        if not customer_info["address"]:
            customer_info["address"] = "Endere√ßo de Entrega"
            logger.warning("Endere√ßo n√£o encontrado, usando valor padr√£o")
        
        if not customer_info["phone"]:
            customer_info["phone"] = "N√£o informado"
            logger.warning("Telefone n√£o encontrado, usando valor padr√£o")
            
        return customer_info
    except Exception as e:
        logger.error(f"Erro ao extrair informa√ß√µes do cliente: {str(e)}")
        return {
            "address": "Endere√ßo de Entrega",
            "name": "Nome do Cliente",
            "phone": "N√£o informado"
        }

def handle_dropdown_solution_form(driver, form_modal, customer_info):
    """Fun√ß√£o especializada para lidar com o formul√°rio que tem um dropdown de Soluci√≥n."""
    try:
        logger.info("Detectado formul√°rio com dropdown de Soluci√≥n - usando o c√≥digo espec√≠fico...")
        
        # Tirar screenshot antes de qualquer intera√ß√£o
        try:
            driver.save_screenshot("before_dropdown_interaction.png")
            logger.info("Screenshot antes da intera√ß√£o com dropdown")
        except:
            pass
        
        # PASSO 1: Encontrar o dropdown usando o seletor espec√≠fico baseado no HTML inspecionado
        select_element = None
        select_found = False
        
        try:
            # Busca espec√≠fica pelo select dentro da div com "Soluci√≥n"
            logger.info("Buscando pelo elemento select espec√≠fico...")
            
            # Tenta encontrar o select usando v√°rios seletores (do mais espec√≠fico para o mais gen√©rico)
            selectors = [
                "//div[contains(text(), 'Soluci√≥n')]/select[contains(@class, 'form-select')]",
                "//div[contains(@class, 'form-group')]/select[contains(@class, 'form-select')]",
                "//div[contains(text(), 'Soluci√≥n')]//select",
                "//select[contains(@class, 'form-select')]",
                "//select"
            ]
            
            for selector in selectors:
                select_elements = driver.find_elements(By.XPATH, selector)
                if select_elements:
                    for element in select_elements:
                        if element.is_displayed():
                            select_element = element
                            select_found = True
                            logger.info(f"Select encontrado usando o seletor: {selector}")
                            break
                    if select_found:
                        break
            
            if not select_found:
                logger.info("√öltimo recurso: procurando por qualquer elemento select em qualquer lugar")
                select_elements = driver.find_elements(By.TAG_NAME, "select")
                for element in select_elements:
                    if element.is_displayed():
                        select_element = element
                        select_found = True
                        logger.info("Select encontrado usando busca por tag")
                        break
        except Exception as e:
            logger.info(f"Erro ao buscar select: {str(e)}")
        
        # Se n√£o encontrou o select, tentar clicar em NO e depois Yes
        if not select_element:
            logger.error("N√£o foi poss√≠vel encontrar o elemento select")
            return click_no_yes_buttons(driver)
        
        # PASSO 2: Verificar se a op√ß√£o desejada existe
        option_exists = False
        try:
            # Lista todas as op√ß√µes dispon√≠veis para depura√ß√£o
            select = Select(select_element)
            options = select.options
            logger.info(f"Op√ß√µes dispon√≠veis no select ({len(options)}):")
            
            # MUDAN√áA CR√çTICA: Verificar explicitamente se a op√ß√£o existe
            for i, option in enumerate(options):
                option_text = option.text.lower().strip()
                option_value = option.get_attribute("value")
                logger.info(f"  Op√ß√£o {i}: texto='{option_text}', valor='{option_value}'")
                
                # Verificar por diferentes varia√ß√µes do texto
                if "entregar en nueva direcci√≥n" in option_text or "entregar en nueva direccion" in option_text:
                    option_exists = True
                    logger.info(f"Op√ß√£o 'Entregar en nueva direcci√≥n' encontrada na posi√ß√£o {i}")
            
            # MUDAN√áA CR√çTICA: Se a op√ß√£o n√£o existir, clique em NO e depois Yes
            if not option_exists:
                logger.warning("Op√ß√£o 'Entregar en nueva direcci√≥n' N√ÉO encontrada! Tentando excluir o formul√°rio...")
                return click_no_yes_buttons(driver)
                
        except Exception as e:
            logger.error(f"Erro ao verificar op√ß√µes do select: {str(e)}")
            # Se houver qualquer erro na verifica√ß√£o, tente excluir o formul√°rio
            logger.warning("Erro ao verificar op√ß√µes. Tentando excluir o formul√°rio...")
            return click_no_yes_buttons(driver)
        
        # PASSO 3: Selecionar a op√ß√£o "Entregar en nueva direcci√≥n" diretamente
        option_selected = False
        
        try:
            # Rola at√© o elemento para garantir que est√° vis√≠vel
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", select_element)
            time.sleep(1)
            
            # M√©todo 1: Usando a classe Select do Selenium
            try:
                logger.info("Tentando selecionar com a classe Select...")
                select = Select(select_element)
                
                # Tenta selecionar pelo texto vis√≠vel
                select.select_by_visible_text("Entregar en nueva direcci√≥n")
                logger.info("Op√ß√£o selecionada pelo texto vis√≠vel")
                option_selected = True
            except Exception as e:
                logger.info(f"Erro ao selecionar pelo texto vis√≠vel: {str(e)}")
                
                # Tenta selecionar pelo valor - sabemos que √© "2: Object"
                try:
                    select.select_by_value("2: Object")
                    logger.info("Op√ß√£o selecionada pelo valor '2: Object'")
                    option_selected = True
                except Exception as e:
                    logger.info(f"Erro ao selecionar pelo valor: {str(e)}")
                    
                    # Tenta selecionar pelo √≠ndice (a op√ß√£o "Entregar en nueva direcci√≥n" √© a terceira = √≠ndice 2)
                    try:
                        select.select_by_index(2)
                        logger.info("Op√ß√£o selecionada pelo √≠ndice 2")
                        option_selected = True
                    except Exception as e:
                        logger.info(f"Erro ao selecionar pelo √≠ndice: {str(e)}")
        except Exception as e:
            logger.info(f"Erro ao usar a classe Select: {str(e)}")
        
        # M√©todo 2: Usando JavaScript direto
        if not option_selected:
            try:
                logger.info("Tentando selecionar usando JavaScript...")
                
                # Define o valor diretamente via JavaScript
                driver.execute_script("arguments[0].value = '2: Object';", select_element)
                
                # Dispara evento de change para atualizar a interface
                driver.execute_script("arguments[0].dispatchEvent(new Event('change', { 'bubbles': true }));", select_element)
                
                logger.info("Valor '2: Object' configurado via JavaScript")
                option_selected = True
            except Exception as e:
                logger.info(f"Erro ao selecionar via JavaScript: {str(e)}")
        
        # Tirar screenshot ap√≥s selecionar a op√ß√£o
        try:
            driver.save_screenshot("after_option_selected.png")
            logger.info("Screenshot ap√≥s selecionar op√ß√£o")
        except:
            pass
        
        # Espera para o dropdown processar a sele√ß√£o
        time.sleep(3)
        
        # Se n√£o conseguiu selecionar, tenta excluir o item
        if not option_selected:
            logger.warning("N√£o foi poss√≠vel selecionar a op√ß√£o, tentando excluir...")
            return click_no_yes_buttons(driver)
        
        # PASSO 4: Preencher os campos "Detalle adicional" e "Direcci√≥n entrega"
        # com o endere√ßo do cliente
        fields_filled = 0
        
        logger.info("Preenchendo campos ap√≥s selecionar a op√ß√£o...")
        
        # Preenche o campo "Detalle adicional de la soluci√≥n"
        try:
            # M√©todo 1: Usando fill_field_by_label
            detalle_filled = fill_field_by_label(driver, form_modal, 
                                                ["Detalle adicional de la soluci√≥n", "Detalle adicional"], 
                                                customer_info["address"])
            
            # M√©todo 2: Tentar encontrar por placeholder ou atributos
            if not detalle_filled:
                detalles = driver.find_elements(By.XPATH, "//textarea | //input[contains(@placeholder, 'Detalle') or contains(@id, 'detalle') or contains(@name, 'detalle')]")
                for detalle in detalles:
                    if detalle.is_displayed():
                        driver.execute_script("arguments[0].value = '';", detalle)
                        time.sleep(0.5)
                        driver.execute_script(f"arguments[0].value = '{customer_info['address']}';", detalle)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", detalle)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", detalle)
                        logger.info("Campo 'Detalle adicional' preenchido via m√©todo alternativo")
                        detalle_filled = True
                        fields_filled += 1
                        break
            else:
                fields_filled += 1
                logger.info("Campo 'Detalle adicional' preenchido com sucesso")
        except Exception as e:
            logger.info(f"Erro ao preencher campo 'Detalle adicional': {str(e)}")
        
        # Preenche o campo "Direcci√≥n entrega"
        try:
            # M√©todo 1: Usando fill_field_by_label
            direccion_filled = fill_field_by_label(driver, form_modal, 
                                                 ["Direcci√≥n entrega", "Direcci√≥n de entrega"], 
                                                 customer_info["address"])
            
            # M√©todo 2: Tentar encontrar por placeholder ou atributos
            if not direccion_filled:
                direcciones = driver.find_elements(By.XPATH, "//input[contains(@placeholder, 'direcci√≥n') or contains(@id, 'direccion') or contains(@name, 'direccion') or contains(@id, 'address') or contains(@name, 'address')]")
                for direccion in direcciones:
                    if direccion.is_displayed():
                        driver.execute_script("arguments[0].value = '';", direccion)
                        time.sleep(0.5)
                        driver.execute_script(f"arguments[0].value = '{customer_info['address']}';", direccion)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", direccion)
                        driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", direccion)
                        logger.info("Campo 'Direcci√≥n entrega' preenchido via m√©todo alternativo")
                        direccion_filled = True
                        fields_filled += 1
                        break
            else:
                fields_filled += 1
                logger.info("Campo 'Direcci√≥n entrega' preenchido com sucesso")
        except Exception as e:
            logger.info(f"Erro ao preencher campo 'Direcci√≥n entrega': {str(e)}")
        
        # Tirar screenshot ap√≥s preencher os campos
        try:
            driver.save_screenshot("after_fields_filled.png")
            logger.info("Screenshot ap√≥s preencher os campos")
        except:
            pass
        
        logger.info(f"Total de {fields_filled} campos preenchidos ap√≥s selecionar a op√ß√£o")
        return fields_filled > 0
            
    except Exception as e:
        logger.error(f"Erro ao processar formul√°rio com dropdown: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def click_no_yes_buttons(driver):
    """Fun√ß√£o para clicar em NO e depois Yes quando n√£o podemos processar o formul√°rio."""
    try:
        logger.info("Tentando clicar em NO e depois Yes para excluir o formul√°rio...")
        
        # Procura e clica no bot√£o "No"
        no_clicked = False
        try:
            # Procura bot√µes com texto "NO" ou classe de bot√£o danger (vermelho)
            no_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'NO') or contains(@class, 'btn-danger')]")
            for button in no_buttons:
                if button.is_displayed():
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", button)
                    logger.info("Clicado no bot√£o 'NO' via JavaScript")
                    time.sleep(2)
                    no_clicked = True
                    break
            
            if not no_clicked:
                logger.warning("N√£o foi poss√≠vel encontrar ou clicar no bot√£o 'NO'")
                return False
            
            # Agora procura e clica no bot√£o "Yes" para confirmar
            yes_clicked = False
            
            # Procura por diferentes varia√ß√µes de "Yes"
            for text in ["Yes", "YES"]:
                yes_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                for button in yes_buttons:
                    if button.is_displayed():
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                        time.sleep(1)
                        driver.execute_script("arguments[0].click();", button)
                        logger.info(f"Clicado no bot√£o '{text}' via JavaScript para confirmar exclus√£o")
                        time.sleep(2)
                        yes_clicked = True
                        break
                
                if yes_clicked:
                    break
            
            if not yes_clicked:
                logger.warning("N√£o foi poss√≠vel encontrar ou clicar no bot√£o Yes ap√≥s NO")
                return False
            
            logger.info("Exclus√£o do formul√°rio confirmada com sucesso (NO + Yes)")
            
            # Sinaliza que o formul√°rio foi exclu√≠do com sucesso
            st.session_state.form_excluded = True
            
            # Aguarda para ter certeza que tudo processou
            time.sleep(5)
            
            # Retorna True para indicar sucesso e pular para o pr√≥ximo item
            return True
            
        except Exception as e:
            logger.error(f"Erro ao clicar nos bot√µes NO/Yes: {str(e)}")
            return False
    except Exception as e:
        logger.error(f"Erro ao tentar excluir formul√°rio: {str(e)}")
        return False

def handle_simple_three_field_form(driver, form_modal, customer_info):
    """Fun√ß√£o corrigida para lidar com o formul√°rio simples de 3 campos."""
    try:
        logger.info("Detectado formul√°rio simples de 3 campos - usando tratamento espec√≠fico...")
        
        driver.save_screenshot("before_simple_form_interaction.png")
        logger.info("Screenshot antes da intera√ß√£o com formul√°rio simples")
        
        fields_filled = 0
        
        # CAMPO 1: Preenche "Soluci√≥n" com o endere√ßo
        logger.info("Preenchendo campo 'Soluci√≥n'...")
        solucion_filled = fill_field_by_label(driver, form_modal, 
                                            ["Soluci√≥n", "Solucion"], 
                                            customer_info["address"])
        if solucion_filled:
            fields_filled += 1
            logger.info("‚úÖ Campo 'Soluci√≥n' preenchido com sucesso")
        else:
            logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo 'Soluci√≥n'")
        
        # CAMPO 2: Preenche "Confirmar direcci√≥n destinatario" - BUSCA MELHORADA
        logger.info("Preenchendo campo 'Confirmar direcci√≥n destinatario'...")
        direccion_filled = False
        
        # Tenta v√°rias varia√ß√µes do nome do campo
        direccion_variations = [
            "Confirmar direcci√≥n destinatario",
            "Confirmar direccion destinatario", 
            "confirmar direccion",
            "direccion destinatario",
            "direccion",
            "address"
        ]
        
        for variation in direccion_variations:
            if direccion_filled:
                break
            direccion_filled = fill_field_by_label(driver, form_modal, [variation], customer_info["address"])
        
        if direccion_filled:
            fields_filled += 1
            logger.info("‚úÖ Campo 'Confirmar direcci√≥n destinatario' preenchido com sucesso")
        else:
            logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo 'Confirmar direcci√≥n destinatario'")
        
        # CAMPO 3: Preenche "Confirmar celular destinatario" - BUSCA MELHORADA
        logger.info("Preenchendo campo 'Confirmar celular destinatario'...")
        celular_filled = False
        
        # Tenta v√°rias varia√ß√µes do nome do campo
        celular_variations = [
            "Confirmar celular destinatario",
            "confirmar celular",
            "celular destinatario", 
            "celular",
            "telefono",
            "phone"
        ]
        
        for variation in celular_variations:
            if celular_filled:
                break
            celular_filled = fill_field_by_label(driver, form_modal, [variation], customer_info["phone"])
        
        if celular_filled:
            fields_filled += 1
            logger.info("‚úÖ Campo 'Confirmar celular destinatario' preenchido com sucesso")
        else:
            logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo 'Confirmar celular destinatario'")
        
        driver.save_screenshot("after_simple_form_filled.png")
        logger.info("Screenshot ap√≥s preencher formul√°rio simples")
        
        logger.info(f"Total de {fields_filled} campos preenchidos no formul√°rio simples")
        
        # CRIT√âRIO MAIS RIGOROSO: Exige pelo menos 2 campos preenchidos
        if fields_filled >= 2:
            logger.info("‚úÖ Formul√°rio considerado preenchido com sucesso (2+ campos)")
            return True
        else:
            logger.warning("‚ùå Formul√°rio n√£o foi preenchido adequadamente (menos de 2 campos)")
            return False
            
    except Exception as e:
        logger.error(f"Erro ao processar formul√°rio simples de 3 campos: {str(e)}")
        return False

def fill_form_fields(driver, form_modal, customer_info):
    """Preenche os campos do formul√°rio com as informa√ß√µes do cliente."""
    try:
        logger.info("Analisando tipo de formul√°rio...")
        
        # NOVA VERIFICA√á√ÉO: Detecta formul√°rio simples de 3 campos
        simple_form_exists = False
        try:
            # Verifica se tem os 3 campos espec√≠ficos do novo formato
            simple_field_indicators = [
                "Soluci√≥n",
                "Confirmar direcci√≥n destinatario", 
                "Confirmar celular destinatario"
            ]
            
            fields_found = 0
            for field_name in simple_field_indicators:
                # Busca por labels ou placeholders com esses textos
                elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{field_name}') or contains(@placeholder, '{field_name}')]")
                if elements:
                    fields_found += 1
                    logger.info(f"Campo encontrado: {field_name}")
            
            # Se encontrou pelo menos 2 dos 3 campos espec√≠ficos, √© o formato simples
            if fields_found >= 2:
                simple_form_exists = True
                logger.info("Detectado formul√°rio simples de 3 campos")
                
            # Verifica tamb√©m pela presen√ßa do bot√£o "SAVE SOLUTION"
            if not simple_form_exists:
                save_solution_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'SAVE SOLUTION')]")
                if save_solution_buttons:
                    simple_form_exists = True
                    logger.info("Detectado formul√°rio simples pela presen√ßa do bot√£o 'SAVE SOLUTION'")
                    
        except Exception as e:
            logger.info(f"Erro ao verificar formul√°rio simples: {str(e)}")
        
        # Se detectou o formul√°rio simples, usa a fun√ß√£o especializada
        if simple_form_exists:
            logger.info("Usando tratamento para formul√°rio simples de 3 campos")
            return handle_simple_three_field_form(driver, form_modal, customer_info)
        
        # Verifica se existe um select de Soluci√≥n (detec√ß√£o mais precisa)
        dropdown_exists = False
        try:
            # Busca espec√≠fica pelo elemento select
            select_elements = []
            
            # Tenta encontrar o select explicitamente relacionado √† Soluci√≥n
            select_elements = driver.find_elements(By.XPATH, "//div[contains(text(), 'Soluci√≥n')]/select")
            
            if not select_elements:
                select_elements = driver.find_elements(By.XPATH, "//div[contains(@class, 'form-group')][contains(text(), 'Soluci√≥n')]//select")
            
            # Se encontrou algum select, verifica se tem a op√ß√£o espec√≠fica "Entregar en nueva direcci√≥n"
            if select_elements:
                for select_element in select_elements:
                    if select_element.is_displayed():
                        # Verifica se tem a op√ß√£o espec√≠fica
                        try:
                            options = select_element.find_elements(By.TAG_NAME, "option")
                            for option in options:
                                if "entregar en nueva direcci√≥n" in option.text.lower():
                                    dropdown_exists = True
                                    logger.info("Detectado formul√°rio com dropdown para Soluci√≥n e op√ß√£o 'Entregar en nueva direcci√≥n'")
                                    break
                            if dropdown_exists:
                                break
                        except:
                            # Se n√£o conseguir verificar as op√ß√µes, ainda pode ser um dropdown
                            pass
            
            # Se n√£o encontrou pelo select com op√ß√µes, faz uma verifica√ß√£o de fallback
            if not dropdown_exists:
                # Verifica especificamente pela estrutura HTML que voc√™ compartilhou
                form_html = form_modal.get_attribute("innerHTML").lower()
                if "select" in form_html and "soluci√≥n" in form_html and "entregar en nueva direcci√≥n" in form_html:
                    dropdown_exists = True
                    logger.info("Detectado formul√°rio com dropdown de Soluci√≥n via HTML interno")
        except Exception as e:
            logger.info(f"Erro ao verificar tipo de formul√°rio: {str(e)}")
        
        # Se detectou que √© o formato com dropdown, usa a fun√ß√£o especializada
        if dropdown_exists:
            logger.info("Detectado formul√°rio com dropdown de Soluci√≥n. Usando tratamento especializado.")
            return handle_dropdown_solution_form(driver, form_modal, customer_info)
        
        # Caso contr√°rio, continua com o fluxo normal
        logger.info("Usando fluxo normal de preenchimento de formul√°rio...")
        fields_filled = 0
        
        # Caso contr√°rio, continua com o fluxo normal
        logger.info("Usando fluxo normal de preenchimento de formul√°rio...")
        fields_filled = 0
        
        # Resto do c√≥digo original para preencher formul√°rios padr√£o
        # Primeiro vamos encontrar todos os campos do formul√°rio para entender o que precisa ser preenchido
        form_fields = []
        try:
            # Tirar screenshot do formul√°rio para an√°lise
            driver.save_screenshot("form_before_filling.png")
            logger.info("Screenshot do formul√°rio antes de preencher salvo")
            
            # Encontra todas as labels vis√≠veis no formul√°rio
            labels = form_modal.find_elements(By.TAG_NAME, "label")
            visible_labels = [label for label in labels if label.is_displayed()]
            
            logger.info(f"Total de {len(visible_labels)} labels vis√≠veis encontradas no formul√°rio")
            
            # Lista todas as labels encontradas no log
            for idx, label in enumerate(visible_labels):
                label_text = label.text.strip()
                label_for = label.get_attribute("for")
                logger.info(f"Label #{idx}: Texto='{label_text}', For='{label_for}'")
                
                # Verifica se h√° um campo associado
                if label_for:
                    try:
                        input_field = driver.find_element(By.ID, label_for)
                        if input_field.is_displayed():
                            field_type = input_field.get_attribute("type")
                            field_value = input_field.get_attribute("value")
                            field_required = input_field.get_attribute("required")
                            
                            form_fields.append({
                                "label": label_text,
                                "field": input_field,
                                "type": field_type,
                                "value": field_value,
                                "required": field_required == "true" or field_required == ""
                            })
                            
                            logger.info(f"Campo associado encontrado: Tipo='{field_type}', Valor='{field_value}', Obrigat√≥rio={field_required}")
                    except:
                        logger.info(f"N√£o foi poss√≠vel encontrar campo para label '{label_text}'")
            
            # Se n√£o encontrou campos por labels, tenta encontrar todos os inputs
            if not form_fields:
                logger.info("Tentando encontrar todos os campos de input vis√≠veis...")
                inputs = form_modal.find_elements(By.TAG_NAME, "input")
                visible_inputs = [inp for inp in inputs if inp.is_displayed()]
                
                logger.info(f"Total de {len(visible_inputs)} inputs vis√≠veis encontrados")
                
                for idx, input_field in enumerate(visible_inputs):
                    field_id = input_field.get_attribute("id")
                    field_name = input_field.get_attribute("name")
                    field_placeholder = input_field.get_attribute("placeholder")
                    field_type = input_field.get_attribute("type")
                    field_value = input_field.get_attribute("value")
                    field_required = input_field.get_attribute("required")
                    
                    # IMPORTANTE: Ignorar o campo de pesquisa
                    if field_name == "textToSearch" or field_placeholder == "Search":
                        logger.info(f"Ignorando campo de pesquisa: ID='{field_id}', Nome='{field_name}', Placeholder='{field_placeholder}'")
                        continue
                    
                    # Tenta determinar a label pelo contexto
                    label_text = field_placeholder or field_name or field_id or f"Campo #{idx}"
                    
                    form_fields.append({
                        "label": label_text,
                        "field": input_field,
                        "type": field_type,
                        "value": field_value,
                        "required": field_required == "true" or field_required == ""
                    })
                    
                    logger.info(f"Input #{idx}: ID='{field_id}', Nome='{field_name}', Placeholder='{field_placeholder}', " +
                               f"Tipo='{field_type}', Valor='{field_value}', Obrigat√≥rio={field_required}")
        except Exception as e:
            logger.error(f"Erro ao analisar campos do formul√°rio: {str(e)}")
        
        # Conta o n√∫mero total de campos vis√≠veis para determinar o padr√£o (Col√¥mbia vs Equador)
        visible_input_count = len([f for f in form_fields if f["field"].is_displayed()])
        logger.info(f"Total de {visible_input_count} campos de input vis√≠veis detectados")
        
        # 1. Preenche o campo Soluci√≥n (sempre deve ser preenchido, independente do padr√£o)
        solucion_filled = fill_field_by_label(driver, form_modal, 
                                              ["Soluci√≥n", "Solucion", "soluci√≥n", "solucion", "Solution"], 
                                              customer_info["address"])
        if solucion_filled:
            fields_filled += 1
            logger.info("‚úÖ Campo Soluci√≥n preenchido com sucesso")
        else:
            logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Soluci√≥n")
        
        # Se h√° mais de um campo, preenche os outros campos (comportamento padr√£o do Equador)
        if visible_input_count > 1:
            logger.info("Detectados m√∫ltiplos campos - usando o padr√£o completo de preenchimento")
            
            # 2. Preenche o campo Nombre
            nombre_filled = fill_field_by_label(driver, form_modal, 
                                               ["Nombre", "Nome", "Name"], 
                                               customer_info["name"])
            if nombre_filled:
                fields_filled += 1
                logger.info("‚úÖ Campo Nombre preenchido com sucesso")
            else:
                logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Nombre")
                
                # Tenta encontrar e preencher o campo pelo ID ou classe
                try:
                    nombre_inputs = form_modal.find_elements(By.XPATH, "//input[contains(@id, 'nombre') or contains(@id, 'name') or contains(@name, 'nombre') or contains(@name, 'name')]")
                    if nombre_inputs:
                        nombre_input = nombre_inputs[0]
                        if nombre_input.is_displayed():
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", nombre_input)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{customer_info['name']}';", nombre_input)
                            # Dispara eventos para garantir que o site registre a altera√ß√£o
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", nombre_input)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", nombre_input)
                            logger.info("‚úÖ Campo Nombre preenchido via seletor alternativo")
                            fields_filled += 1
                            nombre_filled = True
                except Exception as e:
                    logger.info(f"Erro ao tentar m√©todo alternativo para Nombre: {str(e)}")
            
            # 3. Preenche o campo Direcci√≥n entrega
            direccion_filled = fill_field_by_label(driver, form_modal, 
                                                  ["Direcci√≥n entrega", "Direccion entrega", "Dire√ß√£o entrega", 
                                                   "Direcci√≥n de entrega", "Direccion de entrega", "Delivery address"], 
                                                  customer_info["address"])
            if direccion_filled:
                fields_filled += 1
                logger.info("‚úÖ Campo Direcci√≥n entrega preenchido com sucesso")
            else:
                logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Direcci√≥n entrega")
                
                # Tenta encontrar e preencher o campo pelo ID ou classe
                try:
                    direccion_inputs = form_modal.find_elements(By.XPATH, "//input[contains(@id, 'direccion') or contains(@id, 'address') or contains(@name, 'direccion') or contains(@name, 'address')]")
                    if direccion_inputs:
                        direccion_input = direccion_inputs[0]
                        if direccion_input.is_displayed():
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", direccion_input)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{customer_info['address']}';", direccion_input)
                            # Dispara eventos para garantir que o site registre a altera√ß√£o
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", direccion_input)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", direccion_input)
                            logger.info("‚úÖ Campo Direcci√≥n preenchido via seletor alternativo")
                            fields_filled += 1
                            direccion_filled = True
                except Exception as e:
                    logger.info(f"Erro ao tentar m√©todo alternativo para Direcci√≥n: {str(e)}")
            
            # 4. Preenche o campo Celular
            celular_filled = fill_field_by_label(driver, form_modal, 
                                                ["Celular", "Tel√©fono", "Telefono", "Phone"], 
                                                customer_info["phone"])
            if celular_filled:
                fields_filled += 1
                logger.info("‚úÖ Campo Celular preenchido com sucesso")
            else:
                logger.warning("‚ùå N√£o foi poss√≠vel preencher o campo Celular")
                
                # Tenta encontrar e preencher o campo pelo ID ou classe
                try:
                    celular_inputs = form_modal.find_elements(By.XPATH, "//input[contains(@id, 'celular') or contains(@id, 'phone') or contains(@id, 'telefono') or contains(@name, 'celular') or contains(@name, 'phone') or contains(@name, 'telefono')]")
                    if celular_inputs:
                        celular_input = celular_inputs[0]
                        if celular_input.is_displayed():
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", celular_input)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{customer_info['phone']}';", celular_input)
                            # Dispara eventos para garantir que o site registre a altera√ß√£o
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", celular_input)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", celular_input)
                            logger.info("‚úÖ Campo Celular preenchido via seletor alternativo")
                            fields_filled += 1
                            celular_filled = True
                except Exception as e:
                    logger.info(f"Erro ao tentar m√©todo alternativo para Celular: {str(e)}")
        else:
            logger.info("Detectado apenas um campo - usando o padr√£o simplificado da Col√¥mbia")
            # No padr√£o da Col√¥mbia com apenas um campo, j√° preenchemos o Soluci√≥n acima
        
        # 5. Tenta preencher todos os campos obrigat√≥rios vazios
        try:
            logger.info("Verificando se h√° campos obrigat√≥rios n√£o preenchidos...")
            
            # Encontra todos os campos marcados como obrigat√≥rios
            required_inputs = form_modal.find_elements(By.XPATH, "//input[@required]")
            
            logger.info(f"Encontrados {len(required_inputs)} campos obrigat√≥rios")
            
            for idx, input_field in enumerate(required_inputs):
                if input_field.is_displayed():
                    field_value = input_field.get_attribute("value")
                    field_id = input_field.get_attribute("id") or ""
                    field_name = input_field.get_attribute("name") or ""
                    field_type = input_field.get_attribute("type") or ""
                    field_placeholder = input_field.get_attribute("placeholder") or ""
                    
                    # IMPORTANTE: Ignorar o campo de pesquisa
                    if field_name == "textToSearch" or field_placeholder == "Search":
                        logger.info(f"Ignorando campo de pesquisa obrigat√≥rio: ID='{field_id}', Nome='{field_name}'")
                        continue
                    
                    logger.info(f"Campo obrigat√≥rio #{idx}: ID='{field_id}', Nome='{field_name}', Tipo='{field_type}', Valor Atual='{field_value}'")
                    
                    # Se o campo est√° vazio, tenta preench√™-lo com um valor relevante
                    if not field_value:
                        # Determina o melhor valor com base nos atributos do campo
                        value_to_use = ""
                        
                        if "nombre" in field_id.lower() or "nome" in field_id.lower() or "name" in field_id.lower() or \
                           "nombre" in field_name.lower() or "nome" in field_name.lower() or "name" in field_name.lower():
                            value_to_use = customer_info["name"]
                        elif "direccion" in field_id.lower() or "endereco" in field_id.lower() or "address" in field_id.lower() or \
                             "direccion" in field_name.lower() or "endereco" in field_name.lower() or "address" in field_name.lower():
                            value_to_use = customer_info["address"]
                        elif "celular" in field_id.lower() or "telefono" in field_id.lower() or "phone" in field_id.lower() or \
                             "celular" in field_name.lower() or "telefono" in field_name.lower() or "phone" in field_name.lower():
                            value_to_use = customer_info["phone"]
                        elif "solucion" in field_id.lower() or "solution" in field_id.lower() or \
                             "solucion" in field_name.lower() or "solution" in field_name.lower():
                            value_to_use = customer_info["address"]
                        else:
                            # Se n√£o conseguimos determinar, usa o nome para campos de texto
                            if field_type.lower() in ["text", "email", "tel", "url", ""]:
                                value_to_use = customer_info["name"]
                        
                        if value_to_use:
                            # Limpa e preenche
                            driver.execute_script("arguments[0].value = '';", input_field)
                            time.sleep(0.5)
                            driver.execute_script(f"arguments[0].value = '{value_to_use}';", input_field)
                            # Dispara eventos
                            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", input_field)
                            driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", input_field)
                            logger.info(f"Preenchido campo obrigat√≥rio #{idx} com '{value_to_use}'")
                            fields_filled += 1
        except Exception as e:
            logger.error(f"Erro ao verificar campos obrigat√≥rios: {str(e)}")
        
        # Tirar screenshot ap√≥s preencher todos os campos
        try:
            driver.save_screenshot("form_after_filling.png")
            logger.info("Screenshot do formul√°rio ap√≥s preenchimento salvo")
        except:
            pass
        
        # 7. Verifica se todos os campos foram preenchidos
        try:
            logger.info("Verificando preenchimento final dos campos...")
            
            empty_required_fields = []
            
            # Verifica todos os inputs
            all_inputs = form_modal.find_elements(By.TAG_NAME, "input")
            for input_field in all_inputs:
                if input_field.is_displayed():
                    field_id = input_field.get_attribute("id") or ""
                    field_name = input_field.get_attribute("name") or ""
                    field_value = input_field.get_attribute("value")
                    field_required = input_field.get_attribute("required") == "true" or input_field.get_attribute("required") == ""
                    field_type = input_field.get_attribute("type") or ""
                    field_placeholder = input_field.get_attribute("placeholder") or ""
                    
                    # IMPORTANTE: Ignorar o campo de pesquisa
                    if field_name == "textToSearch" or field_placeholder == "Search":
                        logger.info(f"Ignorando campo de pesquisa na verifica√ß√£o final: ID='{field_id}', Nome='{field_name}'")
                        continue
                    
                    # Ignora campos ocultos, checkbox, radio
                    if field_type.lower() not in ["hidden", "checkbox", "radio"]:
                        if field_required and not field_value:
                            empty_required_fields.append({
                                "id": field_id,
                                "name": field_name,
                                "type": field_type
                            })
            
            if empty_required_fields:
                logger.warning(f"Ainda existem {len(empty_required_fields)} campos obrigat√≥rios vazios:")
                for field in empty_required_fields:
                    logger.warning(f"Campo vazio: ID='{field['id']}', Nome='{field['name']}', Tipo='{field['type']}'")
            else:
                logger.info("Todos os campos obrigat√≥rios est√£o preenchidos!")
        except Exception as e:
            logger.error(f"Erro ao verificar preenchimento final: {str(e)}")
        
        logger.info(f"Total de {fields_filled} campos preenchidos no formul√°rio")
        
        # NOVA VERIFICA√á√ÉO: Se n√£o preencheu nenhum campo, tentar excluir o formul√°rio
        if fields_filled == 0:
            logger.warning("Nenhum campo foi preenchido, tentando excluir o formul√°rio...")
            return click_no_yes_buttons(driver)
            
        return fields_filled > 0
    except Exception as e:
        logger.error(f"Erro ao preencher campos do formul√°rio: {str(e)}")
        return False
    
def handle_empty_data_error(driver, customer_info):
    """Fun√ß√£o mantida para compatibilidade, n√£o √© mais utilizada ativamente."""
    logger.info("Fun√ß√£o handle_empty_data_error chamada, mas n√£o est√° mais em uso ativo.")
    return False

def fill_field_by_label(driver, form_modal, label_texts, value):
    """Preenche um campo espec√≠fico do formul√°rio identificado por texto da label - VERS√ÉO CORRIGIDA."""
    try:
        logger.info(f"Tentando preencher campo com labels {label_texts}...")
        
        field_found = False
        
        # NOVA ESTRAT√âGIA: Busca mais agressiva por campos
        for label_text in label_texts:
            if field_found:
                break
                
            # M√©todo 1: Busca por placeholder
            try:
                placeholder_inputs = driver.find_elements(By.XPATH, f"//input[contains(@placeholder, '{label_text}') or contains(@placeholder, '{label_text.lower()}')]")
                for input_field in placeholder_inputs:
                    if input_field.is_displayed():
                        logger.info(f"Campo encontrado por placeholder: {label_text}")
                        # Preenche o campo
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", input_field)
                        time.sleep(0.5)
                        driver.execute_script("arguments[0].value = '';", input_field)
                        time.sleep(0.5)
                        safe_value = value.replace("'", "\\'").replace("\\", "\\\\")
                        driver.execute_script(f"arguments[0].value = '{safe_value}';", input_field)
                        
                        # Dispara eventos
                        events = ["input", "change", "blur"]
                        for event in events:
                            driver.execute_script(f"arguments[0].dispatchEvent(new Event('{event}', {{bubbles: true}}));", input_field)
                        
                        logger.info(f"Campo '{label_text}' preenchido com sucesso via placeholder")
                        return True
            except Exception as e:
                logger.info(f"Erro na busca por placeholder '{label_text}': {e}")
            
            # M√©todo 2: Busca por name attribute
            try:
                name_variations = [
                    label_text.lower().replace(" ", "").replace("√≥", "o").replace("√±", "n"),
                    label_text.lower().replace(" ", "_").replace("√≥", "o").replace("√±", "n"),
                    label_text.lower().replace(" ", "-").replace("√≥", "o").replace("√±", "n")
                ]
                
                for name_var in name_variations:
                    name_inputs = driver.find_elements(By.XPATH, f"//input[contains(@name, '{name_var}')]")
                    for input_field in name_inputs:
                        if input_field.is_displayed():
                            logger.info(f"Campo encontrado por name: {name_var}")
                            # Preenche o campo
                            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", input_field)
                            time.sleep(0.5)
                            driver.execute_script("arguments[0].value = '';", input_field)
                            time.sleep(0.5)
                            safe_value = value.replace("'", "\\'").replace("\\", "\\\\")
                            driver.execute_script(f"arguments[0].value = '{safe_value}';", input_field)
                            
                            # Dispara eventos
                            events = ["input", "change", "blur"]
                            for event in events:
                                driver.execute_script(f"arguments[0].dispatchEvent(new Event('{event}', {{bubbles: true}}));", input_field)
                            
                            logger.info(f"Campo '{label_text}' preenchido com sucesso via name")
                            return True
            except Exception as e:
                logger.info(f"Erro na busca por name '{label_text}': {e}")
            
            # M√©todo 3: Busca por ID
            try:
                id_variations = [
                    label_text.lower().replace(" ", "").replace("√≥", "o").replace("√±", "n"),
                    label_text.lower().replace(" ", "_").replace("√≥", "o").replace("√±", "n"),
                    label_text.lower().replace(" ", "-").replace("√≥", "o").replace("√±", "n")
                ]
                
                for id_var in id_variations:
                    id_inputs = driver.find_elements(By.XPATH, f"//input[contains(@id, '{id_var}')]")
                    for input_field in id_inputs:
                        if input_field.is_displayed():
                            logger.info(f"Campo encontrado por ID: {id_var}")
                            # Preenche o campo
                            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", input_field)
                            time.sleep(0.5)
                            driver.execute_script("arguments[0].value = '';", input_field)
                            time.sleep(0.5)
                            safe_value = value.replace("'", "\\'").replace("\\", "\\\\")
                            driver.execute_script(f"arguments[0].value = '{safe_value}';", input_field)
                            
                            # Dispara eventos
                            events = ["input", "change", "blur"]
                            for event in events:
                                driver.execute_script(f"arguments[0].dispatchEvent(new Event('{event}', {{bubbles: true}}));", input_field)
                            
                            logger.info(f"Campo '{label_text}' preenchido com sucesso via ID")
                            return True
            except Exception as e:
                logger.info(f"Erro na busca por ID '{label_text}': {e}")
        
        # Resto do c√≥digo original...
        logger.warning(f"N√£o foi poss√≠vel encontrar campo com labels {label_texts}")
        return False
        
    except Exception as e:
        logger.error(f"Erro ao preencher campo: {str(e)}")
        return False

def verify_processing_success(driver, row_id):
    """Verifica se o processamento foi realmente bem-sucedido."""
    try:
        logger.info(f"Verificando sucesso do processamento para novelty {row_id}...")
        
        # Aguarda um pouco para garantir que a p√°gina atualizou
        time.sleep(3)
        
        # Recarrega a p√°gina para garantir dados atualizados
        driver.refresh()
        time.sleep(5)
        
        # Verifica se ainda est√° na p√°gina de novelties
        current_url = driver.current_url
        if "novelties" not in current_url:
            logger.warning("N√£o est√° na p√°gina de novelties ap√≥s processamento")
            driver.get("https://app.dropi.co/dashboard/novelties")
            time.sleep(5)
        
        # Procura pela novelty espec√≠fica na tabela atualizada
        try:
            # Busca pela linha com o ID espec√≠fico
            row_xpath = f"//td[contains(text(), '{row_id}')]/parent::tr"
            specific_rows = driver.find_elements(By.XPATH, row_xpath)
            
            if specific_rows:
                specific_row = specific_rows[0]
                
                # Verifica se ainda h√° bot√£o "Solve" nesta linha
                solve_buttons = specific_row.find_elements(By.XPATH, ".//button[contains(text(), 'Solve')]")
                
                if not solve_buttons:
                    logger.info("‚úÖ Processamento confirmado - bot√£o 'Solve' n√£o encontrado")
                    return True
                else:
                    logger.warning("‚ùå Processamento falhou - bot√£o 'Solve' ainda presente")
                    return False
            else:
                logger.warning("‚ùå N√£o foi poss√≠vel encontrar a linha espec√≠fica na tabela")
                return False
                
        except Exception as e:
            logger.error(f"Erro ao verificar linha espec√≠fica: {e}")
            return False
            
    except Exception as e:
        logger.error(f"Erro ao verificar sucesso do processamento: {e}")
        return False

def process_current_novelty():
    """Processa a novelty atual na lista."""
    try:
        driver = st.session_state.driver
        
        # Verifica se h√° rows para processar
        if not st.session_state.rows:
            logger.info("Nenhuma novidade encontrada na tabela")
            return True
        
        # Verifica se todas as rows j√° foram processadas
        if st.session_state.current_row_index >= len(st.session_state.rows):
            logger.info("Todas as novelties foram processadas")
            return True
        
        # Vari√°vel para controlar tentativas de recarregamento
        reload_attempts = 0
        max_reload_attempts = 3
        
        # Obt√©m o ID da linha para refer√™ncia
        try:
            # Importante: Precisamos recarregar as linhas da tabela para evitar StaleElementReference
            rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
            
            # Se n√£o encontrou linhas, tenta seletores alternativos
            if not rows:
                logger.info("Tentando seletores alternativos para as linhas da tabela...")
                rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
                
                if not rows:
                    rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
            
            if rows and st.session_state.current_row_index < len(rows):
                row = rows[st.session_state.current_row_index]
                try:
                    row_id = row.find_elements(By.TAG_NAME, "td")[0].text
                    logger.info(f"Processando novelty ID: {row_id} ({st.session_state.current_row_index+1}/{len(rows)})")
                except:
                    row_id = f"Linha {st.session_state.current_row_index+1}"
                    logger.info(f"Processando {row_id}/{len(rows)}")
            else:
                row_id = f"Linha {st.session_state.current_row_index+1}"
                logger.info(f"Processando {row_id} (linhas n√£o dispon√≠veis)")
                
                # MODIFICA√á√ÉO: estrat√©gia mais robusta de recarregamento
                if reload_attempts < max_reload_attempts:
                    logger.warning(f"Linhas da tabela n√£o dispon√≠veis. Tentativa {reload_attempts+1} de {max_reload_attempts} para recarregar a p√°gina...")
                    reload_attempts += 1
                    
                    # Navega diretamente para a p√°gina de novelties para garantir que estamos no lugar certo
                    driver.get("https://app.dropi.co/dashboard/novelties")
                    
                    # Aumenta o tempo de espera ap√≥s recarregar
                    logger.info("Aguardando 10 segundos para carregamento completo da p√°gina...")
                    time.sleep(10)
                    
                    # Tenta configurar a exibi√ß√£o de 1000 entradas novamente
                    try:
                        logger.info("Tentando configurar exibi√ß√£o para 1000 entradas novamente...")
                        configure_entries_display()
                        time.sleep(5)  # Espera adicional ap√≥s configurar
                    except:
                        logger.warning("N√£o foi poss√≠vel configurar exibi√ß√£o para 1000 entradas")
                    
                    # Tenta obter as linhas novamente ap√≥s a configura√ß√£o
                    try:
                        rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
                        
                        if not rows:
                            rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
                            
                            if not rows:
                                rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
                        
                        logger.info(f"Ap√≥s recarregar: {len(rows)} linhas encontradas")
                        
                        if rows and len(rows) > 0:
                            # Atualiza as linhas no state
                            st.session_state.rows = rows
                            logger.info("Linhas atualizadas com sucesso!")
                            return False  # Retorna para tentar processar novamente
                    except Exception as e:
                        logger.error(f"Erro ao tentar obter linhas ap√≥s recarregar: {str(e)}")
                
                # Se chegou aqui, √© porque todas as tentativas de recarregamento falharam
                # Vamos avan√ßar para a pr√≥xima novelty
                if reload_attempts >= max_reload_attempts:
                    logger.error(f"Todas as {max_reload_attempts} tentativas de recarregamento falharam. Avan√ßando para pr√≥xima novelty.")
                    st.session_state.failed_items.append({"id": row_id, "error": "N√£o foi poss√≠vel carregar a tabela ap√≥s m√∫ltiplas tentativas"})
                    st.session_state.failed_count = len(st.session_state.failed_items)
                    
                    # Incrementa o √≠ndice para a pr√≥xima novelty e retorna para tentar novamente
                    st.session_state.current_row_index += 1
                    st.session_state.processed_items = st.session_state.current_row_index
                    st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                    return False
                
                return False  # Retorna para tentar novamente
        except Exception as e:
            logger.error(f"Erro ao obter informa√ß√µes da linha: {str(e)}")
            row_id = f"Linha {st.session_state.current_row_index+1}"
        
        # Atualiza o progresso
        st.session_state.processed_items = st.session_state.current_row_index + 1
        st.session_state.progress = (st.session_state.current_row_index + 1) / st.session_state.total_items
        
        try:
            # Tirar screenshot antes de clicar no bot√£o Save
            try:
                driver.save_screenshot(f"before_save_{row_id}.png")
                logger.info(f"Screenshot antes de salvar: before_save_{row_id}.png")
            except:
                pass
            
            # CORRE√á√ÉO PARA O ERRO STALE ELEMENT: Recarregar o elemento antes de interagir
            logger.info(f"Tentando localizar o bot√£o 'Save' para a novelty {row_id}...")
            try:
                # Recarrega as linhas novamente para garantir que est√£o atuais
                fresh_rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
                
                # Se n√£o encontrou com o seletor padr√£o, tenta seletores alternativos
                if not fresh_rows:
                    fresh_rows = driver.find_elements(By.CSS_SELECTOR, "table tr:not(:first-child)")
                    
                    if not fresh_rows:
                        fresh_rows = driver.find_elements(By.XPATH, "//tr[position() > 1]")
                
                if fresh_rows and st.session_state.current_row_index < len(fresh_rows):
                    current_row = fresh_rows[st.session_state.current_row_index]
                    
                    # MODIFICA√á√ÉO: usa m√∫ltiplos seletores para encontrar o bot√£o Save
                    save_buttons = current_row.find_elements(By.XPATH, ".//button[contains(@class, 'btn-success')]")
                    
                    # Se n√£o encontrou por classe, tenta por texto
                    if not save_buttons:
                        save_buttons = current_row.find_elements(By.XPATH, ".//button[contains(text(), 'Save')]")
                    
                    # Se ainda n√£o encontrou, tenta qualquer bot√£o na linha
                    if not save_buttons:
                        save_buttons = current_row.find_elements(By.TAG_NAME, "button")
                    
                    if save_buttons:
                        save_button = save_buttons[0]
                        
                        # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", save_button)
                        time.sleep(2)  # Aumentado para 2 segundos
                        
                        # Tenta clicar com JavaScript para maior confiabilidade
                        driver.execute_script("arguments[0].click();", save_button)
                        logger.info("Bot√£o 'Save' clicado via JavaScript")
                        
                        # NOVA VERIFICA√á√ÉO: Verificar se a janela ainda existe ap√≥s clicar
                        time.sleep(2)
                        try:
                            # Tenta acessar o t√≠tulo atual para verificar se a janela existe
                            current_title = driver.title
                        except Exception as window_error:
                            logger.warning(f"Janela do navegador foi fechada: {str(window_error)}")
                            # Fecha o driver atual se existir
                            try:
                                if st.session_state.driver:
                                    st.session_state.driver.quit()
                            except:
                                pass
                            
                            # Reconfigura o driver
                            setup_driver()
                            
                            # Reinicia o login e navega√ß√£o
                            if login():
                                navigate_to_novelties()
                                configure_entries_display()
                            
                            # Registra como processado com sucesso
                            st.session_state.success_count += 1
                            logger.info(f"Novelty {row_id} processada com sucesso (janela fechada e reaberta)!")
                            
                            # Avan√ßa para a pr√≥xima novelty
                            st.session_state.current_row_index += 1
                            st.session_state.processed_items = st.session_state.current_row_index
                            st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                            return False
                    else:
                        logger.warning("Bot√£o 'Save' n√£o encontrado na linha atual")
                        # Registra a falha
                        st.session_state.failed_items.append({"id": row_id, "error": "Bot√£o 'Save' n√£o encontrado"})
                        st.session_state.failed_count = len(st.session_state.failed_items)
                        # Incrementa o √≠ndice e continua para a pr√≥xima novelty
                        st.session_state.current_row_index += 1
                        return False
                else:
                    logger.warning("N√£o foi poss√≠vel localizar a linha atual na tabela")
                    # Registra a falha
                    st.session_state.failed_items.append({"id": row_id, "error": "Linha n√£o encontrada na tabela"})
                    st.session_state.failed_count = len(st.session_state.failed_items)
                    # Incrementa o √≠ndice e continua para a pr√≥xima novelty
                    st.session_state.current_row_index += 1
                    return False
            except Exception as e:
                logger.error(f"Erro ao clicar no bot√£o 'Save': {str(e)}")
                # Registra a falha
                st.session_state.failed_items.append({"id": row_id, "error": f"Erro ao clicar no bot√£o 'Save': {str(e)}"})
                st.session_state.failed_count = len(st.session_state.failed_items)
                # Incrementa o √≠ndice e continua para a pr√≥xima novelty
                st.session_state.current_row_index += 1
                return False
            
            # Espera pelo popup - tempo aumentado
            logger.info("Aguardando 5 segundos pelo popup...")
            time.sleep(5)
            
            # Tirar screenshot ap√≥s clicar no bot√£o Save
            try:
                driver.save_screenshot(f"after_save_{row_id}.png")
                logger.info(f"Screenshot ap√≥s salvar: after_save_{row_id}.png")
            except:
                pass
            
            # Tenta diferentes m√©todos para encontrar e clicar no bot√£o "Yes" ou "Sim"
            yes_clicked = False
            
            # M√©todo 1: Procura por texto exato
            for text in ["Yes", "YES"]:
                try:
                    yes_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                    for button in yes_buttons:
                        if button.is_displayed():
                            logger.info(f"Bot√£o com texto '{text}' encontrado, tentando clicar...")
                            
                            # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                            time.sleep(1)
                            
                            # Tenta clicar com JavaScript
                            driver.execute_script("arguments[0].click();", button)
                            logger.info(f"Clicado no bot√£o com texto '{text}' via JavaScript")
                            
                            # Aguarda ap√≥s clicar
                            time.sleep(2)
                            
                            yes_clicked = True
                            break
                    if yes_clicked:
                        break
                except Exception as e:
                    logger.info(f"N√£o foi poss√≠vel clicar no bot√£o '{text}': {str(e)}")
                    continue
            
            # M√©todo 2: Primeiro bot√£o no modal-footer
            if not yes_clicked:
                try:
                    buttons = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal-footer')]/button")
                    if buttons:
                        logger.info("Encontrado bot√£o no modal-footer, tentando clicar...")
                        
                        # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", buttons[0])
                        time.sleep(1)
                        
                        # Tenta clicar com JavaScript
                        driver.execute_script("arguments[0].click();", buttons[0])
                        logger.info("Clicado no primeiro bot√£o do modal-footer via JavaScript")
                        
                        # Aguarda ap√≥s clicar
                        time.sleep(2)
                        
                        yes_clicked = True
                except Exception as e:
                    logger.info(f"Erro ao clicar no bot√£o do modal-footer: {str(e)}")
            
            # M√©todo 3: Qualquer bot√£o primary ou success
            if not yes_clicked:
                try:
                    buttons = driver.find_elements(By.TAG_NAME, "button")
                    for button in buttons:
                        if button.is_displayed():
                            try:
                                button_class = button.get_attribute("class").lower()
                                if "primary" in button_class or "success" in button_class:
                                    logger.info(f"Encontrado bot√£o com classe {button_class}, tentando clicar...")
                                    
                                    # Rola at√© o bot√£o para garantir que esteja vis√≠vel
                                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                                    time.sleep(1)
                                    
                                    # Tenta clicar com JavaScript
                                    driver.execute_script("arguments[0].click();", button)
                                    logger.info(f"Clicado em bot√£o de classe: {button_class} via JavaScript")
                                    
                                    # Aguarda ap√≥s clicar
                                    time.sleep(2)
                                    
                                    yes_clicked = True
                                    break
                            except Exception as e:
                                logger.info(f"Erro ao clicar no bot√£o de classe {button_class}: {str(e)}")
                                continue
                except Exception as e:
                    logger.info(f"Erro ao procurar bot√µes por classe: {str(e)}")
                    
            if not yes_clicked:
                logger.warning("N√£o foi poss√≠vel clicar em 'Yes'/'Sim'. Tentando continuar...")
            
            # Verificar novamente se a janela ainda existe ap√≥s Yes
            try:
                # Tenta acessar o t√≠tulo atual
                current_title = driver.title
            except Exception as window_error:
                logger.warning(f"Janela do navegador foi fechada ap√≥s clicar em Yes: {str(window_error)}")
                # Fecha o driver atual se existir
                try:
                    if st.session_state.driver:
                        st.session_state.driver.quit()
                except:
                    pass
                
                # Reconfigura o driver
                setup_driver()
                
                # Reinicia o login e navega√ß√£o
                if login():
                    navigate_to_novelties()
                    configure_entries_display()
                
                # Registra como processado com sucesso
                st.session_state.success_count += 1
                logger.info(f"Novelty {row_id} processada com sucesso (janela fechada ap√≥s Yes)!")
                
                # Avan√ßa para a pr√≥xima novelty
                st.session_state.current_row_index += 1
                st.session_state.processed_items = st.session_state.current_row_index
                st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                return False
            
            # Aguardar mais tempo antes de procurar o formul√°rio
            logger.info("Aguardando 8 segundos para garantir que o formul√°rio seja carregado...")
            time.sleep(8)  # Aumentado de 5 para 8 segundos
            
            # Tirar screenshot ap√≥s clicar no bot√£o Yes para diagn√≥stico
            try:
                driver.save_screenshot(f"after_yes_{row_id}.png")
                logger.info(f"Screenshot ap√≥s clicar em Yes: after_yes_{row_id}.png")
            except:
                pass
            
            # Extrair as informa√ß√µes do cliente
            customer_info = extract_customer_info(driver)
            
            # ESTRAT√âGIA APRIMORADA para encontrar o formul√°rio
            form_found = False
            form_modal = None
            
            # Diagn√≥stico do DOM atual para depura√ß√£o
            try:
                logger.info("Analisando estrutura do DOM ap√≥s clicar em Yes...")
                
                # Verificar se h√° modais vis√≠veis
                modals = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']")
                logger.info(f"Modais vis√≠veis encontrados: {len(modals)}")
                
                # Verificar todos os formul√°rios na p√°gina
                forms = driver.find_elements(By.TAG_NAME, "form")
                logger.info(f"Formul√°rios encontrados: {len(forms)}")
                
                # Verificar campos de input
                inputs = driver.find_elements(By.TAG_NAME, "input")
                visible_inputs = [i for i in inputs if i.is_displayed()]
                logger.info(f"Campos de input vis√≠veis: {len(visible_inputs)}")
                
                # Verificar selects (dropdowns)
                selects = driver.find_elements(By.TAG_NAME, "select")
                visible_selects = [s for s in selects if s.is_displayed()]
                logger.info(f"Dropdowns vis√≠veis: {len(visible_selects)}")
                
                # Verificar textareas
                textareas = driver.find_elements(By.TAG_NAME, "textarea")
                visible_textareas = [t for t in textareas if t.is_displayed()]
                logger.info(f"Textareas vis√≠veis: {len(visible_textareas)}")
                
                # Verificar presen√ßa espec√≠fica do dropdown de Soluci√≥n
                try:
                    solution_labels = driver.find_elements(By.XPATH, "//div[contains(text(), 'Soluci√≥n')]")
                    if solution_labels:
                        logger.info(f"Labels de Soluci√≥n encontradas: {len(solution_labels)}")
                        
                        # Verificar se alguma est√° pr√≥xima de um select
                        for label in solution_labels:
                            parent = label.find_element(By.XPATH, ".//..")
                            parent_selects = parent.find_elements(By.TAG_NAME, "select")
                            if parent_selects:
                                logger.info("Detectado formul√°rio com dropdown de Soluci√≥n")
                                form_modal = parent
                                form_found = True
                                break
                except Exception as e:
                    logger.info(f"Erro ao verificar dropdown de Soluci√≥n: {e}")
            except Exception as e:
                logger.warning(f"Erro ao analisar DOM: {e}")
            
            # Estrat√©gia 1: Busca pelo modal com formul√°rio (padr√£o)
            if not form_found:
                try:
                    logger.info("Estrat√©gia 1: Buscando modal com formul√°rio...")
                    # Aumente o tempo de espera para 10 segundos
                    form_modal = WebDriverWait(driver, 10).until(
                        EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal-body')]//form"))
                    )
                    logger.info("Formul√°rio encontrado na modal-body")
                    form_found = True
                except Exception as e:
                    logger.info(f"Estrat√©gia 1 falhou: {e}")
            
            # Estrat√©gia 2: Busca qualquer formul√°rio na p√°gina
            if not form_found:
                try:
                    logger.info("Estrat√©gia 2: Buscando qualquer formul√°rio...")
                    forms = driver.find_elements(By.TAG_NAME, "form")
                    for form in forms:
                        if form.is_displayed():
                            form_modal = form
                            form_found = True
                            logger.info("Formul√°rio encontrado diretamente")
                            break
                except Exception as e:
                    logger.info(f"Estrat√©gia 2 falhou: {e}")
            
            # Estrat√©gia 3: Busca qualquer modal ativo
            if not form_found:
                try:
                    logger.info("Estrat√©gia 3: Buscando qualquer modal ativo...")
                    modals = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']")
                    if modals:
                        form_modal = modals[0]
                        form_found = True
                        logger.info("Modal ativo encontrado, usando como formul√°rio")
                except Exception as e:
                    logger.info(f"Estrat√©gia 3 falhou: {e}")
            
            # Estrat√©gia 4: Usa o corpo da p√°gina como √∫ltimo recurso
            if not form_found:
                try:
                    logger.info("Estrat√©gia 4: Usando corpo da p√°gina como √∫ltimo recurso...")
                    form_modal = driver.find_element(By.TAG_NAME, "body")
                    form_found = True
                    logger.info("Usando body como formul√°rio")
                except Exception as e:
                    logger.info(f"Estrat√©gia 4 falhou: {e}")
            
            # Adicional: Verifica a presen√ßa do dropdown espec√≠fico
            try:
                dropdown_exists = False
                selects = driver.find_elements(By.TAG_NAME, "select")
                for select in selects:
                    if select.is_displayed():
                        try:
                            options = select.find_elements(By.TAG_NAME, "option")
                            for option in options:
                                if "entregar en nueva direcci√≥n" in option.text.lower():
                                    logger.info("Detectado dropdown com op√ß√£o 'Entregar en nueva direcci√≥n'")
                                    dropdown_exists = True
                                    break
                        except:
                            pass
                    if dropdown_exists:
                        break
                        
                if dropdown_exists:
                    logger.info("Usando fluxo especial para formul√°rio dropdown")
                    result = handle_dropdown_solution_form(driver, form_modal, customer_info)
                elif form_found:
                    logger.info("Usando fluxo padr√£o para formul√°rio encontrado")
                    result = fill_form_fields(driver, form_modal, customer_info)
                else:
                    logger.error("N√£o foi poss√≠vel encontrar o formul√°rio para preencher. Pulando preenchimento.")
                    result = False
                
                # ADICIONADO: SEMPRE tenta clicar no bot√£o de salvar, independentemente do resultado anterior
                logger.info("PASSO CR√çTICO: Tentando clicar no bot√£o 'Save Solution'...")
                try:
                    # Pausa antes de tentar clicar
                    time.sleep(3)
                    # Chama a fun√ß√£o aprimorada de clique
                    save_clicked = click_save_button(driver)
                    if save_clicked:
                        logger.info("‚úÖ Bot√£o 'Save Solution' clicado com sucesso")
                        
                        # NOVA VERIFICA√á√ÉO: Aguarda e verifica se realmente foi salvo
                        logger.info("Verificando se o formul√°rio foi salvo com sucesso...")
                        time.sleep(5)  # Aguarda mais tempo para processamento
                        
                        # Verifica se o modal foi fechado (indicativo de sucesso)
                        try:
                            modals_after = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']")
                            if len(modals_after) == 0:
                                logger.info("‚úÖ Modal fechado - salvamento confirmado")
                            else:
                                logger.warning("‚ö†Ô∏è Modal ainda aberto - poss√≠vel erro no salvamento")
                        except Exception as modal_check_error:
                            logger.info(f"Erro ao verificar modal: {modal_check_error}")
                        
                        # Verifica se apareceu mensagem de sucesso
                        try:
                            success_elements = driver.find_elements(By.XPATH, "//*[contains(text(), '√©xito') or contains(text(), 'success') or contains(text(), 'guardado') or contains(text(), 'saved')]")
                            if success_elements:
                                logger.info("‚úÖ Mensagem de sucesso encontrada")
                            else:
                                logger.info("‚ÑπÔ∏è Nenhuma mensagem de sucesso expl√≠cita encontrada")
                        except Exception as success_check_error:
                            logger.info(f"Erro ao verificar mensagem de sucesso: {success_check_error}")
                            
                    else:
                        logger.warning("‚ö†Ô∏è Falha ao clicar no bot√£o 'Save Solution'")
                except Exception as explicit_save_error:
                    logger.error(f"‚ùå Erro ao executar clique: {explicit_save_error}")
                    
            except Exception as e:
                logger.error(f"Erro ao identificar tipo de formul√°rio: {e}")
                result = False
                
                # Mesmo com erro, tenta clicar no bot√£o salvar
                logger.info("Tentando clicar no bot√£o de salvar mesmo ap√≥s erro...")
                try:
                    save_clicked = click_save_button(driver)
                except Exception as e_save:
                    logger.error(f"Erro ao tentar clicar no bot√£o salvar ap√≥s erro: {e_save}")
            
            # C√ìDIGO REDIRECIONAMENTO - Verifica o erro espec√≠fico "Ups, tenemos el siguiente inconveniente"
            logger.info("Verificando se apareceu o erro 'Ups, tenemos el siguiente inconveniente'...")
            try:
                # Espera um pouco para o popup aparecer
                time.sleep(3)
                
                # Procura pelo texto de erro espec√≠fico
                error_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Ups, tenemos el siguiente inconveniente')]")
                
                if error_elements:
                    logger.warning("Detectado erro 'Ups, tenemos el siguiente inconveniente'")
                    
                    # Tenta tirar um screenshot do erro
                    try:
                        driver.save_screenshot(f"error_ups_{row_id}.png")
                        logger.info(f"Screenshot do erro: error_ups_{row_id}.png")
                    except:
                        pass
                    
                    # Registra o erro
                    error_msg = "Erro 'Ups, tenemos el siguiente inconveniente'"
                    logger.error(f"Erro ao processar novelty {row_id}: {error_msg}")
                    st.session_state.failed_items.append({"id": row_id, "error": error_msg})
                    st.session_state.failed_count = len(st.session_state.failed_items)
                    
                    # Redireciona para a lista de novelties
                    logger.info("Redirecionando para a lista de novelties...")
                    driver.get("https://app.dropi.co/dashboard/novelties")
                    
                    # Aguarda o carregamento da p√°gina
                    time.sleep(8)  # Aumentado para 8 segundos
                    
                    # Incrementa o √≠ndice para pular esta novelty
                    st.session_state.current_row_index += 1
                    
                    # Atualiza o progresso
                    st.session_state.processed_items = st.session_state.current_row_index
                    st.session_state.progress = st.session_state.current_row_index / st.session_state.total_items
                    
                    # Retorna False para continuar com a pr√≥xima novelty
                    return False
            except Exception as e:
                logger.info(f"Erro ao verificar popup de erro espec√≠fico: {str(e)}")
            
            # Espera adicional ap√≥s salvar - AUMENTADO
            logger.info("Aguardando processamento adicional...")
            time.sleep(8)  # Aumentado de 5 para 8 segundos
            
            # Procura e clica no popup "OK" que aparece ap√≥s salvar
            logger.info("Procurando popup de confirma√ß√£o com bot√£o OK...")
            try:
                # Tira screenshot do popup
                try:
                    driver.save_screenshot(f"popup_ok_{row_id}.png")
                    logger.info(f"Screenshot do popup OK: popup_ok_{row_id}.png")
                except:
                    pass
                
                # Tenta v√°rias estrat√©gias para encontrar e clicar no bot√£o OK
                ok_clicked = False
                
                # M√©todo 1: Bot√£o com texto OK
                for text in ["OK", "Ok", "ok", "Aceptar", "Aceptar", "Aceitar", "aceitar"]:
                    try:
                        ok_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                        for button in ok_buttons:
                            if button.is_displayed():
                                logger.info(f"Bot√£o OK encontrado com texto '{text}', clicando...")
                                driver.execute_script("arguments[0].click();", button)
                                ok_clicked = True
                                break
                        if ok_clicked:
                            break
                    except Exception as e:
                        logger.info(f"Erro ao clicar no bot√£o '{text}': {str(e)}")
                
                # M√©todo 2: Qualquer bot√£o em um modal visible
                if not ok_clicked:
                    try:
                        buttons = driver.find_elements(By.XPATH, "//div[contains(@class, 'modal') and @style='display: block;']//button")
                        for button in buttons:
                            if button.is_displayed():
                                logger.info(f"Bot√£o encontrado em modal vis√≠vel: '{button.text}', clicando...")
                                driver.execute_script("arguments[0].click();", button)
                                ok_clicked = True
                                break
                    except Exception as e:
                        logger.info(f"Erro ao clicar em bot√£o de modal vis√≠vel: {str(e)}")
                
                # M√©todo 3: Qualquer bot√£o de classe primary ou success
                if not ok_clicked:
                    try:
                        buttons = driver.find_elements(By.TAG_NAME, "button")
                        for button in buttons:
                            if button.is_displayed():
                                try:
                                    button_class = button.get_attribute("class").lower()
                                    if "primary" in button_class or "success" in button_class:
                                        logger.info(f"Bot√£o OK encontrado por classe: '{button.text}', clicando...")
                                        driver.execute_script("arguments[0].click();", button)
                                        ok_clicked = True
                                        break
                                except:
                                    continue
                    except Exception as e:
                        logger.info(f"Erro ao procurar bot√£o OK por classe: {str(e)}")
                
                if ok_clicked:
                    logger.info("Bot√£o OK clicado com sucesso")
                    # Espera adicional ap√≥s clicar em OK
                    time.sleep(2)
                else:
                    logger.warning("N√£o foi poss√≠vel encontrar e clicar no bot√£o OK, continuando mesmo assim")
            except Exception as e:
                logger.warning(f"Erro ao procurar popup OK: {str(e)}")
            
            # Verifica se h√° novas guias abertas
            check_and_close_tabs()
            
            # NOVA VERIFICA√á√ÉO FINAL: Confirma se realmente voltou para a lista de novelties
            logger.info("Verifica√ß√£o final: confirmando se voltou para a lista de novelties...")
            try:
                current_url = driver.current_url
                logger.info(f"URL atual ap√≥s processamento: {current_url}")
                
                if "novelties" in current_url:
                    logger.info("‚úÖ Confirmado: ainda/voltou para a p√°gina de novelties")
                    
                    # Verifica se o bot√£o "Solve" ainda est√° presente na linha processada
                    try:
                        # Recarrega as linhas para verificar
                        fresh_rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
                        if fresh_rows and st.session_state.current_row_index < len(fresh_rows):
                            current_row = fresh_rows[st.session_state.current_row_index]
                            solve_buttons = current_row.find_elements(By.XPATH, ".//button[contains(text(), 'Solve')]")
                            
                            if not solve_buttons:
                                logger.info("‚úÖ Bot√£o 'Solve' n√£o encontrado na linha - indicativo de processamento bem-sucedido")
                            else:
                                logger.warning("‚ö†Ô∏è Bot√£o 'Solve' ainda presente - poss√≠vel falha no salvamento")
                                # Registra como falha potencial mas continua
                                st.session_state.failed_items.append({
                                    "id": row_id, 
                                    "error": "Bot√£o 'Solve' ainda presente ap√≥s processamento"
                                })
                                st.session_state.failed_count = len(st.session_state.failed_items)
                    except Exception as solve_check_error:
                        logger.info(f"Erro ao verificar bot√£o Solve: {solve_check_error}")
                else:
                    logger.warning(f"‚ö†Ô∏è URL n√£o est√° na p√°gina de novelties: {current_url}")
                    # Tenta navegar de volta
                    driver.get("https://app.dropi.co/dashboard/novelties")
                    time.sleep(5)
                    
            except Exception as final_check_error:
                logger.warning(f"Erro na verifica√ß√£o final: {final_check_error}")
            
            # Incrementa contador de sucesso
            logger.info("Executando verifica√ß√£o final de sucesso...")
            processing_successful = verify_processing_success(driver, row_id)
            
            if processing_successful:
                st.session_state.success_count += 1
                logger.info(f"‚úÖ Novelty {row_id} processada com SUCESSO CONFIRMADO!")
            else:
                st.session_state.failed_items.append({"id": row_id, "error": "Verifica√ß√£o de sucesso falhou - bot√£o Solve ainda presente"})
                st.session_state.failed_count = len(st.session_state.failed_items)
                logger.warning(f"‚ùå Novelty {row_id} processamento FALHOU na verifica√ß√£o final!")
            
            # Pequena pausa entre processamentos
            time.sleep(3)
            
        except Exception as e:
            # Registra o erro
            error_msg = f"Erro ao processar novelty {row_id}: {str(e)}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            st.session_state.failed_items.append({"id": row_id, "error": str(e)})
            st.session_state.failed_count = len(st.session_state.failed_items)
            
            # Tratamento de erro conforme especificado
            handle_error(row, row_id)
        
        # Incrementa o √≠ndice para a pr√≥xima novelty
        st.session_state.current_row_index += 1
        
        # Verifica se todas as novelties foram processadas
        if st.session_state.current_row_index >= len(st.session_state.rows):
            logger.info("Todas as novelties foram processadas")
            generate_report()
            return True
        
        return False
            
    except Exception as e:
        logger.error(f"Erro geral ao processar novelty: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def click_save_button(driver):
    """Tenta clicar no bot√£o de salvar usando v√°rias estrat√©gias. Vers√£o ultra robusta para Col√¥mbia."""
    try:
        logger.info("Iniciando processo aprimorado para clicar no bot√£o de salvar...")
        
        # DIAGN√ìSTICO: Tira screenshot antes de qualquer intera√ß√£o
        driver.save_screenshot("before_trying_save_button.png")
        logger.info("Screenshot antes de tentar salvar")
        
        # PAUSA MAIOR: Aguarda o formul√°rio estar completamente pronto
        logger.info("Aguardando 8 segundos para garantir que o formul√°rio esteja pronto...")
        time.sleep(8)
        
        # DIAGN√ìSTICO DE BOT√ïES: Mapeia todos os bot√µes vis√≠veis na p√°gina
        logger.info("Analisando todos os bot√µes vis√≠veis na p√°gina...")
        all_buttons = driver.find_elements(By.TAG_NAME, "button")
        visible_buttons = []
        
        # Lista todos os bot√µes para diagn√≥stico
        for idx, btn in enumerate(all_buttons):
            try:
                if btn.is_displayed():
                    btn_text = btn.text.strip()
                    btn_class = btn.get_attribute("class")
                    btn_id = btn.get_attribute("id")
                    btn_type = btn.get_attribute("type")
                    
                    button_info = {
                        "index": idx,
                        "text": btn_text,
                        "class": btn_class,
                        "id": btn_id,
                        "type": btn_type
                    }
                    
                    visible_buttons.append((btn, button_info))
                    logger.info(f"Bot√£o #{idx}: Texto='{btn_text}', Classe='{btn_class}', ID='{btn_id}', Tipo='{btn_type}'")
            except:
                pass
        
        logger.info(f"Total de {len(visible_buttons)} bot√µes vis√≠veis encontrados")
        
        # Vari√°veis para controle
        save_clicked = False
        button_to_click = None
        click_method = ""
        
        # ESTRAT√âGIA ESPEC√çFICA PARA COL√îMBIA: busca por bot√£o espec√≠fico SAVE SOLUCION no documento inteiro
        logger.info("ESTRAT√âGIA ESPECIAL COL√îMBIA: Procurando bot√£o 'SAVE SOLUCION' em qualquer lugar do documento...")
        special_patterns = [
            "SAVE SOLUCION", "Save Solucion", "SAVE SOLUTION", "Save Solution", 
            "GUARDAR SOLUCION", "Guardar Solucion", "GUARDAR SOLUCI√ìN", "Guardar Soluci√≥n"
        ]

        # Busca por JavaScript em todo o documento - extremamente agressivo para encontrar o bot√£o
        try:
            driver.execute_script("""
                // Destaca todos os bot√µes em verde para diagn√≥stico
                document.querySelectorAll('button').forEach(btn => {
                    btn.style.border = '2px dashed green';
                });
            """)
            
            # Busca por bot√£o espec√≠fico
            for pattern in special_patterns:
                if button_to_click:
                    break
                    
                # Busca por texto exato, parcial e case-insensitive
                for js_search in [
                    f"return Array.from(document.querySelectorAll('button')).find(b => b.textContent.trim() === '{pattern}');",
                    f"return Array.from(document.querySelectorAll('button')).find(b => b.textContent.includes('{pattern}'));",
                    f"return Array.from(document.querySelectorAll('button')).find(b => b.textContent.toLowerCase().includes('{pattern.lower()}'));"
                ]:
                    try:
                        result = driver.execute_script(js_search)
                        if result:
                            logger.info(f"‚úÖ ENCONTRADO bot√£o '{pattern}' via busca JavaScript especial")
                            button_to_click = result
                            click_method = f"JavaScript especial Col√¥mbia - '{pattern}'"
                            break
                    except Exception as js_error:
                        logger.info(f"Erro em busca JS: {js_error}")
            
            # Busca pelo bot√£o mais pr√≥ximo do campo de solu√ß√£o
            if not button_to_click:
                logger.info("Tentando encontrar bot√£o pr√≥ximo ao campo de Soluci√≥n...")
                nearby_button_js = """
                    // Tenta encontrar o campo de solu√ß√£o
                    var solutionField = Array.from(document.querySelectorAll('textarea, input')).find(el => 
                        el.id?.toLowerCase().includes('solucion') || 
                        el.name?.toLowerCase().includes('solucion') ||
                        el.placeholder?.toLowerCase().includes('solucion')
                    );
                    
                    // Se encontrou o campo, procura pelo bot√£o mais pr√≥ximo
                    if (solutionField) {
                        // Busca at√© 5 n√≠veis acima do campo
                        var parent = solutionField;
                        for (var i = 0; i < 5; i++) {
                            parent = parent.parentElement;
                            if (!parent) break;
                            
                            // Procura bot√µes neste n√≠vel
                            var buttons = parent.querySelectorAll('button');
                            for (var j = 0; j < buttons.length; j++) {
                                if (buttons[j].offsetParent !== null) { // Verifica se est√° vis√≠vel
                                    return buttons[j];
                                }
                            }
                        }
                    }
                    return null;
                """
                
                nearby_button = driver.execute_script(nearby_button_js)
                if nearby_button:
                    logger.info("‚úÖ Encontrado bot√£o pr√≥ximo ao campo de Soluci√≥n!")
                    button_to_click = nearby_button
                    click_method = "Proximidade ao campo de Soluci√≥n"
            
            # Tira screenshot para diagn√≥stico
            driver.save_screenshot("all_buttons_highlighted.png")
            logger.info("Screenshot com todos os bot√µes destacados")
            
        except Exception as special_error:
            logger.warning(f"Erro na estrat√©gia especial para Col√¥mbia: {special_error}")
        
        # ESTRAT√âGIA 0: Procura especificamente por "SAVE SOLUCION" ou varia√ß√µes (PRIORIDADE M√ÅXIMA)
        if not button_to_click:
            logger.info("ESTRAT√âGIA 0: Procurando bot√£o com texto espec√≠fico para salvar solu√ß√£o...")
            
            # Lista extensa de padr√µes espec√≠ficos para o bot√£o de salvar solu√ß√£o (incluindo varia√ß√µes em espanhol)
            save_patterns = [
                "SAVE SOLUCION", "Save Solucion", "save solucion", 
                "SAVE SOLUTION", "Save Solution", "save solution",
                "GUARDAR SOLUCION", "Guardar Solucion", "guardar solucion",
                "GUARDAR SOLUCI√ìN", "Guardar Soluci√≥n", "guardar soluci√≥n",
                "SAVE CHANGES", "Save Changes", "save changes",
                "GUARDAR CAMBIOS", "Guardar Cambios", "guardar cambios",
                "APLICAR", "Aplicar", "aplicar",
                "APLICAR CAMBIOS", "Aplicar Cambios", "aplicar cambios",
                "PROCESAR", "Procesar", "procesar",
                "ACEPTAR", "Aceptar", "aceptar"
            ]
            
            # Primeiro tenta localizar pelo XPath exato (m√©todo mais preciso)
            for pattern in save_patterns:
                if button_to_click:
                    break
                    
                logger.info(f"Procurando bot√£o com texto exato '{pattern}'...")
                try:
                    # Tenta v√°rias estrat√©gias de XPath para texto exato
                    for xpath in [
                        f"//button[text()='{pattern}']",
                        f"//button[normalize-space(text())='{pattern}']",
                        f"//button[contains(text(), '{pattern}')]"
                    ]:
                        matching_buttons = driver.find_elements(By.XPATH, xpath)
                        if matching_buttons:
                            for btn in matching_buttons:
                                if btn.is_displayed():
                                    logger.info(f"Bot√£o encontrado com texto '{pattern}' - Prioridade M√°xima")
                                    button_to_click = btn
                                    click_method = f"Texto exato '{pattern}'"
                                    break
                            if button_to_click:
                                break
                except Exception as e:
                    logger.info(f"Erro ao procurar bot√£o '{pattern}': {e}")
        
        # ESTRAT√âGIA 1: Procura por bot√£o com texto de GUARDAR/SALVAR (mais gen√©rico)
        if not button_to_click:
            logger.info("ESTRAT√âGIA 1: Procurando bot√£o com texto gen√©rico de salvar...")
            
            generic_patterns = ["SAVE", "Save", "save", "GUARDAR", "Guardar", "guardar", "SALVAR", "Salvar", "salvar"]
            
            for pattern in generic_patterns:
                try:
                    matching_buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{pattern}')]")
                    if matching_buttons:
                        for btn in matching_buttons:
                            if btn.is_displayed():
                                logger.info(f"Bot√£o encontrado com texto gen√©rico '{pattern}'")
                                button_to_click = btn
                                click_method = f"Texto gen√©rico '{pattern}'"
                                break
                        if button_to_click:
                            break
                except Exception as e:
                    logger.info(f"Erro ao procurar bot√£o gen√©rico '{pattern}': {e}")
        
        # ESTRAT√âGIA 2: Bot√£o de cor verde, azul ou classe success/primary
        if not button_to_click:
            logger.info("ESTRAT√âGIA 2: Procurando bot√£o por classe indicativa...")
            
            for btn, info in visible_buttons:
                if info["class"] and any(cls in info["class"].lower() for cls in ["success", "primary", "guardar", "save", "submit"]):
                    logger.info(f"Bot√£o encontrado por classe '{info['class']}'")
                    button_to_click = btn
                    click_method = f"Classe '{info['class']}'"
                    break
        
        # ESTRAT√âGIA 3: Bot√£o de tipo submit
        if not button_to_click:
            logger.info("ESTRAT√âGIA 3: Procurando bot√£o do tipo submit...")
            
            try:
                submit_buttons = driver.find_elements(By.XPATH, "//button[@type='submit']")
                if submit_buttons:
                    for btn in submit_buttons:
                        if btn.is_displayed():
                            logger.info("Bot√£o submit encontrado")
                            button_to_click = btn
                            click_method = "Tipo 'submit'"
                            break
            except Exception as e:
                logger.info(f"Erro ao procurar bot√£o submit: {e}")
        
        # ESTRAT√âGIA 4: Bot√£o em formul√°rio ou no modal-footer
        if not button_to_click:
            logger.info("ESTRAT√âGIA 4: Procurando bot√£o no formul√°rio ou footer...")
            
            try:
                # Tenta encontrar o bot√£o dentro do form
                form_buttons = driver.find_elements(By.XPATH, "//form//button | //div[contains(@class, 'modal-footer')]//button")
                for btn in form_buttons:
                    if btn.is_displayed():
                        logger.info(f"Bot√£o encontrado no formul√°rio/footer: '{btn.text}'")
                        button_to_click = btn
                        click_method = "Localiza√ß√£o no formul√°rio/footer"
                        break
            except Exception as e:
                logger.info(f"Erro ao procurar bot√£o no form/footer: {e}")
        
        # ESTRAT√âGIA 5: √öltimo recurso - primeiro bot√£o vis√≠vel na p√°gina
        if not button_to_click and visible_buttons:
            logger.info("ESTRAT√âGIA 5: Usando primeiro bot√£o vis√≠vel como √∫ltimo recurso...")
            button_to_click = visible_buttons[0][0]
            click_method = "Primeiro bot√£o vis√≠vel (√∫ltimo recurso)"
        
        # EXECUTA O CLIQUE se encontrou um bot√£o
        if button_to_click:
            logger.info(f"Bot√£o para salvar encontrado via: {click_method}")
            
            # Tira screenshot com destaque no bot√£o
            try:
                original_style = driver.execute_script("return arguments[0].getAttribute('style');", button_to_click)
                driver.execute_script("arguments[0].setAttribute('style', 'border: 5px solid red !important; background-color: yellow !important;');", button_to_click)
                driver.save_screenshot("save_button_highlighted.png")
                driver.execute_script(f"arguments[0].setAttribute('style', '{original_style or ''}');", button_to_click)
                logger.info("Screenshot com bot√£o destacado salvo")
            except:
                pass
            
            # Rola at√© o bot√£o e centraliza
            logger.info("Rolando at√© o bot√£o e centralizando...")
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button_to_click)
            time.sleep(2)
            
            # M√âTODO 1: Tenta m√∫ltiplos clicks com diferentes t√©cnicas
            click_success = False
            
            # Tenta clicar com JavaScript (mais confi√°vel)
            try:
                logger.info("Tentando clicar via JavaScript...")
                driver.execute_script("arguments[0].click();", button_to_click)
                time.sleep(2)
                # N√£o temos como verificar 100%, ent√£o assumimos sucesso
                logger.info("Clique JavaScript executado")
                click_success = True
            except Exception as js_error:
                logger.warning(f"Erro no clique JavaScript: {js_error}")
            
            # Se falhou, tenta clicar com m√©todo padr√£o
            if not click_success:
                try:
                    logger.info("Tentando clicar via m√©todo tradicional...")
                    button_to_click.click()
                    time.sleep(2)
                    logger.info("Clique tradicional executado")
                    click_success = True
                except Exception as click_error:
                    logger.warning(f"Erro no clique tradicional: {click_error}")
            
            # Se ainda falhou, tenta via Actions
            if not click_success:
                try:
                    logger.info("Tentando clicar via Actions...")
                    from selenium.webdriver.common.action_chains import ActionChains
                    actions = ActionChains(driver)
                    actions.move_to_element(button_to_click).click().perform()
                    time.sleep(2)
                    logger.info("Clique via Actions executado")
                    click_success = True
                except Exception as action_error:
                    logger.warning(f"Erro no clique via Actions: {action_error}")
            
            # M√âTODO 2: Tenta enviar ENTER no elemento e no documento
            if not click_success:
                try:
                    logger.info("Tentando enviar ENTER para o elemento...")
                    from selenium.webdriver.common.keys import Keys
                    button_to_click.send_keys(Keys.ENTER)
                    time.sleep(2)
                    logger.info("ENTER enviado para o bot√£o")
                    click_success = True
                except Exception as enter_error:
                    logger.warning(f"Erro ao enviar ENTER: {enter_error}")
                    
                    # √öltimo recurso: ENTER no documento
                    try:
                        logger.info("Tentando enviar ENTER para o documento...")
                        active_element = driver.switch_to.active_element
                        active_element.send_keys(Keys.ENTER)
                        time.sleep(2)
                        logger.info("ENTER enviado para elemento ativo")
                        click_success = True
                    except Exception as doc_enter_error:
                        logger.warning(f"Erro ao enviar ENTER para documento: {doc_enter_error}")
            
            # M√âTODO 3: √öltimo recurso - executa ENTER via JavaScript
            if not click_success:
                try:
                    logger.info("Tentando simular ENTER via JavaScript...")
                    # Simula evento de tecla ENTER
                    driver.execute_script("""
                        var e = new KeyboardEvent('keydown', {
                            'key': 'Enter',
                            'code': 'Enter',
                            'keyCode': 13,
                            'which': 13,
                            'bubbles': true
                        });
                        document.dispatchEvent(e);
                        
                        // Tamb√©m simula submit do formul√°rio
                        var forms = document.getElementsByTagName('form');
                        if (forms.length > 0) forms[0].submit();
                    """)
                    time.sleep(2)
                    logger.info("JavaScript ENTER/submit executado")
                    click_success = True
                except Exception as js_event_error:
                    logger.warning(f"Erro ao executar eventos JavaScript: {js_event_error}")
            
            # Aguarda um pouco mais e tira screenshot ap√≥s clicar
            time.sleep(3)
            driver.save_screenshot("after_save_button_click.png")
            logger.info("Screenshot ap√≥s tentativa de clique salvo")
            
            # Considera como sucesso mesmo com erros, j√° que tentamos de v√°rias formas
            save_clicked = True
            logger.info("Tentativa de clicar no bot√£o de salvar conclu√≠da")
        else:
            logger.warning("N√£o foi poss√≠vel encontrar nenhum bot√£o para salvar!")
        
        # Sempre aguarda um tempo significativo antes de retornar
        time.sleep(5)
        return save_clicked
        
    except Exception as e:
        logger.error(f"Erro cr√≠tico ao tentar clicar no bot√£o de salvar: {str(e)}")
        logger.error(traceback.format_exc())
        # Tira screenshot do erro
        driver.save_screenshot("error_save_button.png")
        time.sleep(3)  # Aguarda mesmo em caso de erro
        return False

def check_and_close_tabs():
    """Verifica se h√° novas guias abertas e as fecha."""
    try:
        driver = st.session_state.driver
        # Obt√©m todas as guias
        handles = driver.window_handles
        
        # Se houver mais de uma guia, fecha as extras
        if len(handles) > 1:
            current_handle = driver.current_window_handle
            
            for handle in handles:
                if handle != current_handle:
                    driver.switch_to.window(handle)
                    driver.close()
                    st.session_state.closed_tabs += 1
            
            # Volta para a guia principal
            driver.switch_to.window(current_handle)
            logger.info(f"Fechadas {len(handles) - 1} guias extras")
    except Exception as e:
        logger.error(f"Erro ao verificar e fechar guias: {str(e)}")

def handle_error(row, row_id):
    """Trata erros conforme o protocolo especificado."""
    try:
        driver = st.session_state.driver
        logger.info(f"Iniciando tratamento de erro para novelty {row_id}...")
        
        # Tenta fechar qualquer modal/popup aberto
        try:
            logger.info("Tentando fechar popups abertos...")
            close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
            for button in close_buttons:
                if button.is_displayed():
                    button.click()
                    time.sleep(0.5)
        except:
            pass
            
        # Clica novamente no bot√£o Save
        try:
            logger.info(f"Tentando fluxo alternativo para novelty {row_id}...")
            logger.info("Clicando novamente no bot√£o 'Save'...")
            save_button = row.find_element(By.XPATH, ".//button[contains(@class, 'btn-success')]")
            save_button.click()
            
            # Espera pelo popup e clica em "N√£o" desta vez
            logger.info("Procurando e clicando no bot√£o 'N√£o' no popup...")
            nao_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'N√£o')]"))
            )
            nao_button.click()
            
            # No segundo popup, clica em "Sim"
            logger.info("Procurando e clicando no bot√£o 'Sim' no segundo popup...")
            sim_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Sim')]"))
            )
            sim_button.click()
            
            # Aguarda o modal fechar
            time.sleep(2)
            
            logger.info(f"Tratamento alternativo aplicado com sucesso para novelty {row_id}")
        except Exception as e:
            logger.error(f"Erro ao aplicar tratamento alternativo para novelty {row_id}: {str(e)}")
            
            # Tenta fechar todos os popups novamente
            try:
                logger.info("Tentando fechar todos os popups ap√≥s falha no tratamento alternativo...")
                close_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'close') or contains(@class, 'btn-close')]")
                for button in close_buttons:
                    if button.is_displayed():
                        button.click()
                        time.sleep(0.5)
            except:
                pass
        
        # Verifica se h√° novas guias abertas
        check_and_close_tabs()
            
    except Exception as e:
        logger.error(f"Erro ao tratar erro para novelty {row_id}: {str(e)}")

def generate_report():
    """Gera um relat√≥rio da execu√ß√£o."""
    report = {
        "total_processados": st.session_state.success_count,
        "total_falhas": len(st.session_state.failed_items),
        "itens_com_falha": st.session_state.failed_items,
        "guias_fechadas": st.session_state.closed_tabs,
        "encontrou_paginacao": st.session_state.found_pagination
    }
    
    logger.info("======= RELAT√ìRIO DE EXECU√á√ÉO =======")
    logger.info(f"Total de novelties processadas com sucesso: {report['total_processados']}")
    logger.info(f"Total de novelties com falha: {report['total_falhas']}")
    logger.info(f"Total de guias fechadas durante o processo: {report['guias_fechadas']}")
    logger.info(f"Encontrou op√ß√£o para filtrar 1000 itens: {'Sim' if report['encontrou_paginacao'] else 'N√£o'}")
    
    if report['total_falhas'] > 0:
        logger.info("Detalhes dos itens com falha:")
        for item in report['itens_com_falha']:
            logger.info(f"  - ID: {item['id']}, Erro: {item['error']}")
            
    logger.info("=====================================")
    
    st.session_state.report = report

# Processamento da automa√ß√£o baseado no estado atual - VERS√ÉO CORRIGIDA
if st.session_state.is_running:
    # Etapas da automa√ß√£o
    if st.session_state.automation_step == 'setup':
        if setup_driver():
            st.session_state.automation_step = 'login'
            st.rerun()
        else:
            st.session_state.is_running = False
            st.error("Falha ao configurar o driver Chrome")
    
    elif st.session_state.automation_step == 'login':
        if login():
            # ADICIONAR: Verifica√ß√£o de autentica√ß√£o
            if verify_authentication():
                st.session_state.automation_step = 'navigate'
                st.rerun()
            else:
                st.session_state.is_running = False
                st.error("Falha na autentica√ß√£o - login n√£o foi bem-sucedido")
        else:
            st.session_state.is_running = False
            st.error("Falha no login")
    
    elif st.session_state.automation_step == 'navigate':
        if navigate_to_novelties():
            # ADICIONAR: Segunda verifica√ß√£o de autentica√ß√£o
            if verify_authentication():
                st.session_state.automation_step = 'configure'
                st.rerun()
            else:
                st.session_state.is_running = False
                st.error("Falha na autentica√ß√£o - redirecionado para p√°gina de login")
        else:
            st.session_state.is_running = False
            st.error("Falha ao navegar at√© Novelties")
    
    elif st.session_state.automation_step == 'configure':
        if configure_entries_display():
            # Verifica se h√° novelties para processar
            if st.session_state.total_items > 0:
                st.session_state.automation_step = 'process'
                st.rerun()
            else:
                logger.info("Nenhuma novelty encontrada para processar")
                generate_report()
                st.session_state.automation_step = 'complete'
                st.session_state.is_running = False
                st.info("Automa√ß√£o conclu√≠da - Nenhuma novelty encontrada para processar")
        else:
            st.session_state.is_running = False
            st.error("Falha ao configurar exibi√ß√£o de entradas ou problema de autentica√ß√£o")
    
    elif st.session_state.automation_step == 'process':
        # Processa uma novelty por vez e faz rerun para atualizar a interface
        all_done = process_current_novelty()
        if all_done:
            st.session_state.automation_step = 'complete'
            # Fecha o navegador no final
            logger.info("Fechando o navegador...")
            if st.session_state.driver:
                st.session_state.driver.quit()
                st.session_state.driver = None
            st.session_state.is_running = False
        st.rerun()
    
    elif st.session_state.automation_step == 'complete':
        st.session_state.is_running = False
        st.success("Automa√ß√£o conclu√≠da com sucesso!")

with tab2:
    st.subheader("Relat√≥rio de Execu√ß√µes")
    
    # Filtros de data
    col1, col2 = st.columns(2)
    with col1:
        default_start_date = datetime.datetime.now() - datetime.timedelta(days=30)
        start_date = st.date_input("Data Inicial", value=default_start_date)
    with col2:
        end_date = st.date_input("Data Final", value=datetime.datetime.now())
    
    # Converte as datas para o formato string YYYY-MM-DD
    start_date_str = start_date.strftime("%Y-%m-%d")
    end_date_str = end_date.strftime("%Y-%m-%d") + " 23:59:59"
    
    # Bot√£o para atualizar o relat√≥rio
    if st.button("Atualizar Relat√≥rio", key="update_report"):
        st.session_state.filtered_data = get_execution_history(start_date_str, end_date_str)
    
    # Inicializa a vari√°vel filtered_data
    if 'filtered_data' not in st.session_state:
        st.session_state.filtered_data = get_execution_history(start_date_str, end_date_str)
    
    # Exibe os dados em formato de tabela
    if st.session_state.filtered_data.empty:
        st.info("N√£o h√° dados de execu√ß√£o para o per√≠odo selecionado.")
    else:
        # Formata√ß√£o da tabela
        display_df = st.session_state.filtered_data.copy()
        display_df['execution_date'] = pd.to_datetime(display_df['execution_date'])
        display_df['data_execucao'] = display_df['execution_date'].dt.strftime('%d/%m/%Y %H:%M')
        
        # Renomeia colunas para portugu√™s
        display_df.rename(columns={
            'total_processed': 'Total Processado',
            'successful': 'Sucessos',
            'failed': 'Falhas',
            'execution_time': 'Tempo (segundos)'
        }, inplace=True)
        
        # Exibe a tabela
        display_columns = ['data_execucao', 'Total Processado', 'Sucessos', 'Falhas', 'Tempo (segundos)']
        st.dataframe(display_df[display_columns], width=800)
        
        # Estat√≠sticas
        total_novelties = display_df['Total Processado'].sum()
        total_success = display_df['Sucessos'].sum()
        total_failed = display_df['Falhas'].sum()
        avg_time = display_df['Tempo (segundos)'].mean()
        
        # M√©tricas
        stats_cols = st.columns(4)
        with stats_cols[0]:
            st.metric("Total de Novelties", f"{total_novelties}")
        with stats_cols[1]:
            st.metric("Total de Sucessos", f"{total_success}")
        with stats_cols[2]:
            st.metric("Total de Falhas", f"{total_failed}")
        with stats_cols[3]:
            st.metric("Tempo M√©dio (s)", f"{avg_time:.2f}")